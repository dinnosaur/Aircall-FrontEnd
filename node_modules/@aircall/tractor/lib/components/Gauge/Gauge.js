"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.GaugeForStory = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _styledSystem = require("styled-system");

var _Grid = require("../Grid");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var GaugeIndicator = _styledComponents["default"].span.withConfig({
  displayName: "Gauge__GaugeIndicator",
  componentId: "sc-13cs6oa-0"
})(["", ";border-radius:8px;display:block;height:12px;transition:background-color 0.2s ease-in-out;"], _styledSystem.color);

var Gauge = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var value = _ref.value,
      _ref$gauges = _ref.gauges,
      gauges = _ref$gauges === void 0 ? 8 : _ref$gauges;
  var gaugesArray = Array.from(Array(gauges).keys()); // Just make n f**n gauges.

  return /*#__PURE__*/_react["default"].createElement(_Grid.Grid, {
    ref: ref,
    width: "100%",
    gridColumnGap: "12px",
    gridTemplateColumns: "repeat(8, 1fr)",
    "data-test": "input-gauge"
  }, gaugesArray.map(function (_, index) {
    return /*#__PURE__*/_react["default"].createElement(GaugeIndicator, {
      key: index,
      bg: index < value ? 'primary.base' : 'grey.base'
    });
  }));
}); // Just for the story itself, because we need the mediaDevices from the navigator.

var GaugeForStory = function GaugeForStory() {
  var _useState = (0, _react.useState)(),
      selectedDevice = _useState[0],
      setSelectedDevice = _useState[1];

  var _useState2 = (0, _react.useState)(),
      mediaStream = _useState2[0],
      setMediaStream = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      volumeLevel = _useState3[0],
      setVolumeLevel = _useState3[1];

  var level = Math.trunc(volumeLevel * 16);
  (0, _react.useEffect)(function () {
    if (!selectedDevice) {
      navigator.mediaDevices.enumerateDevices().then(function (devices) {
        // Find the (first) default device.
        var defaultDevice = devices.find(function (device) {
          return device.deviceId === 'default' && device.kind === 'audioinput';
        }); // Find the real default device using the first one's groupId.

        var selectedDevice = devices.find(function (device) {
          return defaultDevice && device.deviceId !== 'default' && device.groupId === defaultDevice.groupId && device.kind === 'audioinput';
        });
        setSelectedDevice(selectedDevice);
      });
    }
  }, [setSelectedDevice, selectedDevice]);
  (0, _react.useEffect)(function () {
    if (!!selectedDevice) {
      var mediaConstraints = {
        audio: {
          deviceId: selectedDevice.deviceId
        }
      };
      navigator.mediaDevices.getUserMedia(_extends({}, mediaConstraints)).then(setMediaStream);
    }

    return function () {
      setMediaStream(undefined);
      setVolumeLevel(0);
    };
  }, [selectedDevice]);
  (0, _react.useEffect)(function () {
    if (!mediaStream) {
      return;
    }

    var pollVolume = new _utils.PollVolumeClass();

    var _createVolumeAnalyser = (0, _utils.createVolumeAnalyserData)(mediaStream),
        audioContext = _createVolumeAnalyser.audioContext,
        mediaStreamSource = _createVolumeAnalyser.mediaStreamSource,
        analyserNode = _createVolumeAnalyser.analyserNode,
        analyserDataBuffer = _createVolumeAnalyser.analyserDataBuffer;

    pollVolume.pollVolume(analyserNode, analyserDataBuffer, setVolumeLevel);
    return function () {
      pollVolume.isPolling = false;
      mediaStreamSource.disconnect();
      mediaStream.getTracks().forEach(function (track) {
        return track.stop();
      });
      audioContext.close();
    };
  }, [mediaStream]);
  return /*#__PURE__*/_react["default"].createElement(Gauge, {
    value: level
  });
};

exports.GaugeForStory = GaugeForStory;
var _default = Gauge;
exports["default"] = _default;