"use strict";

var _react = _interopRequireDefault(require("react"));

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _testUtils = require("test-utils");

var _dom = require("../../../tests/dom");

var domUtils = _interopRequireWildcard(require("../../../utils/dom"));

var _Button = require("../../Button");

var _Dropdown = require("../Dropdown");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

jest.mock('../../../utils/dom');
var overlayBox = (0, _dom.getBoundingBox)({
  width: 200,
  height: 100
});
/**
 * More of a placeholder for now, until more functionality is added
 */

describe('Dropdown', function () {
  describe('Trigger', function () {
    it('should render the given trigger', function () {
      var LABEL = 'menu';

      var _render = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
        trigger: /*#__PURE__*/_react["default"].createElement(_Button.Button, null, LABEL)
      })),
          getByText = _render.getByText;

      expect(getByText(LABEL)).toBeInTheDocument();
    });
  });
  describe('Children', function () {
    it('should not render dropdown content until triggered', function () {
      var TITLE = 'Hello';

      var _render2 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
        trigger: /*#__PURE__*/_react["default"].createElement(_Button.Button, null, "show")
      }, /*#__PURE__*/_react["default"].createElement("h1", null, TITLE))),
          queryByText = _render2.queryByText;

      expect(queryByText(TITLE)).not.toBeInTheDocument();
    });
    it('should render dropdown content when triggered', function () {
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
      var TITLE = 'Hello';

      var _render3 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
        trigger: /*#__PURE__*/_react["default"].createElement(_Button.Button, {
          "data-test": "trigger"
        }, "show")
      }, /*#__PURE__*/_react["default"].createElement("h1", null, TITLE))),
          queryByText = _render3.queryByText,
          getByTestId = _render3.getByTestId;

      _userEvent["default"].click(getByTestId('trigger'));

      expect(queryByText(TITLE)).toBeInTheDocument();
    });
    it('should render dropdown content when triggered', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var onClick, TITLE, _render4, getByTestId, findByTestId, queryByText, content;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
              onClick = jest.fn();
              TITLE = 'Click me!';
              _render4 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
                trigger: /*#__PURE__*/_react["default"].createElement(_Button.Button, {
                  "data-test": "trigger"
                }, "show")
              }, /*#__PURE__*/_react["default"].createElement("h1", {
                "data-test": "content",
                onClick: onClick
              }, TITLE))), getByTestId = _render4.getByTestId, findByTestId = _render4.findByTestId, queryByText = _render4.queryByText;

              _userEvent["default"].click(getByTestId('trigger'));

              _context.next = 7;
              return findByTestId('content');

            case 7:
              content = _context.sent;

              _userEvent["default"].click(content);

              expect(onClick).toHaveBeenCalled();
              _context.next = 12;
              return (0, _testUtils.waitForElementToBeRemoved)(queryByText(TITLE));

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
  });
  describe('Controlled', function () {
    it('should be opened by default', function () {
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
      var TITLE = 'Hello';

      var _render5 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
        visible: true,
        trigger: /*#__PURE__*/_react["default"].createElement(_Button.Button, {
          "data-test": "trigger"
        }, "show")
      }, /*#__PURE__*/_react["default"].createElement("h1", null, TITLE))),
          queryByText = _render5.queryByText;

      expect(queryByText(TITLE)).toBeInTheDocument();
    });
    it('should closed by default', function () {
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
      var TITLE = 'Hello';

      var _render6 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
        visible: false,
        trigger: /*#__PURE__*/_react["default"].createElement(_Button.Button, {
          "data-test": "trigger"
        }, "show")
      }, /*#__PURE__*/_react["default"].createElement("h1", null, TITLE))),
          queryByText = _render6.queryByText;

      expect(queryByText(TITLE)).not.toBeInTheDocument();
    });
    it('should close the dropdown when clicking on the trigger', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var TITLE, _render7, queryByText, getByTestId;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
              TITLE = 'Hello';
              _render7 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
                visible: true,
                trigger: /*#__PURE__*/_react["default"].createElement(_Button.Button, {
                  "data-test": "trigger"
                }, "show")
              }, /*#__PURE__*/_react["default"].createElement("h1", null, TITLE))), queryByText = _render7.queryByText, getByTestId = _render7.getByTestId;
              expect(queryByText(TITLE)).toBeInTheDocument();

              _userEvent["default"].click(getByTestId('trigger'));

              expect(queryByText(TITLE)).not.toBeInTheDocument();

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
    it('should close the dropdown when clicking outside', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var TITLE, _render8, queryByText, getByTestId;

      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
              TITLE = 'Hello';
              _render8 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
                visible: true,
                trigger: /*#__PURE__*/_react["default"].createElement(_Button.Button, {
                  "data-test": "trigger"
                }, "show")
              }, /*#__PURE__*/_react["default"].createElement("h1", null, TITLE)), /*#__PURE__*/_react["default"].createElement("div", {
                "data-test": "outside"
              }, "Outside"))), queryByText = _render8.queryByText, getByTestId = _render8.getByTestId;
              expect(queryByText(TITLE)).toBeInTheDocument();

              _userEvent["default"].click(getByTestId('outside'));

              _context3.next = 7;
              return (0, _testUtils.waitForElementToBeRemoved)(queryByText(TITLE));

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    it('should close if the prop changes for true to false', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var TITLE, _render9, queryByText, setProps;

      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
              TITLE = 'Hello';
              _render9 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
                visible: true,
                trigger: /*#__PURE__*/_react["default"].createElement(_Button.Button, {
                  "data-test": "trigger"
                }, "show")
              }, /*#__PURE__*/_react["default"].createElement("h1", null, TITLE))), queryByText = _render9.queryByText, setProps = _render9.setProps;
              expect(queryByText(TITLE)).toBeInTheDocument();
              setProps({
                visible: false
              });
              expect(queryByText(TITLE)).not.toBeInTheDocument();

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
    it('should open if the prop changes for false to true', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      var TITLE, _render10, queryByText, setProps;

      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
              TITLE = 'Hello';
              _render10 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_Dropdown.Dropdown, {
                visible: false,
                trigger: /*#__PURE__*/_react["default"].createElement(_Button.Button, {
                  "data-test": "trigger"
                }, "show")
              }, /*#__PURE__*/_react["default"].createElement("h1", null, TITLE))), queryByText = _render10.queryByText, setProps = _render10.setProps;
              expect(queryByText(TITLE)).not.toBeInTheDocument();
              setProps({
                visible: true
              });
              expect(queryByText(TITLE)).toBeInTheDocument();

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
  });
});