"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VisibilityTrigger = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Button = require("../../Button");

var _Icon = require("../../Icon");

var _context = require("../context");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var VisibilityTrigger = /*#__PURE__*/_react["default"].forwardRef(function (_ref, ref) {
  var props = _extends({}, _ref);

  var _useContext = (0, _react.useContext)(_context.DropdownContext),
      isVisible = _useContext.isVisible;

  return /*#__PURE__*/_react["default"].createElement(_Button.Button, _extends({}, props, {
    mode: _Button.ButtonMode.OUTLINE,
    ref: ref
  }), isVisible ? /*#__PURE__*/_react["default"].createElement(_Icon.VisibleOffOutlined, null) : /*#__PURE__*/_react["default"].createElement(_Icon.VisibleOnOutlined, null));
});

exports.VisibilityTrigger = VisibilityTrigger;