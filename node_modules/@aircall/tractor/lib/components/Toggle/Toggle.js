"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toggle = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _common = require("../../declarations/common.decl");

var _Form = require("../Form");

var _context = require("../Form/context");

var _utils = require("./utils");

var _excluded = ["checked", "defaultChecked", "disabled", "size", "onChange", "validationStatus", "name", "id"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ToggleContainer = _styledComponents["default"].label.withConfig({
  displayName: "Toggle__ToggleContainer",
  componentId: "sc-bbp8pj-0"
})(["position:relative;display:block;user-select:none;box-sizing:border-box;cursor:", ";border:1px solid transparent;", " ", " transition:background 300ms ease-in-out;input{display:none;}&::after{display:block;content:'';position:absolute;bottom:0;top:0;margin:auto;border-radius:50%;transition:left 230ms ease-in-out;}"], function (_ref) {
  var disabled = _ref.disabled;
  return disabled ? 'not-allowed' : 'pointer';
}, _utils.makeToggleSize, _utils.makeToggleColor);

var Toggle = /*#__PURE__*/(0, _react.forwardRef)(function (_ref2, ref) {
  var checked = _ref2.checked,
      _ref2$defaultChecked = _ref2.defaultChecked,
      defaultChecked = _ref2$defaultChecked === void 0 ? false : _ref2$defaultChecked,
      _ref2$disabled = _ref2.disabled,
      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
      size = _ref2.size,
      onChange = _ref2.onChange,
      validationStatus = _ref2.validationStatus,
      name = _ref2.name,
      id = _ref2.id,
      otherStyleProps = _objectWithoutPropertiesLoose(_ref2, _excluded);

  var formContext = (0, _context.useFormContext)();
  var formItemContext = (0, _context.useFormItemContext)();
  var inputSize = size || (formContext == null ? void 0 : formContext.size) || _common.ComponentSize.REGULAR;
  var inputStatus = validationStatus || (formItemContext == null ? void 0 : formItemContext.validationStatus);
  var error = inputStatus === _Form.FormItemStatus.ERROR;

  var _useState = (0, _react.useState)(defaultChecked),
      innerCheck = _useState[0],
      setInnerCheck = _useState[1];

  var handleOnChange = (0, _react.useCallback)(function (event) {
    if (!disabled) {
      var _checked = event.target.checked;
      setInnerCheck(_checked);
      onChange == null ? void 0 : onChange(_checked, event);
    }
  }, [disabled, onChange]);
  var checkboxCheck = checked !== undefined ? checked : innerCheck;
  return /*#__PURE__*/_react["default"].createElement(ToggleContainer, _extends({
    checked: checkboxCheck,
    disabled: disabled,
    size: inputSize,
    error: error,
    htmlFor: id
  }, otherStyleProps), /*#__PURE__*/_react["default"].createElement("input", {
    ref: ref,
    "data-test": "toggle",
    type: "checkbox",
    checked: checkboxCheck,
    disabled: disabled,
    onChange: handleOnChange,
    name: name,
    id: id
  }));
});
exports.Toggle = Toggle;