"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CounterBadge = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _styledSystem = require("styled-system");

var _Flex = require("../Flex");

var _Typography = require("../Typography");

var _CounterBadge = require("./CounterBadge.decl");

var _utils = require("./utils");

var _excluded = ["children", "size", "variant", "count", "maxCount", "color"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var BadgeIndicator = _styledComponents["default"].div.withConfig({
  shouldForwardProp: _utils.shouldForwardProp
}).withConfig({
  displayName: "CounterBadge__BadgeIndicator",
  componentId: "sc-1xfirws-0"
})(["display:inline-flex;align-items:center;justify-content:center;overflow:hidden;", " ", " ", " ", "  ", ""], _utils.makeBadgePosition, _utils.makeBadgeVariant, _utils.makeBadgeSize, _styledSystem.position, _styledSystem.color);

var CounterBadge = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? _CounterBadge.CounterBadgeSize.REGULAR : _ref$size,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? _CounterBadge.CounterBadgeVariant.DESTRUCTIVE : _ref$variant,
      count = _ref.count,
      _ref$maxCount = _ref.maxCount,
      maxCount = _ref$maxCount === void 0 ? 99 : _ref$maxCount,
      color = _ref.color,
      otherStyleProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  /**
   * Don't show the counter badge if the count is set to 0
   */
  if (count === 0) {
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, children);
  }

  return /*#__PURE__*/_react["default"].createElement(_Flex.Flex, {
    display: "inline-flex",
    position: "relative",
    ref: ref
  }, children, /*#__PURE__*/_react["default"].createElement(BadgeIndicator, _extends({
    size: size,
    variant: variant,
    hasChildren: !!children,
    color: color // This one has issues.

  }, otherStyleProps), /*#__PURE__*/_react["default"].createElement(_Typography.Typography, {
    variant: _utils.TYPOGRAHY_VARIANTS[size],
    px: count >= 10 ? _utils.TYPOGRAHY_PADDINGS[size] : 0,
    userSelect: "none"
  }, count <= maxCount ? count : maxCount + "+")));
});
exports.CounterBadge = CounterBadge;