"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shouldForwardProp = exports.makeBadgeVariant = exports.makeBadgeSize = exports.makeBadgePosition = exports.TYPOGRAHY_VARIANTS = exports.TYPOGRAHY_PADDINGS = void 0;

var _Typography = require("../Typography");

var _CounterBadge = require("./CounterBadge.decl");

var _TYPOGRAHY_VARIANTS, _TYPOGRAHY_PADDINGS;

var makeBadgeVariant = function makeBadgeVariant(_ref) {
  var variant = _ref.variant,
      theme = _ref.theme;
  var variants = {
    destructive: {
      backgroundColor: theme.colors.red.base,
      textColor: theme.colors.base.white
    },
    black: {
      backgroundColor: theme.colors.base.black,
      textColor: theme.colors.base.white
    }
  };
  var _variants$variant = variants[variant],
      backgroundColor = _variants$variant.backgroundColor,
      textColor = _variants$variant.textColor;
  return {
    backgroundColor: backgroundColor,
    color: textColor
  };
};

exports.makeBadgeVariant = makeBadgeVariant;

var makeBadgeSize = function makeBadgeSize(_ref2) {
  var size = _ref2.size,
      theme = _ref2.theme;
  var _theme$counterBadge$s = theme.counterBadge.sizes[size],
      minWidth = _theme$counterBadge$s.minWidth,
      maxWidth = _theme$counterBadge$s.maxWidth,
      height = _theme$counterBadge$s.height;
  return {
    minWidth: minWidth,
    maxWidth: maxWidth,
    height: height,
    borderRadius: height / 2
  };
};

exports.makeBadgeSize = makeBadgeSize;

var makeBadgePosition = function makeBadgePosition(_ref3) {
  var hasChildren = _ref3.hasChildren;

  if (!hasChildren) {
    return;
  }

  return {
    position: 'absolute',
    right: '-4px',
    top: '-4px'
  };
}; // Props that should not be forwarded to the HTML DOM elements


exports.makeBadgePosition = makeBadgePosition;

var shouldForwardProp = function shouldForwardProp(prop, defaultValidationFn) {
  return !['height', 'width', 'color', 'display'].includes(prop) && defaultValidationFn(prop);
};

exports.shouldForwardProp = shouldForwardProp;
var TYPOGRAHY_VARIANTS = (_TYPOGRAHY_VARIANTS = {}, _TYPOGRAHY_VARIANTS[_CounterBadge.CounterBadgeSize.SMALL] = _Typography.TypographyVariant.OVERLINE, _TYPOGRAHY_VARIANTS[_CounterBadge.CounterBadgeSize.REGULAR] = _Typography.TypographyVariant.CAPTION, _TYPOGRAHY_VARIANTS[_CounterBadge.CounterBadgeSize.LARGE] = _Typography.TypographyVariant.CAPTION, _TYPOGRAHY_VARIANTS);
exports.TYPOGRAHY_VARIANTS = TYPOGRAHY_VARIANTS;
var TYPOGRAHY_PADDINGS = (_TYPOGRAHY_PADDINGS = {}, _TYPOGRAHY_PADDINGS[_CounterBadge.CounterBadgeSize.SMALL] = '4px', _TYPOGRAHY_PADDINGS[_CounterBadge.CounterBadgeSize.REGULAR] = '8px', _TYPOGRAHY_PADDINGS[_CounterBadge.CounterBadgeSize.LARGE] = '8px', _TYPOGRAHY_PADDINGS);
exports.TYPOGRAHY_PADDINGS = TYPOGRAHY_PADDINGS;