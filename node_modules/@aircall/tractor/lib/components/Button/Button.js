"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../../utils");

var _genericForwardRef = require("../../utils/genericForwardRef");

var _context = require("../Form/context");

var _Spacer = require("../Spacer");

var _Button = require("./Button.decl");

var _utils2 = require("./utils");

var _excluded = ["size", "variant", "mode", "direction", "space", "disabled", "readOnly", "block", "shadow", "onClick", "children", "onMouseUp", "component"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ButtonContainer = (0, _styledComponents["default"])(_Spacer.Spacer).withConfig({
  shouldForwardProp: _utils2.shouldForwardProp
}).withConfig({
  displayName: "Button__ButtonContainer",
  componentId: "sc-18uw1de-0"
})(["position:relative;white-space:nowrap;text-align:center;background-image:none;border:1px solid transparent;touch-action:manipulation;font-family:", ";border-radius:", ";cursor:", ";user-select:none;transition:all 200ms ease-in-out;", " ", " ", " ", " &,:not([disabled]):active,:active:focus{outline:0;}"], (0, _utils.fromTheme)('typography.fontFamily'), (0, _utils.fromTheme)('radii.8'), function (_ref) {
  var readOnly = _ref.readOnly;
  return readOnly ? 'normal' : 'pointer';
}, _utils2.makeButtonVariant, _utils2.makeButtonShadow, _utils2.makeButtonTypography, _utils2.makeButtonSize);

function Button(_ref2, ref) {
  var size = _ref2.size,
      _ref2$variant = _ref2.variant,
      variant = _ref2$variant === void 0 ? _Button.ButtonVariant.PRIMARY : _ref2$variant,
      _ref2$mode = _ref2.mode,
      mode = _ref2$mode === void 0 ? _Button.ButtonMode.FILL : _ref2$mode,
      _ref2$direction = _ref2.direction,
      direction = _ref2$direction === void 0 ? _Button.ButtonDirection.HORIZONTAL : _ref2$direction,
      _ref2$space = _ref2.space,
      space = _ref2$space === void 0 ? _Spacer.SpaceVariant.XXS : _ref2$space,
      _ref2$disabled = _ref2.disabled,
      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
      _ref2$readOnly = _ref2.readOnly,
      readOnly = _ref2$readOnly === void 0 ? false : _ref2$readOnly,
      _ref2$block = _ref2.block,
      block = _ref2$block === void 0 ? false : _ref2$block,
      _ref2$shadow = _ref2.shadow,
      shadow = _ref2$shadow === void 0 ? false : _ref2$shadow,
      onClick = _ref2.onClick,
      children = _ref2.children,
      onMouseUp = _ref2.onMouseUp,
      component = _ref2.component,
      otherStyleProps = _objectWithoutPropertiesLoose(_ref2, _excluded);

  var formContext = (0, _context.useFormContext)();
  var buttonSize = size || (formContext == null ? void 0 : formContext.size) || _Button.ButtonSize.REGULAR;
  var as = component != null ? component : 'button';
  /**
   * When the user clicks on the button and releases the mouse button
   * the button stays on the active state (on Chrome, and some other browsers)
   * which is not the expected behavior. In this case, when the mouse button is up
   * we need to make the button lose focus by calling currentTarget.blur()
   */

  var handleMouseUp = (0, _react.useCallback)(function (event) {
    event.currentTarget.blur();
    onMouseUp == null ? void 0 : onMouseUp(event);
  }, [onMouseUp]);
  return /*#__PURE__*/_react["default"].createElement(ButtonContainer, _extends({
    type: as === 'button' ? 'button' : undefined,
    ref: ref,
    buttonSize: buttonSize,
    variant: variant,
    mode: mode,
    disabled: disabled,
    readOnly: readOnly,
    shadow: shadow,
    onClick: readOnly ? undefined : onClick,
    space: space,
    alignItems: "center",
    justifyContent: "center",
    direction: direction,
    fluid: block,
    onMouseUp: handleMouseUp,
    forwardedAs: as
  }, otherStyleProps), children);
}

var _default = (0, _genericForwardRef.genericForwardRef)(Button);

exports["default"] = _default;