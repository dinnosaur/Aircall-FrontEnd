"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shouldForwardProp = exports.makeRadioSize = exports.makeRadioIndicatorSize = exports.makeRadioIndicatorColor = exports.makeRadioColor = void 0;

var _styledComponents = require("styled-components");

// Props that should not be forwarded to the HTML DOM elements
var shouldForwardProp = function shouldForwardProp(prop, defaultValidationFn) {
  return !['disabled'].includes(prop) && defaultValidationFn(prop);
};
/**
 * Defines the radio size according to the size property.
 * Check this figma link for more details: https://www.figma.com/file/2D5oejKfR6yZJ3Qh6ZHgmu/00.-Tractor---Foundation?node-id=615%3A203
 */


exports.shouldForwardProp = shouldForwardProp;

var makeRadioSize = function makeRadioSize(_ref) {
  var size = _ref.size,
      theme = _ref.theme;
  return theme.radio.sizes[size];
};

exports.makeRadioSize = makeRadioSize;

var makeRadioColor = function makeRadioColor(_ref2) {
  var checked = _ref2.checked,
      disabled = _ref2.disabled,
      theme = _ref2.theme,
      error = _ref2.error;

  if (disabled) {
    if (!checked) {
      return (0, _styledComponents.css)(["background-color:", ";border-color:", ";"], theme.colors.grey.base, theme.colors.grey.light);
    }

    return (0, _styledComponents.css)(["background-color:", ";border-color:", ";"], theme.colors.grey.base, theme.colors.grey.base);
  }

  if (error) {
    return (0, _styledComponents.css)(["background-color:", ";border-color:", ";&:hover{background-color:", ";border-color:", ";}&:focus-within{background-color:", ";border-color:", ";}"], theme.colors.base.white, theme.colors.red.dark, theme.colors.red.lighter, theme.colors.red.dark, theme.colors.base.white, theme.colors.red.darker);
  }

  if (checked) {
    return (0, _styledComponents.css)(["background-color:", ";border-color:", ";&:hover{background-color:", ";border-color:", ";}&:focus-within{border-color:", ";}"], theme.colors.primary.base, theme.colors.primary.base, theme.colors.primary.dark, theme.colors.primary.dark, theme.colors.primary.dark);
  }

  return (0, _styledComponents.css)(["background-color:", ";&:hover{background-color:", ";border-color:", ";}&:focus-within{border-color:", ";}"], theme.colors.base.white, theme.colors.grey.lighter, theme.colors.grey.base, theme.colors.primary.base);
};

exports.makeRadioColor = makeRadioColor;

var makeRadioIndicatorSize = function makeRadioIndicatorSize(_ref3) {
  var size = _ref3.size,
      checked = _ref3.checked,
      theme = _ref3.theme;

  if (!checked) {
    return null;
  }

  var circleSize = theme.radio.circleSizes[size];
  return (0, _styledComponents.css)(["", " left:calc(50% - ", "px);"], circleSize, parseInt(circleSize.width, 10) / 2);
};

exports.makeRadioIndicatorSize = makeRadioIndicatorSize;

var makeRadioIndicatorColor = function makeRadioIndicatorColor(_ref4) {
  var checked = _ref4.checked,
      disabled = _ref4.disabled,
      error = _ref4.error,
      theme = _ref4.theme;

  if (!checked) {
    return null;
  }

  if (disabled) {
    return (0, _styledComponents.css)(["background-color:", ";"], theme.colors.grey.light);
  }

  if (error) {
    return (0, _styledComponents.css)(["background-color:", ";"], theme.colors.red.dark);
  }

  return (0, _styledComponents.css)(["background-color:", ";"], theme.colors.base.white);
};

exports.makeRadioIndicatorColor = makeRadioIndicatorColor;