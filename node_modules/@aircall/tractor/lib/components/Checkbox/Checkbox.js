"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Checkbox = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _common = require("../../declarations/common.decl");

var _Flex = require("../Flex");

var _Form = require("../Form");

var _context = require("../Form/context");

var _Typography = require("../Typography");

var _utils = require("./utils");

var _excluded = ["disabled", "size", "checked", "validationStatus", "defaultChecked", "onChange", "children", "id", "readOnly"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var CheckboxContainer = (0, _styledComponents["default"])(_Flex.Flex).withConfig({
  shouldForwardProp: _utils.shouldForwardProp
}).withConfig({
  displayName: "Checkbox__CheckboxContainer",
  componentId: "sc-1txeeyv-0"
})(["position:relative;cursor:", ";", " ", " transition:background 300ms,width 300ms,height 300ms;outline:0;user-select:none;clip-path:url(#svgPath);input{display:none;}&::after{transition:background 300ms ease-in-out;content:'';position:absolute;clip-path:url(#svgPath);top:1px;left:1px;right:1px;bottom:1px;z-index:-1;}"], function (_ref) {
  var disabled = _ref.disabled;
  return disabled ? 'not-allowed' : 'pointer';
}, _utils.makeCheckboxSize, _utils.makeCheckboxColor);

var CheckboxIndicator = _styledComponents["default"].div.withConfig({
  shouldForwardProp: _utils.shouldForwardProp
}).withConfig({
  displayName: "Checkbox__CheckboxIndicator",
  componentId: "sc-1txeeyv-1"
})(["display:block;margin:auto;border-radius:50%;transition:transform 150ms;", " ", " ", ""], _utils.makeCheckboxIndicatorColor, _utils.makeCheckboxIndicatorSize, function (_ref2) {
  var checked = _ref2.checked;
  return "transform: " + (checked ? 'scale(1)' : 'scale(0)') + ";";
});

var CheckboxWrapper = (0, _styledComponents["default"])(_Flex.Flex).withConfig({
  displayName: "Checkbox__CheckboxWrapper",
  componentId: "sc-1txeeyv-2"
})(["pointer-events:", ";"], function (_ref3) {
  var readOnly = _ref3.readOnly;
  return readOnly ? 'none' : 'all';
});
var Checkbox = /*#__PURE__*/(0, _react.forwardRef)(function (_ref4, ref) {
  var _ref5;

  var disabled = _ref4.disabled,
      size = _ref4.size,
      checked = _ref4.checked,
      validationStatus = _ref4.validationStatus,
      _ref4$defaultChecked = _ref4.defaultChecked,
      defaultChecked = _ref4$defaultChecked === void 0 ? false : _ref4$defaultChecked,
      onChange = _ref4.onChange,
      children = _ref4.children,
      id = _ref4.id,
      readOnly = _ref4.readOnly,
      otherStyleProps = _objectWithoutPropertiesLoose(_ref4, _excluded);

  var formContext = (0, _context.useFormContext)();
  var formItemContext = (0, _context.useFormItemContext)();

  var _useState = (0, _react.useState)(defaultChecked),
      innerCheck = _useState[0],
      setInnerCheck = _useState[1];

  var checkboxCheck = checked != null ? checked : innerCheck;
  var checkboxSize = (_ref5 = size != null ? size : formContext == null ? void 0 : formContext.size) != null ? _ref5 : _common.ComponentSize.REGULAR;
  var inputStatus = validationStatus != null ? validationStatus : formItemContext == null ? void 0 : formItemContext.validationStatus;
  var error = inputStatus === _Form.FormItemStatus.ERROR;
  var handleOnChange = (0, _react.useCallback)(function (event) {
    if (!disabled) {
      var _checked = event.target.checked;
      setInnerCheck(_checked);
      onChange == null ? void 0 : onChange(_checked, event);
    }
  }, [disabled, onChange]);
  return /*#__PURE__*/_react["default"].createElement(CheckboxWrapper, _extends({
    cursor: disabled || readOnly ? undefined : 'pointer',
    alignItems: "center",
    as: "label",
    htmlFor: id,
    readOnly: readOnly
  }, otherStyleProps), /*#__PURE__*/_react["default"].createElement(CheckboxContainer, {
    checked: checkboxCheck,
    checkboxSize: checkboxSize,
    disabled: disabled,
    error: error
  }, /*#__PURE__*/_react["default"].createElement("input", {
    ref: ref,
    "data-test": "checkbox",
    type: "checkbox",
    "aria-checked": checkboxCheck,
    checked: checkboxCheck,
    disabled: disabled,
    onChange: handleOnChange,
    id: id
  }), /*#__PURE__*/_react["default"].createElement(CheckboxIndicator, {
    checked: checkboxCheck,
    disabled: disabled,
    error: error,
    size: checkboxSize
  })), !!_react.Children.count(children) && /*#__PURE__*/_react["default"].createElement(_Typography.Typography, {
    variant: "body2",
    color: "text.base",
    userSelect: "none",
    ml: "xxs"
  }, children));
});
exports.Checkbox = Checkbox;