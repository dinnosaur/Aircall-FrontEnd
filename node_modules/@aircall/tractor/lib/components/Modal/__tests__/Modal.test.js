"use strict";

var _react = _interopRequireDefault(require("react"));

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _ = require("..");

var _testUtils = require("../../../tests/test-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('Modal Component', function () {
  it('should render Modal with Header and Footer', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var onHideMock, closeBtn;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onHideMock = jest.fn();
            (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
              show: true,
              onHide: onHideMock
            }, /*#__PURE__*/_react["default"].createElement(_.Modal.Header, null, "Header"), /*#__PURE__*/_react["default"].createElement(_.Modal.Body, null, "Body content"), /*#__PURE__*/_react["default"].createElement(_.Modal.Footer, null, /*#__PURE__*/_react["default"].createElement("button", {
              type: "button"
            }, "Cancel"))));
            closeBtn = _testUtils.screen.getByTestId('modal-close-icon');
            expect(_testUtils.screen.getByText('Header')).toBeInTheDocument();
            expect(_testUtils.screen.getByRole('button', {
              name: 'Cancel'
            })).toBeInTheDocument();
            expect(closeBtn).toBeInTheDocument(); // trigger click on closeBtn

            _userEvent["default"].click(closeBtn);

            expect(onHideMock).toHaveBeenCalled();

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('should rerender Modal', function () {
    var onHideMock = jest.fn();

    var _render = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
      show: false,
      onHide: onHideMock
    }, /*#__PURE__*/_react["default"].createElement(_.Modal.Body, null, "body"))),
        rerender = _render.rerender;

    expect(_testUtils.screen.queryByText('body')).not.toBeInTheDocument();
    rerender( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
      show: true,
      onHide: onHideMock
    }, /*#__PURE__*/_react["default"].createElement(_.Modal.Body, null, "body")));
    expect(_testUtils.screen.queryByText('body')).toBeInTheDocument();
  });
  it('should render Modal with close button in Header', function () {
    (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
      show: true,
      onHide: jest.fn()
    }, /*#__PURE__*/_react["default"].createElement(_.Modal.Header, null, "Header"), /*#__PURE__*/_react["default"].createElement(_.Modal.Body, null, "Body content")));
    expect(_testUtils.screen.queryByTestId('modal-header')).toContainElement(_testUtils.screen.queryByTestId('modal-close-icon'));
  });
  it('should render Modal without close button in Header', function () {
    (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
      show: true,
      onHide: jest.fn()
    }, /*#__PURE__*/_react["default"].createElement(_.Modal.Header, {
      closeButton: false
    }, "Header"), /*#__PURE__*/_react["default"].createElement(_.Modal.Body, null, "Body content")));
    expect(_testUtils.screen.queryByTestId('modal-close-icon')).not.toBeInTheDocument();
  });
  it('should render Modal with close button', function () {
    (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
      show: true,
      onHide: jest.fn()
    }, /*#__PURE__*/_react["default"].createElement(_.Modal.Close, null), /*#__PURE__*/_react["default"].createElement(_.Modal.Body, null, "Body content")));
    expect(_testUtils.screen.getByTestId('modal-close-icon')).toBeInTheDocument();
  });
  it('should render Modal without header', function () {
    (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
      show: true,
      onHide: jest.fn()
    }, /*#__PURE__*/_react["default"].createElement(_.Modal.Body, null, "Body content")));
    expect(_testUtils.screen.queryByTestId('modal-header')).not.toBeInTheDocument();
  });
  it('should render Modal without footer', function () {
    (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
      show: true,
      onHide: jest.fn()
    }, /*#__PURE__*/_react["default"].createElement(_.Modal.Header, null, "Header"), /*#__PURE__*/_react["default"].createElement(_.Modal.Body, null, "Body content")));
    expect(_testUtils.screen.queryByTestId('modal-footer')).not.toBeInTheDocument();
  });
  it('should use Title in Header', function () {
    (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
      show: true,
      onHide: jest.fn()
    }, /*#__PURE__*/_react["default"].createElement(_.Modal.Header, null, /*#__PURE__*/_react["default"].createElement(_.Modal.Title, null, "Modal Title"))));
    expect(_testUtils.screen.queryByTestId('modal-header')).toContainElement(_testUtils.screen.getByText('Modal Title'));
  });
  describe('Escape key', function () {
    it('should call the onHide prop when pushed', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var shouldShow, Component, _render2, rerender;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              shouldShow = true;

              Component = function Component() {
                return /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
                  show: shouldShow,
                  onHide: jest.fn(function () {
                    shouldShow = false;
                  })
                }, /*#__PURE__*/_react["default"].createElement(_.Modal.Body, null, "Body"));
              };

              _render2 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(Component, null)), rerender = _render2.rerender;
              expect(_testUtils.screen.getByTestId('modal-container')).toBeInTheDocument();

              _userEvent["default"].type(document.body, '{esc}');

              rerender( /*#__PURE__*/_react["default"].createElement(Component, null));
              _context2.next = 8;
              return (0, _testUtils.waitFor)(function () {
                expect(_testUtils.screen.queryByTestId('modal-container')).not.toBeInTheDocument();
              });

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
    it('should not call the onHide prop if the modal is not visible', function () {
      var onHideMock = jest.fn();
      (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
        show: false,
        onHide: onHideMock
      }, /*#__PURE__*/_react["default"].createElement(_.Modal.Body, null, "Body")));

      _userEvent["default"].type(document.body, 'esc');

      expect(onHideMock).not.toHaveBeenCalled();
    });
  });
  describe('Backdrop', function () {
    it('should call the onHide prop when backdrop is clicked', function () {
      var onHideMock = jest.fn();
      (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
        show: true,
        onHide: onHideMock
      }, /*#__PURE__*/_react["default"].createElement(_.Modal.Header, null, /*#__PURE__*/_react["default"].createElement(_.Modal.Title, null, "Modal Title"))));

      _userEvent["default"].click(_testUtils.screen.getByTestId('modal-backdrop'));

      expect(onHideMock).toHaveBeenCalledTimes(1);
    });
    it('should not call the onHide prop when the backdrop is clicked but the rootClose prop is false', function () {
      var onHideMock = jest.fn();
      (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
        show: true,
        onHide: onHideMock,
        rootClose: false
      }, /*#__PURE__*/_react["default"].createElement(_.Modal.Header, null, /*#__PURE__*/_react["default"].createElement(_.Modal.Title, null, "Modal Title"))));

      _userEvent["default"].click(_testUtils.screen.getByTestId('modal-backdrop'));

      expect(onHideMock).not.toHaveBeenCalled();
    });
  });
  describe('Modal sizes', function () {
    it('should display an extra small modal', function () {
      (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
        show: true,
        onHide: function onHide() {
          return undefined;
        },
        size: "xSmall"
      }, /*#__PURE__*/_react["default"].createElement(_.Modal.Header, null, /*#__PURE__*/_react["default"].createElement(_.Modal.Title, null, "Modal Title"))));

      var dialogContent = _testUtils.screen.getByTestId('modal-dialog-content');

      expect(dialogContent).toHaveStyle({
        width: '100%'
      });
    });
    it('should display a small modal', function () {
      (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
        show: true,
        onHide: function onHide() {
          return undefined;
        },
        size: "small"
      }, /*#__PURE__*/_react["default"].createElement(_.Modal.Header, null, /*#__PURE__*/_react["default"].createElement(_.Modal.Title, null, "Modal Title"))));

      var dialogContent = _testUtils.screen.getByTestId('modal-dialog-content');

      expect(dialogContent).toHaveStyle({
        width: '100%'
      });
    });
    it('should display a regular modal', function () {
      (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
        show: true,
        onHide: function onHide() {
          return undefined;
        },
        size: "regular"
      }, /*#__PURE__*/_react["default"].createElement(_.Modal.Header, null, /*#__PURE__*/_react["default"].createElement(_.Modal.Title, null, "Modal Title"))));

      var dialogContent = _testUtils.screen.getByTestId('modal-dialog-content');

      expect(dialogContent).toHaveStyle({
        width: '100%'
      });
    });
    it('should display a large modal', function () {
      (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
        show: true,
        onHide: function onHide() {
          return undefined;
        },
        size: "large"
      }, /*#__PURE__*/_react["default"].createElement(_.Modal.Header, null, /*#__PURE__*/_react["default"].createElement(_.Modal.Title, null, "Modal Title"))));

      var dialogContent = _testUtils.screen.getByTestId('modal-dialog-content');

      expect(dialogContent).toHaveStyle({
        width: '100%'
      });
    });
  });
  it('should close modal on backdrop click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    var shouldShow, Component, _render3, rerender;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            shouldShow = true;

            Component = function Component() {
              return /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
                show: shouldShow,
                onHide: jest.fn(function () {
                  shouldShow = false;
                })
              }, /*#__PURE__*/_react["default"].createElement(_.Modal.Body, null, "Body"));
            };

            _render3 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(Component, null)), rerender = _render3.rerender;
            expect(_testUtils.screen.queryByTestId('modal-container')).toBeInTheDocument();

            _userEvent["default"].click(_testUtils.screen.getByTestId('modal-backdrop'));

            rerender( /*#__PURE__*/_react["default"].createElement(Component, null)); // wait for animation till modal close

            _context3.next = 8;
            return (0, _testUtils.waitFor)(function () {
              expect(_testUtils.screen.queryByTestId('modal-container')).not.toBeInTheDocument();
            });

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('should not close modal on backdrop click', function () {
    var shouldShow = true;

    var Component = function Component() {
      return /*#__PURE__*/_react["default"].createElement(_.Modal.Dialog, {
        show: shouldShow,
        rootClose: false,
        onHide: jest.fn(function () {
          shouldShow = false;
        })
      }, /*#__PURE__*/_react["default"].createElement(_.Modal.Body, null, "Body"));
    };

    var _render4 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(Component, null)),
        rerender = _render4.rerender;

    expect(_testUtils.screen.getByTestId('modal-container')).toBeInTheDocument();

    _userEvent["default"].click(_testUtils.screen.getByTestId('modal-backdrop'));

    rerender( /*#__PURE__*/_react["default"].createElement(Component, null));
    expect(_testUtils.screen.getByTestId('modal-container')).toBeInTheDocument();
  });
});