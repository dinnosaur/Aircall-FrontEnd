"use strict";

var _react = _interopRequireDefault(require("react"));

var _testUtils = require("test-utils");

var _ = require("..");

var _dom = require("../../../tests/dom");

var domUtils = _interopRequireWildcard(require("../../../utils/dom"));

var _Box = require("../../Box");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

jest.mock('../../../utils/dom');
afterEach(_testUtils.cleanup);
/**
 * Note, the default window width is: "1024px" and height is "768px"
 */

describe('BoundaryAlignment', function () {
  describe('Placements', function () {
    var containerBoundingBox = (0, _dom.getBoundingBox)({
      top: 400,
      left: 400,
      width: 10,
      height: 10
    });
    var overlayBox = (0, _dom.getBoundingBox)({
      width: 200,
      height: 100
    });
    var cases = [
    /** Top */
    [{
      position: 'top',
      anchor: 'start'
    }, {
      top: containerBoundingBox.top - overlayBox.height,
      // 300px
      left: containerBoundingBox.left // 400px

    }], [{
      position: 'top',
      anchor: 'end'
    }, {
      top: containerBoundingBox.top - overlayBox.height,
      // 300px
      left: containerBoundingBox.right - overlayBox.width // 210px

    }], [{
      position: 'top',
      anchor: 'center'
    }, {
      top: containerBoundingBox.top - overlayBox.height,
      // 300px
      left: containerBoundingBox.left - overlayBox.width / 2 + containerBoundingBox.width / 2 // 305px

    }],
    /** Bottom */
    [{
      position: 'bottom',
      anchor: 'start'
    }, {
      top: containerBoundingBox.bottom,
      // 410px
      left: containerBoundingBox.left // 400px

    }], [{
      position: 'bottom',
      anchor: 'end'
    }, {
      top: containerBoundingBox.bottom,
      // 410px
      left: containerBoundingBox.right - overlayBox.width // 210px

    }], [{
      position: 'bottom',
      anchor: 'center'
    }, {
      top: containerBoundingBox.bottom,
      // 410px
      left: containerBoundingBox.left - overlayBox.width / 2 + containerBoundingBox.width / 2 // 305px

    }],
    /** Left */
    [{
      position: 'left',
      anchor: 'end'
    }, {
      top: containerBoundingBox.bottom - overlayBox.height,
      // 310px
      left: containerBoundingBox.left - overlayBox.width // 200px

    }], [{
      position: 'left',
      anchor: 'center'
    }, {
      top: containerBoundingBox.top - overlayBox.height / 2 + containerBoundingBox.height / 2,
      // 355px
      left: containerBoundingBox.left - overlayBox.width // 200px

    }], [{
      position: 'left',
      anchor: 'start'
    }, {
      top: containerBoundingBox.top,
      // 400px
      left: containerBoundingBox.left - overlayBox.width // 200px

    }],
    /** Right */
    [{
      position: 'right',
      anchor: 'end'
    }, {
      top: containerBoundingBox.bottom - overlayBox.height,
      // 310px
      left: containerBoundingBox.right // 410px

    }], [{
      position: 'right',
      anchor: 'center'
    }, {
      top: containerBoundingBox.top - overlayBox.height / 2 + containerBoundingBox.height / 2,
      // 355px
      left: containerBoundingBox.right // 410px

    }], [{
      position: 'right',
      anchor: 'start'
    }, {
      top: containerBoundingBox.top,
      // 400px
      left: containerBoundingBox.right // 410px

    }]];
    it.each(cases)('%o', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(placements, expected) {
        var _render, getByTestId;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
                _render = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.BoundaryAlignment, {
                  containerBoundingBox: containerBoundingBox,
                  position: placements.position,
                  anchor: placements.anchor
                }, /*#__PURE__*/_react["default"].createElement(_Box.Box, {
                  width: overlayBox.width,
                  height: overlayBox.height
                }, "Content"))), getByTestId = _render.getByTestId;
                expect(getByTestId('boundary-alignment')).toHaveStyle((0, _dom.toStyle)(expected));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());
  });
  describe('Overflow', function () {
    it('should overflow horitontally', function () {
      var containerBoundingBox = (0, _dom.getBoundingBox)({
        top: 700,
        // Window height is set to 764px
        left: 400,
        width: 10,
        height: 10
      });
      var overlayBox = (0, _dom.getBoundingBox)({
        width: 200,
        height: 100
      });
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
      var onComputePlacement = jest.fn();
      (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.BoundaryAlignment, {
        containerBoundingBox: containerBoundingBox,
        position: "bottom",
        anchor: "start",
        onComputePlacement: onComputePlacement
      }, /*#__PURE__*/_react["default"].createElement(_Box.Box, {
        width: overlayBox.width,
        height: overlayBox.height
      }, "Content")));
      expect(onComputePlacement).toHaveBeenCalledWith({
        position: 'top',
        anchor: 'start'
      });
    });
    it('should overflow vertically', function () {
      var containerBoundingBox = (0, _dom.getBoundingBox)({
        top: 600,
        left: 1000,
        // Window height is set to 1024px
        width: 10,
        height: 10
      });
      var overlayBox = (0, _dom.getBoundingBox)({
        width: 200,
        height: 100
      });
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
      var onComputePlacement = jest.fn();
      (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.BoundaryAlignment, {
        containerBoundingBox: containerBoundingBox,
        position: "right",
        anchor: "start",
        onComputePlacement: onComputePlacement
      }, /*#__PURE__*/_react["default"].createElement(_Box.Box, {
        width: overlayBox.width,
        height: overlayBox.height
      }, "Content")));
      expect(onComputePlacement).toHaveBeenCalledWith({
        position: 'left',
        anchor: 'start'
      });
    });
    it('should overflow horitontally and vertically', function () {
      var containerBoundingBox = (0, _dom.getBoundingBox)({
        top: 700,
        // Window height is set to 764px
        left: 1000,
        // Window height is set to 1024px
        width: 10,
        height: 10
      });
      var overlayBox = (0, _dom.getBoundingBox)({
        width: 200,
        height: 100
      });
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
      var onComputePlacement = jest.fn();
      (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.BoundaryAlignment, {
        containerBoundingBox: containerBoundingBox,
        position: "right",
        anchor: "start",
        onComputePlacement: onComputePlacement
      }, /*#__PURE__*/_react["default"].createElement(_Box.Box, {
        width: overlayBox.width,
        height: overlayBox.height
      }, "Content")));
      expect(onComputePlacement).toHaveBeenCalledWith({
        position: 'left',
        anchor: 'end'
      });
    });
  });
  describe('Offset', function () {
    it('should support top and left offsets', function () {
      var containerBoundingBox = (0, _dom.getBoundingBox)({
        top: 400,
        left: 400,
        width: 10,
        height: 10
      });
      var overlayBox = (0, _dom.getBoundingBox)({
        width: 200,
        height: 100
      });
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);

      var _render2 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.BoundaryAlignment, {
        containerBoundingBox: containerBoundingBox,
        offset: {
          top: 4,
          left: 8
        }
      }, /*#__PURE__*/_react["default"].createElement(_Box.Box, {
        width: overlayBox.width,
        height: overlayBox.height
      }, "Content"))),
          getByTestId = _render2.getByTestId;

      expect(getByTestId('boundary-alignment')).toHaveStyle((0, _dom.toStyle)({
        top: containerBoundingBox.bottom + 4,
        // 414px
        left: containerBoundingBox.left + 8 // 408px

      }));
    });
    it('should support top and left offsets when overflowing', function () {
      var containerBoundingBox = (0, _dom.getBoundingBox)({
        top: 700,
        // Window height is set to 764px
        left: 1000,
        // Window height is set to 1024px
        width: 10,
        height: 10
      });
      var overlayBox = (0, _dom.getBoundingBox)({
        width: 200,
        height: 100
      });
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);

      var _render3 = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.BoundaryAlignment, {
        position: "right",
        anchor: "start",
        containerBoundingBox: containerBoundingBox,
        offset: {
          top: 4,
          left: 8
        }
      }, /*#__PURE__*/_react["default"].createElement(_Box.Box, {
        width: overlayBox.width,
        height: overlayBox.height
      }, "Content"))),
          getByTestId = _render3.getByTestId;

      expect(getByTestId('boundary-alignment')).toHaveStyle((0, _dom.toStyle)({
        top: containerBoundingBox.bottom - overlayBox.height - 4,
        // 606px
        left: containerBoundingBox.left - overlayBox.width - 8 // 792px

      }));
    });
  });
});