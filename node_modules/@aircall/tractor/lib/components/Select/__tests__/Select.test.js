"use strict";

var _react = _interopRequireDefault(require("react"));

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _testUtils = require("test-utils");

var _ = require("..");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('Select', function () {
  var options = [{
    value: 'Week',
    label: 'Week'
  }, {
    value: 'Month',
    label: 'Month'
  }, {
    value: 'Day',
    label: 'Day'
  }, {
    value: 'Hour',
    label: 'Hour'
  }];
  describe('render', function () {
    it('render trigger and dropdown list', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var placeholder;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Select, {
                size: "small",
                name: "time",
                options: options,
                placeholder: "Select time"
              }));
              placeholder = _testUtils.screen.getByText('Select time');
              expect(placeholder).toBeInTheDocument();

              _userEvent["default"].click(placeholder); // open the dropdown


              _context.t0 = expect;
              _context.next = 7;
              return _testUtils.screen.findByTestId('select-dropdown-container');

            case 7:
              _context.t1 = _context.sent;
              (0, _context.t0)(_context.t1).toBeInTheDocument();

              // select option
              _userEvent["default"].click(_testUtils.screen.getByText('Week')); // close the dropdown


              expect(_testUtils.screen.queryByTestId('select-dropdown-container')).not.toBeInTheDocument(); // render selected value in Trigger

              expect(_testUtils.screen.getByTestId('select-trigger-container')).toHaveTextContent('Week');

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    it('render grey trigger when disabled', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var triggerContainer;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Select, {
                size: "small",
                name: "time",
                options: options,
                placeholder: "Select time",
                disabled: true
              }));
              triggerContainer = _testUtils.screen.getByTestId('select-trigger-container');
              expect(triggerContainer).toHaveStyle({
                'background-color': '#e8e8e6',
                'pointer-events': 'none'
              });

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
    it('keep dropdown open when clicking on option', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var placeholder;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("button", null, "Close the dropdown"), /*#__PURE__*/_react["default"].createElement(_.Select, {
                name: "time",
                options: options,
                placeholder: "Select time",
                mode: "multiple"
              })));
              placeholder = _testUtils.screen.getByText('Select time');
              expect(placeholder).toBeInTheDocument();

              _userEvent["default"].click(placeholder); // open the dropdown


              _context3.t0 = expect;
              _context3.next = 7;
              return _testUtils.screen.findByTestId('select-dropdown-container');

            case 7:
              _context3.t1 = _context3.sent;
              (0, _context3.t0)(_context3.t1).toBeInTheDocument();

              // select option
              _userEvent["default"].click(_testUtils.screen.getByText('Week'));

              _userEvent["default"].click(_testUtils.screen.getByText('Month')); // keep the dropdown open


              expect(_testUtils.screen.getByTestId('select-dropdown-container')).toBeInTheDocument(); // render selected options in Trigger

              expect(_testUtils.screen.getByTestId('select-trigger-container')).toHaveTextContent('Week,Month');

              _userEvent["default"].click(_testUtils.screen.getByText('Close the dropdown'));

              expect(_testUtils.screen.queryByTestId('select-dropdown-container')).not.toBeInTheDocument();

            case 15:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    it('render items of fexible shape', function () {
      var users = [{
        id: 1,
        firstname: 'John',
        lastname: 'Doe'
      }, {
        id: 2,
        firstname: 'Jane',
        lastname: 'Doe'
      }];

      var getOptionLabel = function getOptionLabel(_ref4) {
        var firstname = _ref4.firstname,
            lastname = _ref4.lastname;
        return firstname + " " + lastname;
      };

      var getOptionValue = function getOptionValue(_ref5) {
        var id = _ref5.id;
        return "" + id;
      };

      (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Select, {
        "data-test": "user-select",
        name: "user",
        options: users,
        placeholder: "Select user",
        getOptionLabel: getOptionLabel,
        getOptionValue: getOptionValue,
        mode: "multiple"
      }));

      var select = _testUtils.screen.getByTestId('user-select');

      expect(select).toBeInTheDocument(); // open dropdown

      _userEvent["default"].click(select);

      var firstOption = _testUtils.screen.getAllByTestId('select-option-item')[0];

      expect(firstOption).toBeInTheDocument();
      expect(firstOption).toHaveAttribute('data-selected', 'false');

      _userEvent["default"].click(firstOption);

      expect(firstOption).toHaveAttribute('data-selected', 'true');
    });
  });
  describe('Controlled Select', function () {
    it('call onChange when selecting an option', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var mockOnChange, trigger;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              mockOnChange = jest.fn();
              (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Select, {
                size: "small",
                name: "time",
                options: options,
                placeholder: "Select time",
                onChange: mockOnChange,
                value: options[0]
              })); // render selected value in Trigger

              trigger = _testUtils.screen.getByTestId('select-trigger-container');
              expect(trigger).toHaveTextContent('Week');

              _userEvent["default"].click(trigger); // open the dropdown


              _context4.t0 = expect;
              _context4.next = 8;
              return _testUtils.screen.findByTestId('select-dropdown-container');

            case 8:
              _context4.t1 = _context4.sent;
              (0, _context4.t0)(_context4.t1).toBeInTheDocument();

              // select other option
              _userEvent["default"].click(_testUtils.screen.getByText('Day')); // close the dropdown


              expect(mockOnChange).toBeCalledWith(options[2]);

            case 12:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
    it('call onChange when selecting multiple option', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      var mockOnChange, _render, rerender, trigger;

      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              mockOnChange = jest.fn();
              _render = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Select, {
                size: "small",
                name: "time",
                options: options,
                placeholder: "Select time",
                onChange: mockOnChange,
                mode: "multiple",
                value: []
              })), rerender = _render.rerender; // render selected value in Trigger

              trigger = _testUtils.screen.getByTestId('select-trigger-container');

              _userEvent["default"].click(trigger); // open the dropdown


              _context5.t0 = expect;
              _context5.next = 7;
              return _testUtils.screen.findByTestId('select-dropdown-container');

            case 7:
              _context5.t1 = _context5.sent;
              (0, _context5.t0)(_context5.t1).toBeInTheDocument();

              // select  options
              _userEvent["default"].click(_testUtils.screen.getByText('Week'));

              expect(mockOnChange).toHaveBeenCalledWith([options[0]]);
              rerender( /*#__PURE__*/_react["default"].createElement(_.Select, {
                size: "small",
                name: "time",
                options: options,
                placeholder: "Select time",
                onChange: mockOnChange,
                mode: "multiple",
                value: options[0]
              }));

              _userEvent["default"].click(_testUtils.screen.getByText('Day'));

              expect(mockOnChange).toHaveBeenCalledWith([options[0], options[2]]);

            case 14:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
  });
  describe('Searchable Select', function () {
    it('trigger onSearch handler when typing in the select input', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      var mockOnSearch, placeholder, searchInput;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              mockOnSearch = jest.fn();
              (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_.Select, {
                size: "small",
                name: "time",
                options: options,
                placeholder: "Select time",
                searchable: true,
                onSearch: mockOnSearch
              }));
              placeholder = _testUtils.screen.getByText('Select time');
              expect(placeholder).toBeInTheDocument();

              _userEvent["default"].click(placeholder); // open the dropdown


              _context6.t0 = expect;
              _context6.next = 8;
              return _testUtils.screen.findByTestId('select-dropdown-container');

            case 8:
              _context6.t1 = _context6.sent;
              (0, _context6.t0)(_context6.t1).toBeInTheDocument();
              searchInput = _testUtils.screen.getByTestId('select-search-input');
              expect(searchInput).toBeInTheDocument();

              _userEvent["default"].type(searchInput, 'query');

              expect(mockOnSearch).toBeCalledWith('query');

            case 14:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
  });
  describe('utils', function () {
    describe('optionValue', function () {
      var option = {
        value: 1,
        label: 'first'
      };
      it('should get value from option by default', function () {
        expect((0, _utils.optionValue)(option)).toEqual(option.value);
      });
      it('should get value from getOptionValue if passed', function () {
        var getOptionValue = function getOptionValue(_ref9) {
          var label = _ref9.label,
              value = _ref9.value;
          return label + "_" + value;
        };

        expect((0, _utils.optionValue)(option, getOptionValue)).toEqual('first_1');
      });
    });
  });
});