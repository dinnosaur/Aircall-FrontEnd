"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValueContainer = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Typography = require("../../Typography");

var _utils = require("../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// show selected value, could be single value or multiple values
var ValueContainer = function ValueContainer(_ref) {
  var value = _ref.value,
      getOptionLabel = _ref.getOptionLabel;
  var selectedValueLabel = (0, _react.useMemo)(function () {
    return Array.isArray(value) ? value.map(function (item) {
      return (0, _utils.optionLabel)(item, getOptionLabel);
    }).join(',') : value && (0, _utils.optionLabel)(value, getOptionLabel);
  }, [getOptionLabel, value]);
  return /*#__PURE__*/_react["default"].createElement(_Typography.Typography, {
    "data-test": "select-value-container",
    variant: "body2",
    ellipsis: true
  }, selectedValueLabel);
};

exports.ValueContainer = ValueContainer;