"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectMenu = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ = require("../..");

var _utils = require("../utils");

var _OptionItem = require("./OptionItem");

var _styled = require("./styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var SelectMenu = function SelectMenu(_ref) {
  var options = _ref.options,
      size = _ref.size,
      selectedValue = _ref.selectedValue,
      getOptionValue = _ref.getOptionValue,
      getOptionLabel = _ref.getOptionLabel,
      isMulti = _ref.isMulti,
      onSelect = _ref.onSelect,
      OptionComponent = _ref.optionComponent;
  var renderOption = (0, _react.useCallback)(function (item) {
    var isSelected = (0, _utils.isItemSelected)(item, selectedValue, getOptionValue);
    return /*#__PURE__*/_react["default"].createElement(_OptionItem.OptionItem, {
      key: "option_item_" + (0, _utils.optionValue)(item, getOptionValue),
      size: size,
      isMulti: isMulti,
      option: item,
      isSelected: isSelected,
      onSelect: onSelect,
      optionComponent: OptionComponent,
      getOptionValue: getOptionValue,
      getOptionLabel: getOptionLabel
    });
  }, [OptionComponent, getOptionLabel, getOptionValue, isMulti, onSelect, selectedValue, size]);
  var menuElement = (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, options.map(function (element, idx) {
      if ((0, _utils.isGroupType)(element)) {
        var groupLabel = element.label;
        var groupOptions = element.options;
        return /*#__PURE__*/_react["default"].createElement("div", {
          key: "group_" + idx + "_" + groupLabel
        }, groupLabel ? /*#__PURE__*/_react["default"].createElement(_styled.SelectGroupLabel, {
          size: size
        }, /*#__PURE__*/_react["default"].createElement(_.Typography, {
          variant: "overline2",
          color: "text.dark",
          px: "s"
        }, groupLabel)) : idx !== 0 && /*#__PURE__*/_react["default"].createElement(_.Divider, {
          orientation: "horizontal",
          size: "xSmall",
          color: "grey.base"
        }), groupOptions.map(function (item) {
          return renderOption(item);
        }));
      } else {
        return renderOption(element);
      }
    }));
  }, [options, renderOption, size]);
  return menuElement;
};

exports.SelectMenu = SelectMenu;