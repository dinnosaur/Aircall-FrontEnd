"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Select = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ = require("..");

var _hooks = require("../../hooks");

var _useForm2 = require("../../hooks/useForm");

var _BoundaryAlignment = require("../BoundaryAlignment");

var _utils = require("../Dropdown/utils");

var _Typography = require("../Typography");

var _Loading = require("./components/Loading");

var _SelectInput = require("./components/SelectInput");

var _SelectMenu = require("./components/SelectMenu");

var _styled = require("./components/styled");

var _ValueContainer = require("./components/ValueContainer");

var _utils2 = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function initSelectedValue(value, isMulti) {
  if (isMulti === void 0) {
    isMulti = false;
  }

  if (!value) return isMulti ? [] : null;

  if (isMulti) {
    var multiValues = Array.isArray(value) ? value : [value];
    return multiValues;
  }

  var singleValue = Array.isArray(value) ? value.length > 0 ? value[0] : null : value;
  return singleValue;
}

var Select = function Select(_ref) {
  var options = _ref.options,
      placeholder = _ref.placeholder,
      getOptionLabel = _ref.getOptionLabel,
      getOptionValue = _ref.getOptionValue,
      size = _ref.size,
      value = _ref.value,
      onChange = _ref.onChange,
      onSearch = _ref.onSearch,
      mode = _ref.mode,
      _ref$components = _ref.components,
      components = _ref$components === void 0 ? {} : _ref$components,
      _ref$searchable = _ref.searchable,
      searchable = _ref$searchable === void 0 ? false : _ref$searchable,
      _ref$loading = _ref.loading,
      loading = _ref$loading === void 0 ? false : _ref$loading,
      _ref$noOptionsLabel = _ref.noOptionsLabel,
      noOptionsLabel = _ref$noOptionsLabel === void 0 ? 'No options' : _ref$noOptionsLabel,
      _ref$menuIsOpen = _ref.menuIsOpen,
      menuIsOpen = _ref$menuIsOpen === void 0 ? false : _ref$menuIsOpen,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? '100%' : _ref$width,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? 'bottom' : _ref$position,
      _ref$anchor = _ref.anchor,
      anchor = _ref$anchor === void 0 ? 'start' : _ref$anchor,
      _ref$boundaryElement = _ref.boundaryElement,
      boundaryElement = _ref$boundaryElement === void 0 ? window : _ref$boundaryElement,
      _ref$loadingText = _ref.loadingText,
      loadingText = _ref$loadingText === void 0 ? 'Loading results' : _ref$loadingText,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$dataTest = _ref['data-test'],
      dataTest = _ref$dataTest === void 0 ? 'select-trigger-container' : _ref$dataTest,
      validationStatus = _ref.validationStatus;
  var isMulti = mode === 'multiple';

  var _useState = (0, _react.useState)(initSelectedValue(value, isMulti)),
      selectedValue = _useState[0],
      setSelectedValue = _useState[1];

  var _useState2 = (0, _react.useState)(''),
      searchText = _useState2[0],
      setSearchText = _useState2[1];

  var _useState3 = (0, _react.useState)(position),
      internalPosition = _useState3[0],
      setInternalPosition = _useState3[1];

  var _useForm = (0, _useForm2.useForm)({
    size: size,
    validationStatus: validationStatus
  }),
      componentSize = _useForm.componentSize,
      componentStatus = _useForm.componentStatus;

  (0, _react.useEffect)(function () {
    setSelectedValue(initSelectedValue(value, isMulti));
  }, [value, isMulti]);
  var Trigger = components.Trigger,
      OptionComponent = components.Option;
  var triggerComponent = (0, _react.useMemo)(function () {
    return Trigger ? /*#__PURE__*/_react["default"].createElement(Trigger, {
      value: selectedValue,
      disabled: disabled,
      "data-test": dataTest
    }) : /*#__PURE__*/_react["default"].createElement(_styled.TriggerContainer, {
      triggerSize: componentSize,
      validationStatus: componentStatus,
      "data-test": dataTest,
      width: width,
      disabled: disabled
    }, !selectedValue || Array.isArray(selectedValue) && selectedValue.length === 0 ? /*#__PURE__*/_react["default"].createElement(_Typography.Typography, {
      color: "text.dark"
    }, placeholder) : /*#__PURE__*/_react["default"].createElement(_ValueContainer.ValueContainer, {
      value: selectedValue,
      getOptionLabel: getOptionLabel
    }));
  }, [Trigger, selectedValue, componentSize, componentStatus, width, placeholder, getOptionLabel, disabled, dataTest]);

  var _useTrigger = (0, _hooks.useTrigger)(triggerComponent, {
    trigger: 'click',
    closeOnInsideClick: false,
    visible: menuIsOpen
  }),
      trigger = _useTrigger[0],
      _useTrigger$ = _useTrigger[1],
      isVisible = _useTrigger$.isVisible,
      containerBoundingBox = _useTrigger$.containerBoundingBox,
      portal = _useTrigger$.portal,
      close = _useTrigger$.close;

  var updateSelectedValue = (0, _react.useCallback)(function (option) {
    !isMulti && close();
    var updatedValue;

    if (isMulti && Array.isArray(selectedValue)) {
      var foundIdx = selectedValue.findIndex(function (selectedOption) {
        return (0, _utils2.optionValue)(selectedOption, getOptionValue) === (0, _utils2.optionValue)(option, getOptionValue);
      });
      updatedValue = foundIdx > -1 ? [].concat(selectedValue.slice(0, foundIdx), selectedValue.slice(foundIdx + 1)) : [].concat(selectedValue, [option]);
    } else {
      updatedValue = option;
    } // as uncontrolled component, call setSeletedValue


    value === undefined && setSelectedValue(updatedValue);
    onChange && onChange(updatedValue);
  }, [close, getOptionValue, isMulti, onChange, selectedValue, value]);
  var offset = (0, _react.useMemo)(function () {
    return (0, _utils.getOffset)(position);
  }, [position]);
  var maxHeight = (0, _react.useMemo)(function () {
    return (0, _utils2.calculateDropdownMaxHeight)({
      boundaryElement: boundaryElement,
      containerBoundingBox: containerBoundingBox,
      position: internalPosition,
      offset: offset
    });
  }, [boundaryElement, containerBoundingBox, internalPosition, offset]);
  var onSearchInputChange = (0, _react.useCallback)(function (value) {
    setSearchText(value);
    onSearch == null ? void 0 : onSearch(value);
  }, [onSearch]);
  var handleComputePlacement = (0, _react.useCallback)(function (placements) {
    setInternalPosition(placements.position);
  }, []);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, trigger, isVisible && portal( /*#__PURE__*/_react["default"].createElement(_BoundaryAlignment.BoundaryAlignment, {
    containerBoundingBox: containerBoundingBox,
    boundaryElement: boundaryElement,
    onComputePlacement: handleComputePlacement,
    position: position,
    offset: offset,
    anchor: anchor
  }, /*#__PURE__*/_react["default"].createElement(_.MotionBox, {
    initial: {
      opacity: 0
    },
    animate: {
      opacity: 1
    },
    exit: {
      opacity: 0
    }
  }, /*#__PURE__*/_react["default"].createElement(_styled.DropdownContainer, {
    width: containerBoundingBox.width,
    maxHeight: maxHeight,
    "data-test": "select-dropdown-container"
  }, /*#__PURE__*/_react["default"].createElement(_.Box, {
    py: "xs",
    overflow: "auto"
  }, loading ? /*#__PURE__*/_react["default"].createElement(_Loading.Loading, {
    loadingText: loadingText,
    size: componentSize
  }) : options.length === 0 ? /*#__PURE__*/_react["default"].createElement(_Typography.Typography, {
    pl: "s",
    variant: "body2",
    py: "xxs"
  }, noOptionsLabel) : /*#__PURE__*/_react["default"].createElement(_SelectMenu.SelectMenu, {
    options: options,
    size: componentSize,
    isMulti: isMulti,
    onSelect: updateSelectedValue,
    getOptionValue: getOptionValue,
    getOptionLabel: getOptionLabel,
    optionComponent: OptionComponent,
    selectedValue: selectedValue
  })), searchable && /*#__PURE__*/_react["default"].createElement(_.Box, {
    order: internalPosition === 'bottom' ? -1 : 1
  }, /*#__PURE__*/_react["default"].createElement(_SelectInput.SearchInput, {
    dropdownPosition: internalPosition,
    onChange: onSearchInputChange,
    value: searchText,
    size: componentSize
  })))))));
};

exports.Select = Select;