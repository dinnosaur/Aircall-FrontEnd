"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shouldForwardProp = exports.makeAvatarSize = exports.makeAvatarIconSize = exports.makeAvatarColor = exports.ICON_SIZES = void 0;

var _styledComponents = require("styled-components");

var _Avatar = require("./Avatar.decl");

var _ICON_SIZES;

var makeAvatarSize = function makeAvatarSize(_ref) {
  var avatarSize = _ref.avatarSize,
      theme = _ref.theme;
  return theme.avatar.sizes[avatarSize];
};

exports.makeAvatarSize = makeAvatarSize;
var ICON_SIZES = (_ICON_SIZES = {}, _ICON_SIZES[_Avatar.AvatarSize.X_SMALL] = '8px', _ICON_SIZES[_Avatar.AvatarSize.SMALL] = '16px', _ICON_SIZES[_Avatar.AvatarSize.MEDIUM] = '16px', _ICON_SIZES[_Avatar.AvatarSize.LARGE] = '24px', _ICON_SIZES[_Avatar.AvatarSize.X_LARGE] = '32px', _ICON_SIZES);
exports.ICON_SIZES = ICON_SIZES;

var makeAvatarIconSize = function makeAvatarIconSize(_ref2) {
  var avatarSize = _ref2.avatarSize,
      borderless = _ref2.borderless,
      hasImage = _ref2.hasImage,
      clickable = _ref2.clickable,
      theme = _ref2.theme;
  var noBorder = hasImage || borderless;

  if (noBorder) {
    var _theme$avatar$sizes$a = theme.avatar.sizes[avatarSize],
        width = _theme$avatar$sizes$a.width,
        height = _theme$avatar$sizes$a.height;
    return (0, _styledComponents.css)(["svg{width:", ";height:", ";}", ""], width, height, clickable && "\n        &:hover,\n        &:focus {\n          svg {\n            width: calc(" + width + " - 2px);\n            height: calc(" + height + " - 2px);\n          }\n        }\n\n        &:active {\n          svg {\n            width: calc(" + width + " - 4px);\n            height: calc(" + height + " - 4px);\n          }\n        }\n      ");
  }

  var iconSize = ICON_SIZES[avatarSize];
  return {
    svg: {
      width: iconSize,
      height: iconSize
    }
  };
};

exports.makeAvatarIconSize = makeAvatarIconSize;

var makeAvatarColor = function makeAvatarColor(_ref3) {
  var bg = _ref3.bg,
      backgroundColor = _ref3.backgroundColor,
      color = _ref3.color,
      variant = _ref3.variant,
      disabled = _ref3.disabled,
      hasImage = _ref3.hasImage,
      borderless = _ref3.borderless,
      clickable = _ref3.clickable,
      theme = _ref3.theme;
  var hasCustomColor = !!(bg || backgroundColor || color);

  if (!!variant || hasCustomColor) {
    return (0, _styledComponents.css)(["opacity:", ";"], disabled ? '65%' : '100%');
  }

  var noBorder = hasImage || borderless;

  if (disabled) {
    return (0, _styledComponents.css)(["background-color:", ";color:", ";", ";svg{fill:", ";}"], theme.colors.grey.base, theme.colors.grey.base, noBorder && "opacity: 0.5;", theme.colors.grey.base);
  }

  return (0, _styledComponents.css)(["", " color:", ";svg{fill:", ";}", ""], !noBorder && "background-color: " + theme.colors.grey.dark + ";", theme.colors.grey.dark, theme.colors.grey.dark, clickable && "\n      cursor: pointer;\n\n      &:hover,\n      &:focus {\n        background-color: " + theme.colors.base.black + ";\n        color: " + theme.colors.grey.darker + ";\n\n        svg {\n          fill: " + theme.colors.grey.darker + ";\n        }\n      }\n\n      &:active:after {\n        top: 2px;\n        left: 2px;\n        right: 2px;\n        bottom: 2px;\n      }\n\n      &:active {\n        background-color: " + theme.colors.base.black + ";\n        color: " + theme.colors.grey.dark + ";\n        svg {\n          fill: " + theme.colors.grey.dark + ";\n        }\n      }\n    ");
}; // Props that should not be forwarded to the HTML DOM elements


exports.makeAvatarColor = makeAvatarColor;

var shouldForwardProp = function shouldForwardProp(prop) {
  return !['variant', 'mode', 'size', 'disabled', 'bg', 'color', 'borderless', 'clickable', 'hasImage'].includes(prop);
};

exports.shouldForwardProp = shouldForwardProp;