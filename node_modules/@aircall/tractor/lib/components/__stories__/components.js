"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IOCContainer = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Button = require("../Button");

var _Spacer = require("../Spacer");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var IOCContainer = function IOCContainer(_ref) {
  var _ref$idleValue = _ref.idleValue,
      idleValue = _ref$idleValue === void 0 ? false : _ref$idleValue,
      _ref$activeValue = _ref.activeValue,
      activeValue = _ref$activeValue === void 0 ? true : _ref$activeValue,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? 'External Toggle' : _ref$label,
      children = _ref.children;

  var _useState = (0, _react.useState)(idleValue),
      value = _useState[0],
      setValue = _useState[1];

  var handleChange = (0, _react.useCallback)(function (state) {
    setValue(state);
  }, []);
  return /*#__PURE__*/_react["default"].createElement(_Spacer.Spacer, {
    direction: "vertical",
    space: _Spacer.SpaceVariant.L
  }, /*#__PURE__*/_react["default"].createElement(_Button.Button, {
    onClick: function onClick() {
      return setValue(value === idleValue ? activeValue : idleValue);
    }
  }, label), children(value, handleChange));
};

exports.IOCContainer = IOCContainer;