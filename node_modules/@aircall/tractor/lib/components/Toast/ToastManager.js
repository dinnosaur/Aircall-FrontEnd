"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToastManager = void 0;

var _react = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _reactDom = require("react-dom");

var _usePubSub = require("../../hooks/usePubSub");

var _pubsub = require("./pubsub");

var _ToastContext = require("./ToastContext");

var _ToastList = require("./ToastList");

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var ToastManager = function ToastManager(_ref) {
  var children = _ref.children,
      _ref$container = _ref.container,
      container = _ref$container === void 0 ? document.body : _ref$container,
      _ref$takeContainerWid = _ref.takeContainerWidth,
      takeContainerWidth = _ref$takeContainerWid === void 0 ? false : _ref$takeContainerWid,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? 'fixed' : _ref$position;

  var _useState = (0, _react.useState)([]),
      toasts = _useState[0],
      setToasts = _useState[1];

  var removeToast = (0, _react.useCallback)(function (id) {
    return setToasts(function (prevToasts) {
      return prevToasts.filter(function (t) {
        return t.id !== id;
      });
    });
  }, []);
  var showToast = (0, _react.useCallback)(function (t) {
    var toast = _extends({
      dismissIn: 0,
      id: (0, _lodash.uniqueId)()
    }, t);

    var cleanup = function cleanup() {
      return removeToast(toast.id);
    };

    setToasts(function (prevToasts) {
      // Don't re-add a pre-existing toast to the list.
      if (prevToasts.some(function (_ref2) {
        var id = _ref2.id;
        return id === toast.id;
      })) {
        return prevToasts;
      }

      return [].concat(prevToasts, [toast]);
    }); // Only dismiss the toast if `dismissIn` is defined and greater than zero.

    if ((0, _utils.isDismissable)(toast.dismissIn)) {
      var timeoutIdx = window.setTimeout(function () {
        cleanup();
        window.clearTimeout(timeoutIdx);
      }, toast.dismissIn);
    } // Return the cleanup function which basically
    // let you remove or dismiss the toast manually


    return cleanup;
  }, [removeToast]); // Handle events that are coming from outside the React Tree.

  (0, _usePubSub.usePubSub)(_pubsub.TOPICS.SHOW_TOAST, showToast);
  (0, _usePubSub.usePubSub)(_pubsub.TOPICS.REMOVE_TOAST, removeToast);
  var containerNode = typeof container === 'function' ? container() : container;
  return /*#__PURE__*/_react["default"].createElement(_ToastContext.ToastConfigContext.Provider, {
    value: {
      takeContainerWidth: takeContainerWidth,
      position: position
    }
  }, /*#__PURE__*/_react["default"].createElement(_ToastContext.ToastContext.Provider, {
    value: {
      toasts: toasts,
      showToast: showToast,
      removeToast: removeToast
    }
  }, /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, children, containerNode && /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/_react["default"].createElement(_ToastList.ToastList, null), containerNode))));
};

exports.ToastManager = ToastManager;