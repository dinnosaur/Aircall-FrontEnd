"use strict";

var _react = _interopRequireDefault(require("react"));

var _testUtils = require("../../../tests/test-utils");

var _Icon = require("../../Icon");

var ToastContext = _interopRequireWildcard(require("../ToastContext"));

var _ToastList = require("../ToastList");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

jest.mock('../ToastContext');
describe('TaostList', function () {
  var toasts = [{
    icon: /*#__PURE__*/_react["default"].createElement("h1", null, "icon"),
    variant: 'instructive',
    message: 'message',
    id: '1',
    dismissIn: 3000
  }, {
    icon: /*#__PURE__*/_react["default"].createElement(_Icon.InformationOutlined, {
      color: "base.white",
      size: 22
    }),
    variant: 'primary',
    message: 'message 1',
    id: '2',
    dismissIn: 3000
  }];
  beforeEach(function () {
    jest.spyOn(ToastContext, 'useToast').mockReturnValue({
      showToast: jest.fn(),
      removeToast: jest.fn(),
      toasts: toasts
    });
    jest.spyOn(ToastContext, 'useToastConfig').mockReturnValue({
      takeContainerWidth: false,
      position: 'fixed'
    });
  });
  it('should render list of toasts', function () {
    var _render = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_ToastList.ToastList, null), {
      // do not use Tractor as a wrapper as it renders the ToastManager
      // which makes the toast list render twice.
      wrapper: function wrapper(_ref) {
        var children = _ref.children;
        return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, children);
      }
    }),
        getAllByTestId = _render.getAllByTestId;

    expect(getAllByTestId('toast-instructive')).toHaveLength(1);
    expect(getAllByTestId('toast-primary')).toHaveLength(1);
  });
});