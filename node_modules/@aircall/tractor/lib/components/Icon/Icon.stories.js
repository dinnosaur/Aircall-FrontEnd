"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.outlined = exports.flags = exports.filled = exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactCopyToClipboard = _interopRequireDefault(require("react-copy-to-clipboard"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var Flags = _interopRequireWildcard(require("../Flag/components"));

var _Spacer = require("../Spacer");

var _TextFieldInput = require("../TextFieldInput");

var _Typography = require("../Typography");

var FilledIcons = _interopRequireWildcard(require("./components/Filled"));

var OutlinedIcons = _interopRequireWildcard(require("./components/Outlined"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = {
  title: 'Icons'
};
exports["default"] = _default;

var IconsWrapper = _styledComponents["default"].div.withConfig({
  displayName: "Iconstories__IconsWrapper",
  componentId: "sc-1833mhx-0"
})(["width:100%;display:grid;grid-template-columns:repeat(5,minmax(0,1fr));justify-items:center;"]);

var IconWrapper = (0, _styledComponents["default"])(_Spacer.Spacer).withConfig({
  displayName: "Iconstories__IconWrapper",
  componentId: "sc-1833mhx-1"
})(["box-sizing:border-box;padding:32px 16px;width:100%;height:128px;border-radius:8px;&,svg{transition:background 200ms,transform 200ms;}&:hover{cursor:pointer;background-color:", ";color:", ";svg{transform:scale(1.2);}}"], function (_ref) {
  var theme = _ref.theme;
  return theme.colors.primary.base;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.colors.base.white;
});

var IconContainer = function IconContainer(_ref3) {
  var Component = _ref3.component,
      icon = _ref3.icon;

  var _useState = (0, _react.useState)(false),
      copied = _useState[0],
      setCopied = _useState[1];

  var onCopy = function onCopy(text, result) {
    if (result) {
      setCopied(true);
    }
  };

  (0, _react.useEffect)(function () {
    if (!copied) {
      return;
    }

    var timeoutIdx = setTimeout(function () {
      setCopied(false);
    }, 1500);
    return function () {
      clearTimeout(timeoutIdx);
    };
  }, [copied]);
  return /*#__PURE__*/_react["default"].createElement(_reactCopyToClipboard["default"], {
    text: "<" + icon + " />",
    onCopy: onCopy
  }, /*#__PURE__*/_react["default"].createElement(IconWrapper, {
    space: "s",
    direction: "vertical",
    alignItems: "center",
    justifyContent: "center"
  }, /*#__PURE__*/_react["default"].createElement(Component, {
    width: 32,
    height: 32
  }), /*#__PURE__*/_react["default"].createElement(_Typography.Typography, null, copied ? 'Copied ðŸ¥³' : icon)));
}; // Our icons lists are pretty big.
// Helper component to filter through them when looking for something specific.


var FilterableList = function FilterableList(_ref4) {
  var importToFiler = _ref4.importToFiler;

  var _useState2 = (0, _react.useState)(''),
      searchVal = _useState2[0],
      setSearchVal = _useState2[1];

  return /*#__PURE__*/_react["default"].createElement(_Spacer.Spacer, {
    width: "100%",
    direction: "vertical",
    space: "s"
  }, /*#__PURE__*/_react["default"].createElement(_TextFieldInput.TextFieldInput, {
    placeholder: "Type to filter...",
    onChange: function onChange(e) {
      return setSearchVal(e.target.value);
    }
  }), /*#__PURE__*/_react["default"].createElement(IconsWrapper, null, Object.keys(importToFiler).filter(function (key) {
    return key.toLowerCase().includes(searchVal.toLowerCase());
  }).map(function (icon) {
    var IconSVG = importToFiler[icon];
    return /*#__PURE__*/_react["default"].createElement(IconContainer, {
      key: icon,
      component: IconSVG,
      icon: icon
    });
  })));
};

var outlined = function outlined() {
  return /*#__PURE__*/_react["default"].createElement(FilterableList, {
    importToFiler: OutlinedIcons
  });
};

exports.outlined = outlined;

var filled = function filled() {
  return /*#__PURE__*/_react["default"].createElement(FilterableList, {
    importToFiler: FilledIcons
  });
};

exports.filled = filled;

var flags = function flags() {
  return /*#__PURE__*/_react["default"].createElement(FilterableList, {
    importToFiler: Flags
  });
};

exports.flags = flags;