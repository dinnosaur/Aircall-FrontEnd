"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function SvgMtq(props) {
  return /*#__PURE__*/React.createElement("svg", _extends({
    width: "24px",
    height: "24px",
    viewBox: "0 0 32 32",
    fill: "none"
  }, props), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M25.69 1.263c4.448 1.728 5.477 6.646 5.477 6.646.664 2.758.863 5.582.83 8.107.033 2.493-.2 5.317-.864 8.108 0 0-1.028 4.918-5.476 6.646-2.09.83-5.907 1.196-9.657 1.23-3.75-.034-7.567-.432-9.658-1.23C1.895 29.042.866 24.124.866 24.124c-.697-2.79-.896-5.615-.863-8.14-.033-2.493.2-5.317.863-8.109 0 0 1.03-4.918 5.476-6.646C8.433.432 12.25.033 16 0c3.75.033 7.567.432 9.69 1.263z",
    fill: "#227FBB"
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M17.333.027v31.947A62.28 62.28 0 0116 32c-.445-.004-.89-.013-1.334-.027V.027C15.11.013 15.556.004 16 0c.444.004.89.013 1.333.027z",
    fill: "#fff"
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M.01 14.667h31.981c.01.457.011.908.006 1.35.005.43.003.869-.008 1.316H.01c-.01-.458-.011-.908-.006-1.35-.005-.43-.003-.869.008-1.316zm21.786-9.693c-1.075.02-.873-1.048-.362-1.517l.052-.046c.337-.298.802-.708 1.422-.686.29-.006.825.09 1.188.154.153.028.276.05.336.056.24-.009.406-.071.561-.13.171-.064.33-.124.562-.102.37.043.785.203.858.648.097.42.106.936.041 1.446-.08.5-.568.984-.918 1.21-.127.078-.114.34-.103.565.005.095.01.183.003.25-.036.37-.115.697-.227 1.051a2.46 2.46 0 01-.226.468c-.134.234-.263.461-.246.708.009.08.013.168.017.257.01.196.019.398.08.548.664-.583 2.322-.94 3.39-.94 1.675-.002 2.392.764 2.392 1.736 0 1.273-1.355 1.573-2.302 1.581-1.218 0-3.007-.128-3.882-.648-.589.348-1.357.744-2.689.774-1.161.02-2.303-.553-2.883-1.2-.23-.264-.167-.703.31-.406l.208.128c.494.307.983.61 1.557.607 1.236-.007 2.194-.416 2.704-.89-.107-.355-.204-1.126-.193-1.683.012-.65.106-.881.241-1.214l.049-.12c.01-.028.022-.055.033-.083.173-.423.36-.88.354-1.31-.003-.709.224-1.032.61-1.266.353-.21.879-.667.667-1.018-.19-.31-.693-.283-1.006-.116-.284.148-.641.134-.963.122a10.914 10.914 0 00-.16-.006c-.09.456-.945 1.061-1.475 1.072zm6.26 4.816c-.725-.014-1.772.561-2.514 1.035.59.47 2.296.464 2.885.304 1.108-.3.655-1.32-.37-1.34zM4.462 4.974c-1.075.02-.873-1.048-.362-1.517l.052-.046c.338-.298.803-.708 1.423-.686.29-.006.824.09 1.187.154.154.028.276.05.337.056.24-.009.406-.071.56-.13.171-.064.33-.124.562-.102.37.043.785.203.859.648.097.42.106.936.04 1.446-.079.5-.567.984-.918 1.21-.127.078-.114.34-.102.565.004.095.009.183.002.25-.036.37-.115.697-.227 1.051-.052.164-.14.318-.225.468-.134.234-.264.461-.246.708.008.08.012.168.017.257.009.196.018.398.08.548.663-.583 2.321-.94 3.39-.94 1.675-.002 2.391.764 2.392 1.736 0 1.273-1.356 1.573-2.303 1.581-1.218 0-3.006-.128-3.881-.648-.59.348-1.357.744-2.69.774-1.16.02-2.302-.553-2.882-1.2-.23-.264-.168-.703.31-.406l.207.128c.494.307.983.61 1.557.607 1.237-.007 2.195-.416 2.705-.89-.108-.355-.205-1.126-.194-1.683.013-.65.107-.881.242-1.214l.048-.12.034-.083c.173-.423.36-.88.353-1.31-.003-.709.225-1.032.61-1.266.353-.21.88-.667.667-1.018-.19-.31-.692-.283-1.006-.116-.283.148-.641.134-.963.122a10.938 10.938 0 00-.159-.006c-.09.456-.946 1.061-1.476 1.072zm6.26 4.816c-.724-.014-1.771.561-2.513 1.035.589.47 2.295.464 2.885.304 1.108-.3.655-1.32-.371-1.34zm19.355 16.984c-.517.925-1.262 1.941-2.313 2.782-1.158-.036-2.581-.194-3.332-.64-.589.349-1.357.745-2.689.774-1.161.02-2.303-.552-2.883-1.2-.23-.264-.167-.703.31-.406.566.344 1.11.74 1.765.736 1.236-.008 2.194-.417 2.704-.89-.107-.355-.204-1.127-.193-1.684.014-.726.13-.93.29-1.334.181-.447.393-.934.387-1.393-.003-.708.224-1.031.61-1.265.353-.211.879-.668.667-1.018-.19-.31-.693-.284-1.006-.117-.332.174-.764.125-1.122.117-.09.455-.946 1.06-1.476 1.071-1.075.021-.873-1.048-.362-1.516.341-.3.822-.756 1.474-.733.413-.008 1.32.188 1.524.21.505-.018.68-.274 1.123-.232.37.043.785.204.858.648.097.42.106.936.041 1.446-.08.5-.568.984-.918 1.21-.18.112-.078.591-.1.815a4.98 4.98 0 01-.227 1.052c-.133.419-.5.77-.472 1.175.028.262.009.588.097.805.664-.583 2.322-.94 3.39-.94.86 0 1.466.2 1.853.527zm-4.535 1.384c.59.47 2.296.464 2.885.304 1.108-.3.655-1.32-.37-1.34-.726-.013-1.773.562-2.514 1.036zM4.409 29.69a8.482 8.482 0 01-.99-.88c.06.007.12.01.182.01 1.237-.008 2.195-.417 2.705-.89-.108-.355-.205-1.127-.194-1.684.015-.726.13-.93.29-1.334.182-.447.394-.934.387-1.393-.002-.708.225-1.031.61-1.265.354-.211.88-.668.667-1.018-.19-.31-.692-.284-1.006-.117-.331.174-.763.125-1.122.117-.09.455-.945 1.06-1.476 1.071-1.075.021-.873-1.048-.362-1.516.342-.3.822-.756 1.475-.733.413-.008 1.32.188 1.524.21.505-.018.68-.274 1.122-.232.37.043.785.204.859.648.097.42.106.936.04 1.446-.079.5-.567.984-.918 1.21-.18.112-.078.591-.1.815-.036.37-.114.697-.227 1.052-.132.419-.5.77-.471 1.175.028.262.008.588.097.805.663-.583 2.321-.94 3.39-.94 1.675-.001 2.392.764 2.392 1.736 0 1.273-1.356 1.573-2.303 1.581-1.218 0-3.006-.128-3.881-.648-.59.349-1.357.745-2.69.774zm3.8-1.532c.59.47 2.295.464 2.885.304 1.108-.3.655-1.32-.371-1.34-.725-.013-1.772.562-2.514 1.036z",
    fill: "#fff"
  }));
}

var _default = SvgMtq;
exports["default"] = _default;