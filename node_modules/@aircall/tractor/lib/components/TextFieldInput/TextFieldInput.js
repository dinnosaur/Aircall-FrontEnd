"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _styledSystem = require("styled-system");

var _useTextField2 = require("../../hooks/useTextField");

var _TextField = require("../TextField");

var _utils = require("../TextField/utils");

var _TextFieldInput = require("./TextFieldInput.decl");

var _excluded = ["id", "icon", "size", "validationStatus", "onClear", "variant"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var variants = (0, _styledSystem.variant)({
  variants: {
    input: {},
    list: {
      backgroundColor: 'base.white',
      border: 'none',
      borderRadius: '0px',
      borderBottomWidth: '1px',
      borderBottomStyle: 'solid',
      borderBottomColor: 'grey.base',
      ':focus': {
        borderColor: 'grey.dark'
      }
    }
  }
});

var TextFieldInputComponent = _styledComponents["default"].input.withConfig({
  displayName: "TextFieldInput__TextFieldInputComponent",
  componentId: "sc-1y2grzu-0"
})(["", " ", " ", " ", " ", ""], _utils.makeTextField, variants, _utils.makeTextFieldValidationStatus, function (_ref) {
  var theme = _ref.theme,
      componentSize = _ref.componentSize;
  return theme.textFieldInput.sizes[componentSize];
}, function (_ref2) {
  var variant = _ref2.variant,
      theme = _ref2.theme,
      validationStatus = _ref2.validationStatus;

  if (!validationStatus) {
    return;
  }

  var validationStatusColor = (0, _utils.getValidationStatusColor)(validationStatus, theme);
  return "\n    &:focus {\n      " + (variant === _TextFieldInput.TextFieldVariants.LIST && "box-shadow: 0px 1px 1px -1px " + validationStatusColor + ";") + "\n    }\n  ";
});

var TextFieldInput = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var id = props.id,
      icon = props.icon,
      size = props.size,
      validationStatus = props.validationStatus,
      onClear = props.onClear,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? _TextFieldInput.TextFieldVariants.INPUT : _props$variant,
      inputProps = _objectWithoutPropertiesLoose(props, _excluded);

  var _useTextField = (0, _useTextField2.useTextField)({
    id: id,
    validationStatus: validationStatus,
    icon: icon,
    size: size,
    onClear: onClear
  }),
      componentStatus = _useTextField.componentStatus,
      componentId = _useTextField.componentId,
      componentSize = _useTextField.componentSize,
      error = _useTextField.error,
      hasLeftIcon = _useTextField.hasLeftIcon,
      hasClearIcon = _useTextField.hasClearIcon;

  return /*#__PURE__*/_react["default"].createElement(_TextField.TextField, {
    icon: icon,
    onClear: onClear,
    error: error
  }, /*#__PURE__*/_react["default"].createElement(TextFieldInputComponent, _extends({
    ref: ref,
    id: componentId,
    validationStatus: componentStatus,
    variant: variant,
    componentSize: componentSize,
    hasLeftIcon: hasLeftIcon,
    hasClearIcon: hasClearIcon
  }, inputProps)));
});
var _default = TextFieldInput;
exports["default"] = _default;