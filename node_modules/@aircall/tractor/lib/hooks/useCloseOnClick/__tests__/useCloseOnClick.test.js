"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactHooks = require("@testing-library/react-hooks");

var _ = require("..");

var _testUtils = require("../../../tests/test-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var renderComponent = function renderComponent() {
  var _render = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("div", {
    "data-test": "other-node"
  }), /*#__PURE__*/_react["default"].createElement("div", {
    "data-test": "trigger-node"
  }, "Hello"), /*#__PURE__*/_react["default"].createElement("div", {
    "data-test": "portal-node"
  }))),
      getByTestId = _render.getByTestId;

  var portalNode = getByTestId('portal-node');
  var triggerNode = getByTestId('trigger-node');
  var otherNode = getByTestId('other-node');
  return {
    portalNode: portalNode,
    triggerNode: triggerNode,
    otherNode: otherNode
  };
};

jest.useFakeTimers();
describe('useCloseOnClick', function () {
  it('should not invoke the onClose callback if the user clicks on the trigger or the portal', function () {
    var _renderComponent = renderComponent(),
        portalNode = _renderComponent.portalNode,
        triggerNode = _renderComponent.triggerNode;

    var onClose = jest.fn();
    (0, _reactHooks.renderHook)(function () {
      return (0, _.useCloseOnClick)({
        container: document.body,
        node: portalNode,
        triggerNode: triggerNode,
        onClose: onClose
      });
    });

    _testUtils.fireEvent.click(triggerNode);

    expect(onClose).not.toHaveBeenCalled();

    _testUtils.fireEvent.click(portalNode);

    expect(onClose).not.toHaveBeenCalled();
  });
  it('should invoke the onClose callback if the user clicks outside of the trigger or the portal', function () {
    var _renderComponent2 = renderComponent(),
        portalNode = _renderComponent2.portalNode,
        triggerNode = _renderComponent2.triggerNode,
        otherNode = _renderComponent2.otherNode;

    var container = document.body;
    var onClose = jest.fn();
    (0, _reactHooks.renderHook)(function () {
      return (0, _.useCloseOnClick)({
        container: container,
        node: portalNode,
        triggerNode: triggerNode,
        onClose: onClose
      });
    });

    _testUtils.fireEvent.click(otherNode);

    expect(onClose).toHaveBeenCalled();
    onClose.mockClear();

    _testUtils.fireEvent.click(container);

    expect(onClose).toHaveBeenCalled();
  });
  it('should invoke the onClose callback if closeOnInsideClick is set to true', function () {
    var _renderComponent3 = renderComponent(),
        portalNode = _renderComponent3.portalNode,
        triggerNode = _renderComponent3.triggerNode;

    var onClose = jest.fn();
    (0, _reactHooks.renderHook)(function () {
      return (0, _.useCloseOnClick)({
        container: document.body,
        node: portalNode,
        triggerNode: triggerNode,
        onClose: onClose,
        closeOnInsideClick: true
      });
    });

    _testUtils.fireEvent.click(triggerNode);

    jest.runAllTimers();
    expect(onClose).toHaveBeenCalled();
    onClose.mockClear();

    _testUtils.fireEvent.click(portalNode);

    jest.runAllTimers();
    expect(onClose).toHaveBeenCalled();
  });
});