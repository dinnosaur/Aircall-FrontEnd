"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactHooks = require("@testing-library/react-hooks");

var _ = require("..");

var _components = require("../../../components");

var _testUtils = require("../../../tests/test-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var renderComponent = function renderComponent() {
  var _render = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement(_components.Box, {
    height: "10px",
    overflowY: "auto",
    "data-test": "scrollable-node"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    "data-test": "trigger-node"
  }, "Hello"), /*#__PURE__*/_react["default"].createElement(_components.Box, {
    "data-test": "portal-node",
    height: "20px",
    overflowY: "auto"
  }, /*#__PURE__*/_react["default"].createElement(_components.Box, {
    height: "200px"
  })))),
      getByTestId = _render.getByTestId;

  var portalNode = getByTestId('portal-node');
  var triggerNode = getByTestId('trigger-node');
  var scrollableNode = getByTestId('scrollable-node');
  return {
    portalNode: portalNode,
    triggerNode: triggerNode,
    scrollableNode: scrollableNode
  };
};

describe('useCloseOnScroll', function () {
  it('should invoke the onClose callback if the user scrolls outside of the portalNode', function () {
    var _renderComponent = renderComponent(),
        portalNode = _renderComponent.portalNode,
        scrollableNode = _renderComponent.scrollableNode;

    var container = document.body;
    var onClose = jest.fn();
    var onScroll = jest.fn();
    container.addEventListener('scroll', onScroll, true);
    (0, _reactHooks.renderHook)(function () {
      return (0, _.useCloseOnScroll)({
        container: container,
        node: portalNode,
        onClose: onClose
      });
    });

    _testUtils.fireEvent.scroll(scrollableNode, {
      target: {
        scrollY: 100
      }
    });

    expect(onScroll).toHaveBeenCalled();
    expect(onClose).toHaveBeenCalled();
  });
  it('should not invoke the onClose callback if the user scrolls inside of the portalNode', function () {
    var _renderComponent2 = renderComponent(),
        portalNode = _renderComponent2.portalNode;

    var container = document.body;
    var onClose = jest.fn();
    var onScroll = jest.fn();
    container.addEventListener('scroll', onScroll, true);
    (0, _reactHooks.renderHook)(function () {
      return (0, _.useCloseOnScroll)({
        container: document.body,
        node: portalNode,
        onClose: onClose
      });
    });

    _testUtils.fireEvent.scroll(portalNode, {
      target: {
        scrollY: 100
      }
    });

    expect(onScroll).toHaveBeenCalled();
    expect(onClose).not.toHaveBeenCalled();
  });
});