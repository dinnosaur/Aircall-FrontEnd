"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactHooks = require("@testing-library/react-hooks");

var _ = require("..");

var _testUtils = require("../../../tests/test-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var renderComponent = function renderComponent() {
  var _render = (0, _testUtils.render)( /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("div", {
    "data-test": "trigger-node"
  }, "Hello"), /*#__PURE__*/_react["default"].createElement("div", {
    "data-test": "portal-node"
  }))),
      getByTestId = _render.getByTestId;

  var portalNode = getByTestId('portal-node');
  var triggerNode = getByTestId('trigger-node');
  return {
    portalNode: portalNode,
    triggerNode: triggerNode
  };
};

describe('useCloseOnResize', function () {
  it('should invoke the onClose callback if the container is being resized', function () {
    var _renderComponent = renderComponent(),
        portalNode = _renderComponent.portalNode;

    var onClose = jest.fn();
    var onResize = jest.fn();
    window.addEventListener('resize', onResize, false);
    (0, _reactHooks.renderHook)(function () {
      return (0, _.useCloseOnResize)({
        node: portalNode,
        onClose: onClose
      });
    });
    (0, _testUtils.fireEvent)(window, new Event('resize'));
    expect(onResize).toHaveBeenCalled();
    expect(onClose).toHaveBeenCalled();
  });
});