import React from 'react';
import { renderHook } from '@testing-library/react-hooks';
import { useCloseOnClick } from '..';
import { fireEvent, render } from '../../../tests/test-utils';

var renderComponent = function renderComponent() {
  var _render = render( /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    "data-test": "other-node"
  }), /*#__PURE__*/React.createElement("div", {
    "data-test": "trigger-node"
  }, "Hello"), /*#__PURE__*/React.createElement("div", {
    "data-test": "portal-node"
  }))),
      getByTestId = _render.getByTestId;

  var portalNode = getByTestId('portal-node');
  var triggerNode = getByTestId('trigger-node');
  var otherNode = getByTestId('other-node');
  return {
    portalNode: portalNode,
    triggerNode: triggerNode,
    otherNode: otherNode
  };
};

jest.useFakeTimers();
describe('useCloseOnClick', function () {
  it('should not invoke the onClose callback if the user clicks on the trigger or the portal', function () {
    var _renderComponent = renderComponent(),
        portalNode = _renderComponent.portalNode,
        triggerNode = _renderComponent.triggerNode;

    var onClose = jest.fn();
    renderHook(function () {
      return useCloseOnClick({
        container: document.body,
        node: portalNode,
        triggerNode: triggerNode,
        onClose: onClose
      });
    });
    fireEvent.click(triggerNode);
    expect(onClose).not.toHaveBeenCalled();
    fireEvent.click(portalNode);
    expect(onClose).not.toHaveBeenCalled();
  });
  it('should invoke the onClose callback if the user clicks outside of the trigger or the portal', function () {
    var _renderComponent2 = renderComponent(),
        portalNode = _renderComponent2.portalNode,
        triggerNode = _renderComponent2.triggerNode,
        otherNode = _renderComponent2.otherNode;

    var container = document.body;
    var onClose = jest.fn();
    renderHook(function () {
      return useCloseOnClick({
        container: container,
        node: portalNode,
        triggerNode: triggerNode,
        onClose: onClose
      });
    });
    fireEvent.click(otherNode);
    expect(onClose).toHaveBeenCalled();
    onClose.mockClear();
    fireEvent.click(container);
    expect(onClose).toHaveBeenCalled();
  });
  it('should invoke the onClose callback if closeOnInsideClick is set to true', function () {
    var _renderComponent3 = renderComponent(),
        portalNode = _renderComponent3.portalNode,
        triggerNode = _renderComponent3.triggerNode;

    var onClose = jest.fn();
    renderHook(function () {
      return useCloseOnClick({
        container: document.body,
        node: portalNode,
        triggerNode: triggerNode,
        onClose: onClose,
        closeOnInsideClick: true
      });
    });
    fireEvent.click(triggerNode);
    jest.runAllTimers();
    expect(onClose).toHaveBeenCalled();
    onClose.mockClear();
    fireEvent.click(portalNode);
    jest.runAllTimers();
    expect(onClose).toHaveBeenCalled();
  });
});