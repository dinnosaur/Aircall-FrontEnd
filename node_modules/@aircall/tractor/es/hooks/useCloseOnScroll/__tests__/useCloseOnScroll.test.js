import React from 'react';
import { renderHook } from '@testing-library/react-hooks';
import { useCloseOnScroll } from '..';
import { Box } from '../../../components';
import { fireEvent, render } from '../../../tests/test-utils';

var renderComponent = function renderComponent() {
  var _render = render( /*#__PURE__*/React.createElement(Box, {
    height: "10px",
    overflowY: "auto",
    "data-test": "scrollable-node"
  }, /*#__PURE__*/React.createElement("div", {
    "data-test": "trigger-node"
  }, "Hello"), /*#__PURE__*/React.createElement(Box, {
    "data-test": "portal-node",
    height: "20px",
    overflowY: "auto"
  }, /*#__PURE__*/React.createElement(Box, {
    height: "200px"
  })))),
      getByTestId = _render.getByTestId;

  var portalNode = getByTestId('portal-node');
  var triggerNode = getByTestId('trigger-node');
  var scrollableNode = getByTestId('scrollable-node');
  return {
    portalNode: portalNode,
    triggerNode: triggerNode,
    scrollableNode: scrollableNode
  };
};

describe('useCloseOnScroll', function () {
  it('should invoke the onClose callback if the user scrolls outside of the portalNode', function () {
    var _renderComponent = renderComponent(),
        portalNode = _renderComponent.portalNode,
        scrollableNode = _renderComponent.scrollableNode;

    var container = document.body;
    var onClose = jest.fn();
    var onScroll = jest.fn();
    container.addEventListener('scroll', onScroll, true);
    renderHook(function () {
      return useCloseOnScroll({
        container: container,
        node: portalNode,
        onClose: onClose
      });
    });
    fireEvent.scroll(scrollableNode, {
      target: {
        scrollY: 100
      }
    });
    expect(onScroll).toHaveBeenCalled();
    expect(onClose).toHaveBeenCalled();
  });
  it('should not invoke the onClose callback if the user scrolls inside of the portalNode', function () {
    var _renderComponent2 = renderComponent(),
        portalNode = _renderComponent2.portalNode;

    var container = document.body;
    var onClose = jest.fn();
    var onScroll = jest.fn();
    container.addEventListener('scroll', onScroll, true);
    renderHook(function () {
      return useCloseOnScroll({
        container: document.body,
        node: portalNode,
        onClose: onClose
      });
    });
    fireEvent.scroll(portalNode, {
      target: {
        scrollY: 100
      }
    });
    expect(onScroll).toHaveBeenCalled();
    expect(onClose).not.toHaveBeenCalled();
  });
});