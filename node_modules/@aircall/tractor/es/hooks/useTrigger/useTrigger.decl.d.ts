import { ReactNode, ReactPortal } from 'react';
export interface UseTriggerOptions {
    trigger?: 'click' | 'hover';
    /**
     * Use if you would like to have the overlay close on inside click
     */
    closeOnInsideClick?: boolean;
    /**
     * Used to check for clicks/scrolling outside of the overlay.
     */
    body?: HTMLElement;
    /**
     * the DOM Element for the tooltip.
     * By default it targets the document.body and appends a div to it.
     */
    portalContainer?: HTMLElement;
    /**
     * Delay in ms before showing the tooltip on mouse enter
     */
    mouseEnterDelay?: number;
    /**
     * Delay in ms before hidden the tooltip on mouse leave
     */
    mouseLeaveDelay?: number;
    /**
     * Gives the parent the ability to change the visibility of the overlay at any time
     * without losing the default behavior of the useTrigger hook.
     */
    visible?: boolean;
    /**
     * Called whenever the visibility of the overlay changes
     */
    onVisibilityChange?: (isVisible: boolean) => void;
}
export declare type UseTriggerReturn = [
    React.ReactElement<any>,
    {
        isVisible: boolean;
        containerBoundingBox: ClientRect;
        close: () => void;
        cancelClose: () => void;
        portal: (children: ReactNode) => ReactPortal | null;
    }
];
