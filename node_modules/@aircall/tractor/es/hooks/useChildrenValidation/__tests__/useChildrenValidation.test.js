import React from 'react';
import { renderHook } from '@testing-library/react-hooks';
import styled from 'styled-components';
import { useChildrenValidation } from '..';
import { Tab, Accordion } from '../../../components';
describe('useChildrenValidation', function () {
  it('should throw error if children are NOT allowed - single allowed child type', function () {
    var children = [/*#__PURE__*/React.createElement("div", null, "wrong child provided"), /*#__PURE__*/React.createElement("div", null, "wrong child provided")];

    var _renderHook = renderHook(function () {
      return useChildrenValidation(children, 'Tab.Menu', Tab.MenuItem);
    }),
        error = _renderHook.result.error;

    expect(error).toEqual(Error('Tab.Menu only allows Tab.MenuItem as immediate children. Found invalid child undefined.'));
  });
  it('should throw error if children are React Components and are NOT allowed - single allowed child type', function () {
    var children = [/*#__PURE__*/React.createElement(Accordion.Header, null, "Accordion Header"), /*#__PURE__*/React.createElement(Accordion.Header, null, "Accordion Header")];

    var _renderHook2 = renderHook(function () {
      return useChildrenValidation(children, 'Tab.Menu', Tab.MenuItem);
    }),
        error = _renderHook2.result.error;

    expect(error).toEqual(Error('Tab.Menu only allows Tab.MenuItem as immediate children. Found invalid child AccordionHeader.'));
  });
  it('should throw error if children are NOT allowed - multiple allowed children types', function () {
    var children = [/*#__PURE__*/React.createElement(Accordion.Header, null, "ItemHeader 1"), /*#__PURE__*/React.createElement(Accordion.Body, null, "ItemBody 1"), /*#__PURE__*/React.createElement(Tab.MenuItem, {
      id: 1
    }, "test")];

    var _renderHook3 = renderHook(function () {
      return useChildrenValidation(children, 'Accodion.Item', [Accordion.Header, Accordion.Body]);
    }),
        error = _renderHook3.result.error;

    expect(error).toEqual(Error('Accodion.Item only allows AccordionHeader, AccordionBody as immediate children. Found invalid child Tab.MenuItem.'));
  });
  it('should NOT throw error if children are allowed - single allowed child type', function () {
    var children = [/*#__PURE__*/React.createElement(Tab.MenuItem, {
      id: 1
    }, "Tab 1"), /*#__PURE__*/React.createElement(Tab.MenuItem, {
      id: 2
    }, "Tab 2"), /*#__PURE__*/React.createElement(Tab.MenuItem, {
      id: 3
    }, "Tab 3")];

    var _renderHook4 = renderHook(function () {
      return useChildrenValidation(children, 'Tab.Menu', Tab.MenuItem);
    }),
        result = _renderHook4.result;

    expect(result.error).toBe(undefined);
  });
  it('should NOT throw error if children are styled versions of allowed one', function () {
    var StyledTabMenuItem = styled(Tab.MenuItem).attrs({
      activeTabColor: 'primary.base'
    }).withConfig({
      displayName: "useChildrenValidationtest__StyledTabMenuItem",
      componentId: "sc-10rtg7v-0"
    })(["color:'#707479';"]);
    var children = [/*#__PURE__*/React.createElement(StyledTabMenuItem, {
      id: 1
    }, "Tab 1"), /*#__PURE__*/React.createElement(StyledTabMenuItem, {
      id: 2
    }, "Tab 2"), /*#__PURE__*/React.createElement(StyledTabMenuItem, {
      id: 3
    }, "Tab 3")];

    var _renderHook5 = renderHook(function () {
      return useChildrenValidation(children, 'Tab.Menu', Tab.MenuItem);
    }),
        result = _renderHook5.result;

    expect(result.error).toBe(undefined);
  });
  it('should NOT throw error if children are allowed - multiple allowed children types', function () {
    var children = [/*#__PURE__*/React.createElement(Accordion.Header, null, "ItemHeader 1"), /*#__PURE__*/React.createElement(Accordion.Body, null, "ItemBody 1")];

    var _renderHook6 = renderHook(function () {
      return useChildrenValidation(children, 'Accordion.Item', [Accordion.Header, Accordion.Body]);
    }),
        result = _renderHook6.result;

    expect(result.error).toBe(undefined);
  });
  it('should NOT throw error if children are styled versions of allowed ones', function () {
    var StyledAccordionHeader = styled(Accordion.Header).withConfig({
      displayName: "useChildrenValidationtest__StyledAccordionHeader",
      componentId: "sc-10rtg7v-1"
    })(["color:blue;"]);
    var StyledAccordionBody = styled(Accordion.Body).withConfig({
      displayName: "useChildrenValidationtest__StyledAccordionBody",
      componentId: "sc-10rtg7v-2"
    })(["padding:5px;border:2px dotted purple;"]);
    var children = [/*#__PURE__*/React.createElement(StyledAccordionHeader, null, "Styled Accordion Header"), /*#__PURE__*/React.createElement(StyledAccordionBody, null, "Styled Accordion Body")];

    var _renderHook7 = renderHook(function () {
      return useChildrenValidation(children, 'Accordion.Item', [Accordion.Header, Accordion.Body]);
    }),
        result = _renderHook7.result;

    expect(result.error).toBe(undefined);
  });
});