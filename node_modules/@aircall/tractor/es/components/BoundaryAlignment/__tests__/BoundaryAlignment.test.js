import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import React from 'react';
import { cleanup, render } from 'test-utils';
import { BoundaryAlignment } from '..';
import { getBoundingBox, toStyle } from '../../../tests/dom';
import * as domUtils from '../../../utils/dom';
import { Box } from '../../Box';
jest.mock('../../../utils/dom');
afterEach(cleanup);
/**
 * Note, the default window width is: "1024px" and height is "768px"
 */

describe('BoundaryAlignment', function () {
  describe('Placements', function () {
    var containerBoundingBox = getBoundingBox({
      top: 400,
      left: 400,
      width: 10,
      height: 10
    });
    var overlayBox = getBoundingBox({
      width: 200,
      height: 100
    });
    var cases = [
    /** Top */
    [{
      position: 'top',
      anchor: 'start'
    }, {
      top: containerBoundingBox.top - overlayBox.height,
      // 300px
      left: containerBoundingBox.left // 400px

    }], [{
      position: 'top',
      anchor: 'end'
    }, {
      top: containerBoundingBox.top - overlayBox.height,
      // 300px
      left: containerBoundingBox.right - overlayBox.width // 210px

    }], [{
      position: 'top',
      anchor: 'center'
    }, {
      top: containerBoundingBox.top - overlayBox.height,
      // 300px
      left: containerBoundingBox.left - overlayBox.width / 2 + containerBoundingBox.width / 2 // 305px

    }],
    /** Bottom */
    [{
      position: 'bottom',
      anchor: 'start'
    }, {
      top: containerBoundingBox.bottom,
      // 410px
      left: containerBoundingBox.left // 400px

    }], [{
      position: 'bottom',
      anchor: 'end'
    }, {
      top: containerBoundingBox.bottom,
      // 410px
      left: containerBoundingBox.right - overlayBox.width // 210px

    }], [{
      position: 'bottom',
      anchor: 'center'
    }, {
      top: containerBoundingBox.bottom,
      // 410px
      left: containerBoundingBox.left - overlayBox.width / 2 + containerBoundingBox.width / 2 // 305px

    }],
    /** Left */
    [{
      position: 'left',
      anchor: 'end'
    }, {
      top: containerBoundingBox.bottom - overlayBox.height,
      // 310px
      left: containerBoundingBox.left - overlayBox.width // 200px

    }], [{
      position: 'left',
      anchor: 'center'
    }, {
      top: containerBoundingBox.top - overlayBox.height / 2 + containerBoundingBox.height / 2,
      // 355px
      left: containerBoundingBox.left - overlayBox.width // 200px

    }], [{
      position: 'left',
      anchor: 'start'
    }, {
      top: containerBoundingBox.top,
      // 400px
      left: containerBoundingBox.left - overlayBox.width // 200px

    }],
    /** Right */
    [{
      position: 'right',
      anchor: 'end'
    }, {
      top: containerBoundingBox.bottom - overlayBox.height,
      // 310px
      left: containerBoundingBox.right // 410px

    }], [{
      position: 'right',
      anchor: 'center'
    }, {
      top: containerBoundingBox.top - overlayBox.height / 2 + containerBoundingBox.height / 2,
      // 355px
      left: containerBoundingBox.right // 410px

    }], [{
      position: 'right',
      anchor: 'start'
    }, {
      top: containerBoundingBox.top,
      // 400px
      left: containerBoundingBox.right // 410px

    }]];
    it.each(cases)('%o', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(placements, expected) {
        var _render, getByTestId;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
                _render = render( /*#__PURE__*/React.createElement(BoundaryAlignment, {
                  containerBoundingBox: containerBoundingBox,
                  position: placements.position,
                  anchor: placements.anchor
                }, /*#__PURE__*/React.createElement(Box, {
                  width: overlayBox.width,
                  height: overlayBox.height
                }, "Content"))), getByTestId = _render.getByTestId;
                expect(getByTestId('boundary-alignment')).toHaveStyle(toStyle(expected));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());
  });
  describe('Overflow', function () {
    it('should overflow horitontally', function () {
      var containerBoundingBox = getBoundingBox({
        top: 700,
        // Window height is set to 764px
        left: 400,
        width: 10,
        height: 10
      });
      var overlayBox = getBoundingBox({
        width: 200,
        height: 100
      });
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
      var onComputePlacement = jest.fn();
      render( /*#__PURE__*/React.createElement(BoundaryAlignment, {
        containerBoundingBox: containerBoundingBox,
        position: "bottom",
        anchor: "start",
        onComputePlacement: onComputePlacement
      }, /*#__PURE__*/React.createElement(Box, {
        width: overlayBox.width,
        height: overlayBox.height
      }, "Content")));
      expect(onComputePlacement).toHaveBeenCalledWith({
        position: 'top',
        anchor: 'start'
      });
    });
    it('should overflow vertically', function () {
      var containerBoundingBox = getBoundingBox({
        top: 600,
        left: 1000,
        // Window height is set to 1024px
        width: 10,
        height: 10
      });
      var overlayBox = getBoundingBox({
        width: 200,
        height: 100
      });
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
      var onComputePlacement = jest.fn();
      render( /*#__PURE__*/React.createElement(BoundaryAlignment, {
        containerBoundingBox: containerBoundingBox,
        position: "right",
        anchor: "start",
        onComputePlacement: onComputePlacement
      }, /*#__PURE__*/React.createElement(Box, {
        width: overlayBox.width,
        height: overlayBox.height
      }, "Content")));
      expect(onComputePlacement).toHaveBeenCalledWith({
        position: 'left',
        anchor: 'start'
      });
    });
    it('should overflow horitontally and vertically', function () {
      var containerBoundingBox = getBoundingBox({
        top: 700,
        // Window height is set to 764px
        left: 1000,
        // Window height is set to 1024px
        width: 10,
        height: 10
      });
      var overlayBox = getBoundingBox({
        width: 200,
        height: 100
      });
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
      var onComputePlacement = jest.fn();
      render( /*#__PURE__*/React.createElement(BoundaryAlignment, {
        containerBoundingBox: containerBoundingBox,
        position: "right",
        anchor: "start",
        onComputePlacement: onComputePlacement
      }, /*#__PURE__*/React.createElement(Box, {
        width: overlayBox.width,
        height: overlayBox.height
      }, "Content")));
      expect(onComputePlacement).toHaveBeenCalledWith({
        position: 'left',
        anchor: 'end'
      });
    });
  });
  describe('Offset', function () {
    it('should support top and left offsets', function () {
      var containerBoundingBox = getBoundingBox({
        top: 400,
        left: 400,
        width: 10,
        height: 10
      });
      var overlayBox = getBoundingBox({
        width: 200,
        height: 100
      });
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);

      var _render2 = render( /*#__PURE__*/React.createElement(BoundaryAlignment, {
        containerBoundingBox: containerBoundingBox,
        offset: {
          top: 4,
          left: 8
        }
      }, /*#__PURE__*/React.createElement(Box, {
        width: overlayBox.width,
        height: overlayBox.height
      }, "Content"))),
          getByTestId = _render2.getByTestId;

      expect(getByTestId('boundary-alignment')).toHaveStyle(toStyle({
        top: containerBoundingBox.bottom + 4,
        // 414px
        left: containerBoundingBox.left + 8 // 408px

      }));
    });
    it('should support top and left offsets when overflowing', function () {
      var containerBoundingBox = getBoundingBox({
        top: 700,
        // Window height is set to 764px
        left: 1000,
        // Window height is set to 1024px
        width: 10,
        height: 10
      });
      var overlayBox = getBoundingBox({
        width: 200,
        height: 100
      });
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);

      var _render3 = render( /*#__PURE__*/React.createElement(BoundaryAlignment, {
        position: "right",
        anchor: "start",
        containerBoundingBox: containerBoundingBox,
        offset: {
          top: 4,
          left: 8
        }
      }, /*#__PURE__*/React.createElement(Box, {
        width: overlayBox.width,
        height: overlayBox.height
      }, "Content"))),
          getByTestId = _render3.getByTestId;

      expect(getByTestId('boundary-alignment')).toHaveStyle(toStyle({
        top: containerBoundingBox.bottom - overlayBox.height - 4,
        // 606px
        left: containerBoundingBox.left - overlayBox.width - 8 // 792px

      }));
    });
  });
});