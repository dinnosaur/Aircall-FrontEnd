import { ReactEventHandler } from 'react';
import { Position, Anchor } from './constants';
export declare type Positions = typeof Position[keyof typeof Position];
export declare type Anchors = typeof Anchor[keyof typeof Anchor];
export interface BaseBoundaryAlignmentProps {
    onClick?: ReactEventHandler;
    onMouseEnter?: ReactEventHandler;
    onMouseLeave?: ReactEventHandler;
    fluid?: boolean;
    position?: Positions;
    anchor?: Anchors;
    /**
     * Boundary element node on which the BoundaryAligment rely to know if the position needs to be flipped
     */
    boundaryElement?: Window | HTMLElement;
    onComputePlacement?: (placements: {
        position: Positions;
        anchor: Anchors;
    }) => void;
    offset?: {
        top?: number;
        left?: number;
    };
}
export interface BoundaryAlignmentProps extends BaseBoundaryAlignmentProps {
    containerBoundingBox: ClientRect;
}
export interface ComputePlacementArgs extends BoundaryAlignmentProps {
    position: Positions;
    anchor: Anchors;
    initialPosition: Positions;
    initialAnchor: Anchors;
}
export interface BoundingRect {
    top: number;
    left: number;
    width: number;
    height: number;
}
export declare type ComputePlacement = (params: {
    position: Positions;
    anchor: Anchors;
    overlayDimensions: BoundingRect;
    containerBoundingBox: ClientRect;
}) => number;
