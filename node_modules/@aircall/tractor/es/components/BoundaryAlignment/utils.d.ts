import { BoundingRect, ComputePlacement, ComputePlacementArgs } from './BoundaryAlignment.decl';
/**
 * It computes the top position of the BoundaryAlignment based on the BoundaryAlignment and parent dimensions
 */
export declare const computeTop: ComputePlacement;
/**
 * It computes the left position of the BoundaryAlignment based on the BoundaryAlignment and parent dimensions
 */
export declare const computeLeft: ComputePlacement;
/**
 * Add extra offset to the BoundaryAlignment if provided
 */
export declare const adjustPlacement: (placement: BoundingRect, props: ComputePlacementArgs) => {
    top: number;
    left: number;
    width: number;
    height: number;
};
export declare const getElementBoundaries: (boundaryElement: Window | HTMLElement) => {
    rightBoundary: number;
    bottomBoundary: number;
    topBoundary: number;
    leftBoundary: number;
};
/**
 * Checks if the BoundaryAlignment is popping out horizontally of the parent container
 */
export declare function hasOverflowedHorizontally(placement: BoundingRect, boundaryElement: Window | HTMLElement): boolean;
/**
 * Checks if the BoundaryAlignment is popping out vertically of the parent container
 */
export declare function hasOverflowedVertically(placement: BoundingRect, boundaryElement: Window | HTMLElement): boolean;
export declare const computePlacement: (overlayDimensions: BoundingRect, props: ComputePlacementArgs) => {
    top: number;
    left: number;
    width: number;
    height: number;
};
