import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["disabled", "size", "checked", "validationStatus", "defaultChecked", "onChange", "children", "id", "readOnly"];
import React, { forwardRef, useCallback, useState, Children } from 'react';
import styled from 'styled-components';
import { ComponentSize } from '../../declarations/common.decl';
import { Flex } from '../Flex';
import { FormItemStatus } from '../Form';
import { useFormContext, useFormItemContext } from '../Form/context';
import { Typography } from '../Typography';
import { makeCheckboxColor, makeCheckboxIndicatorColor, makeCheckboxIndicatorSize, makeCheckboxSize, shouldForwardProp } from './utils';
var CheckboxContainer = styled(Flex).withConfig({
  shouldForwardProp: shouldForwardProp
}).withConfig({
  displayName: "Checkbox__CheckboxContainer",
  componentId: "sc-1txeeyv-0"
})(["position:relative;cursor:", ";", " ", " transition:background 300ms,width 300ms,height 300ms;outline:0;user-select:none;clip-path:url(#svgPath);input{display:none;}&::after{transition:background 300ms ease-in-out;content:'';position:absolute;clip-path:url(#svgPath);top:1px;left:1px;right:1px;bottom:1px;z-index:-1;}"], function (_ref) {
  var disabled = _ref.disabled;
  return disabled ? 'not-allowed' : 'pointer';
}, makeCheckboxSize, makeCheckboxColor);
var CheckboxIndicator = styled.div.withConfig({
  shouldForwardProp: shouldForwardProp
}).withConfig({
  displayName: "Checkbox__CheckboxIndicator",
  componentId: "sc-1txeeyv-1"
})(["display:block;margin:auto;border-radius:50%;transition:transform 150ms;", " ", " ", ""], makeCheckboxIndicatorColor, makeCheckboxIndicatorSize, function (_ref2) {
  var checked = _ref2.checked;
  return "transform: " + (checked ? 'scale(1)' : 'scale(0)') + ";";
});
var CheckboxWrapper = styled(Flex).withConfig({
  displayName: "Checkbox__CheckboxWrapper",
  componentId: "sc-1txeeyv-2"
})(["pointer-events:", ";"], function (_ref3) {
  var readOnly = _ref3.readOnly;
  return readOnly ? 'none' : 'all';
});
export var Checkbox = /*#__PURE__*/forwardRef(function (_ref4, ref) {
  var _ref5;

  var disabled = _ref4.disabled,
      size = _ref4.size,
      checked = _ref4.checked,
      validationStatus = _ref4.validationStatus,
      _ref4$defaultChecked = _ref4.defaultChecked,
      defaultChecked = _ref4$defaultChecked === void 0 ? false : _ref4$defaultChecked,
      onChange = _ref4.onChange,
      children = _ref4.children,
      id = _ref4.id,
      readOnly = _ref4.readOnly,
      otherStyleProps = _objectWithoutPropertiesLoose(_ref4, _excluded);

  var formContext = useFormContext();
  var formItemContext = useFormItemContext();

  var _useState = useState(defaultChecked),
      innerCheck = _useState[0],
      setInnerCheck = _useState[1];

  var checkboxCheck = checked != null ? checked : innerCheck;
  var checkboxSize = (_ref5 = size != null ? size : formContext == null ? void 0 : formContext.size) != null ? _ref5 : ComponentSize.REGULAR;
  var inputStatus = validationStatus != null ? validationStatus : formItemContext == null ? void 0 : formItemContext.validationStatus;
  var error = inputStatus === FormItemStatus.ERROR;
  var handleOnChange = useCallback(function (event) {
    if (!disabled) {
      var _checked = event.target.checked;
      setInnerCheck(_checked);
      onChange == null ? void 0 : onChange(_checked, event);
    }
  }, [disabled, onChange]);
  return /*#__PURE__*/React.createElement(CheckboxWrapper, _extends({
    cursor: disabled || readOnly ? undefined : 'pointer',
    alignItems: "center",
    as: "label",
    htmlFor: id,
    readOnly: readOnly
  }, otherStyleProps), /*#__PURE__*/React.createElement(CheckboxContainer, {
    checked: checkboxCheck,
    checkboxSize: checkboxSize,
    disabled: disabled,
    error: error
  }, /*#__PURE__*/React.createElement("input", {
    ref: ref,
    "data-test": "checkbox",
    type: "checkbox",
    "aria-checked": checkboxCheck,
    checked: checkboxCheck,
    disabled: disabled,
    onChange: handleOnChange,
    id: id
  }), /*#__PURE__*/React.createElement(CheckboxIndicator, {
    checked: checkboxCheck,
    disabled: disabled,
    error: error,
    size: checkboxSize
  })), !!Children.count(children) && /*#__PURE__*/React.createElement(Typography, {
    variant: "body2",
    color: "text.base",
    userSelect: "none",
    ml: "xxs"
  }, children));
});