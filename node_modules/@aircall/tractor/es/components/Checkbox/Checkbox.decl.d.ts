import { ChangeEvent, ReactNode } from 'react';
import { SpaceProps } from 'styled-system';
import { ComponentSizes } from '../../declarations/common.decl';
import { FormItemStatuses } from '../Form';
export interface CheckboxContainerProps {
    checked: boolean;
    disabled?: boolean;
    checkboxSize: ComponentSizes;
    error?: boolean;
}
export interface CheckboxIndicatorProps {
    checked: boolean;
    disabled?: boolean;
    size: ComponentSizes;
    error?: boolean;
}
export interface CheckboxWrapperProps {
    readOnly?: boolean;
}
export interface CheckboxProps extends SpaceProps {
    /**
     * Input validation status.
     *
     * Possible values are `success` or `error`
     */
    validationStatus?: FormItemStatuses;
    /**
     * Determines whether the checkbox is checked.
     *
     * If the value is defined it means that you have to control the subsequent changes of the component.
     */
    checked?: boolean;
    /**
     * It defines the initial value of the checkbox, this will only be used to initialized the checkbox.
     *
     * It means that the component will handle the subsequent changes and you have nothing to do.
     */
    defaultChecked?: boolean;
    /**
     * Defines the size of the checkbox button.
     *
     * Possible values: `small` | `regular` | `large`
     **/
    size?: ComponentSizes;
    /**
     * Disables the Checkbox component
     */
    disabled?: boolean;
    /**
     * Makes the Checkbox component read only
     */
    readOnly?: boolean;
    /**
     * Set event handler for the "change" event
     */
    onChange?: (checked: boolean, event: ChangeEvent<HTMLInputElement>) => void;
    children?: ReactNode;
    /**
     * Whenever we want to focus and toggle the checkbox, the input + label will need an id.
     */
    id?: string;
}
