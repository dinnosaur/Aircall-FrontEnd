import React from 'react';
import { render } from '../../../tests/test-utils';
import { InformationOutlined } from '../../Icon';
import * as ToastContext from '../ToastContext';
import { ToastList } from '../ToastList';
jest.mock('../ToastContext');
describe('TaostList', function () {
  var toasts = [{
    icon: /*#__PURE__*/React.createElement("h1", null, "icon"),
    variant: 'instructive',
    message: 'message',
    id: '1',
    dismissIn: 3000
  }, {
    icon: /*#__PURE__*/React.createElement(InformationOutlined, {
      color: "base.white",
      size: 22
    }),
    variant: 'primary',
    message: 'message 1',
    id: '2',
    dismissIn: 3000
  }];
  beforeEach(function () {
    jest.spyOn(ToastContext, 'useToast').mockReturnValue({
      showToast: jest.fn(),
      removeToast: jest.fn(),
      toasts: toasts
    });
    jest.spyOn(ToastContext, 'useToastConfig').mockReturnValue({
      takeContainerWidth: false,
      position: 'fixed'
    });
  });
  it('should render list of toasts', function () {
    var _render = render( /*#__PURE__*/React.createElement(ToastList, null), {
      // do not use Tractor as a wrapper as it renders the ToastManager
      // which makes the toast list render twice.
      wrapper: function wrapper(_ref) {
        var children = _ref.children;
        return /*#__PURE__*/React.createElement(React.Fragment, null, children);
      }
    }),
        getAllByTestId = _render.getAllByTestId;

    expect(getAllByTestId('toast-instructive')).toHaveLength(1);
    expect(getAllByTestId('toast-primary')).toHaveLength(1);
  });
});