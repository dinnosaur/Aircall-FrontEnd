import { ReactNode } from 'react';
import { FlexProps } from '../Flex';
export declare type ToastVariant = 'primary' | 'instructive' | 'warning' | 'destructive';
export interface Toast {
    /**
     * Unique Identifier for a toast
     */
    id?: string;
    /**
     * Message of the toast
     */
    message: ReactNode;
    /**
     * Defines the color or the variant of the button.
     *
     * Possible values: `primary` | `destructive` | `instructive` | `warning`
     */
    variant: ToastVariant;
    /**
     * Customize the icon or use the default toast's variant default icon.
     */
    icon?: React.ReactNode | boolean;
    /**
     * Time in ms before the Toast is dismissed.
     */
    dismissIn?: number;
    /**
     * When defined, it will replace the close button with whatever content you provide.
     */
    action?: ReactNode;
    /**
     * Function that will get called when the action content is clicked.
     */
    onAction?: (onDismiss: () => void) => void;
    /**
     * Function that will get called when the toast is clicked.
     */
    onClick?: (onDismiss: () => void) => void;
}
export interface InternalToast extends Toast {
    id: string;
    dismissIn: number;
}
export interface ToastProps extends Toast {
    /**
     * Internal injected prop used to provide a way to close the Toast
     * by clicking on a given action.
     */
    onDismiss: () => void;
    /**
     * Whether or not the toast should take the full parent width.
     *
     * Default to false.
     */
    takeContainerWidth?: boolean;
}
export interface ToastContainerProps extends FlexProps {
    variant: ToastVariant;
    takeContainerWidth: boolean;
}
