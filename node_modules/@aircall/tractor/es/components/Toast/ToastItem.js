import React, { useCallback } from 'react';
import { Box } from '../Box';
import { Flex } from '../Flex';
import { CloseOutlined } from '../Icon';
import { Typography } from '../Typography';
import { SVGContainer, IndicatorCircle, ProgressCircle, Action, ToastContainer } from './components';
import { toastIcons } from './constants';
export var ToastItem = function ToastItem(_ref) {
  var message = _ref.message,
      variant = _ref.variant,
      _ref$dismissIn = _ref.dismissIn,
      dismissIn = _ref$dismissIn === void 0 ? 0 : _ref$dismissIn,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? false : _ref$icon,
      _ref$takeContainerWid = _ref.takeContainerWidth,
      takeContainerWidth = _ref$takeContainerWid === void 0 ? false : _ref$takeContainerWid,
      onClick = _ref.onClick,
      onDismiss = _ref.onDismiss,
      action = _ref.action,
      onAction = _ref.onAction;
  var onActionClicked = useCallback(function (event) {
    event.stopPropagation();
    onAction == null ? void 0 : onAction(onDismiss);
  }, [onAction, onDismiss]);
  var onBodyClicked = useCallback(function () {
    onClick == null ? void 0 : onClick(onDismiss);
  }, [onClick, onDismiss]);
  var onCloseClicked = useCallback(function (event) {
    if (onAction) {
      onActionClicked(event);
    } else {
      onDismiss();
    }
  }, [onAction, onActionClicked, onDismiss]);
  var IconComponent = toastIcons[variant];
  var iconNode = icon && (typeof icon === 'boolean' ? /*#__PURE__*/React.createElement(IconComponent, null) : icon);
  var hasIcon = !!iconNode;
  return /*#__PURE__*/React.createElement(ToastContainer, {
    "data-test": "toast-" + variant,
    onClick: onBodyClicked,
    cursor: onClick && 'pointer',
    variant: variant,
    takeContainerWidth: takeContainerWidth
  }, /*#__PURE__*/React.createElement(Flex, {
    alignItems: "center",
    mr: 3
  }, hasIcon && /*#__PURE__*/React.createElement(Box, {
    "data-test": "toast-icon"
  }, iconNode), /*#__PURE__*/React.createElement(Typography, {
    ml: hasIcon ? 2 : 0,
    "data-test": "toast-message",
    variant: "body"
  }, message)), action ? /*#__PURE__*/React.createElement(Action, {
    onClick: onActionClicked
  }, action) : /*#__PURE__*/React.createElement(Flex, {
    position: "relative",
    onClick: onCloseClicked,
    "data-test": "toast-close",
    cursor: "pointer",
    flexShrink: 0,
    alignItems: "center",
    justifyContent: "center",
    size: 24
  }, /*#__PURE__*/React.createElement(SVGContainer, {
    width: "24",
    height: "24",
    version: "1.1",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement(IndicatorCircle, {
    r: "9",
    cx: "12",
    cy: "12"
  }), /*#__PURE__*/React.createElement(ProgressCircle, {
    dismissIn: dismissIn,
    r: "9",
    cx: "12",
    cy: "12"
  })), /*#__PURE__*/React.createElement(CloseOutlined, {
    size: 12
  })));
};