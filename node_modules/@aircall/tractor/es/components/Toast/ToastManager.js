import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useCallback, useState } from 'react';
import { uniqueId } from 'lodash';
import { createPortal } from 'react-dom';
import { usePubSub } from '../../hooks/usePubSub';
import { TOPICS } from './pubsub';
import { ToastConfigContext, ToastContext } from './ToastContext';
import { ToastList } from './ToastList';
import { isDismissable } from './utils';
export var ToastManager = function ToastManager(_ref) {
  var children = _ref.children,
      _ref$container = _ref.container,
      container = _ref$container === void 0 ? document.body : _ref$container,
      _ref$takeContainerWid = _ref.takeContainerWidth,
      takeContainerWidth = _ref$takeContainerWid === void 0 ? false : _ref$takeContainerWid,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? 'fixed' : _ref$position;

  var _useState = useState([]),
      toasts = _useState[0],
      setToasts = _useState[1];

  var removeToast = useCallback(function (id) {
    return setToasts(function (prevToasts) {
      return prevToasts.filter(function (t) {
        return t.id !== id;
      });
    });
  }, []);
  var showToast = useCallback(function (t) {
    var toast = _extends({
      dismissIn: 0,
      id: uniqueId()
    }, t);

    var cleanup = function cleanup() {
      return removeToast(toast.id);
    };

    setToasts(function (prevToasts) {
      // Don't re-add a pre-existing toast to the list.
      if (prevToasts.some(function (_ref2) {
        var id = _ref2.id;
        return id === toast.id;
      })) {
        return prevToasts;
      }

      return [].concat(prevToasts, [toast]);
    }); // Only dismiss the toast if `dismissIn` is defined and greater than zero.

    if (isDismissable(toast.dismissIn)) {
      var timeoutIdx = window.setTimeout(function () {
        cleanup();
        window.clearTimeout(timeoutIdx);
      }, toast.dismissIn);
    } // Return the cleanup function which basically
    // let you remove or dismiss the toast manually


    return cleanup;
  }, [removeToast]); // Handle events that are coming from outside the React Tree.

  usePubSub(TOPICS.SHOW_TOAST, showToast);
  usePubSub(TOPICS.REMOVE_TOAST, removeToast);
  var containerNode = typeof container === 'function' ? container() : container;
  return /*#__PURE__*/React.createElement(ToastConfigContext.Provider, {
    value: {
      takeContainerWidth: takeContainerWidth,
      position: position
    }
  }, /*#__PURE__*/React.createElement(ToastContext.Provider, {
    value: {
      toasts: toasts,
      showToast: showToast,
      removeToast: removeToast
    }
  }, /*#__PURE__*/React.createElement(React.Fragment, null, children, containerNode && /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(ToastList, null), containerNode))));
};