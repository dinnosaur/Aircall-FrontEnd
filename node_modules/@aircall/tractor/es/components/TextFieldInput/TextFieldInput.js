import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["id", "icon", "size", "validationStatus", "onClear", "variant"];
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { variant } from 'styled-system';
import { useTextField } from '../../hooks/useTextField';
import { TextField } from '../TextField';
import { getValidationStatusColor, makeTextField, makeTextFieldValidationStatus } from '../TextField/utils';
import { TextFieldVariants } from './TextFieldInput.decl';
var variants = variant({
  variants: {
    input: {},
    list: {
      backgroundColor: 'base.white',
      border: 'none',
      borderRadius: '0px',
      borderBottomWidth: '1px',
      borderBottomStyle: 'solid',
      borderBottomColor: 'grey.base',
      ':focus': {
        borderColor: 'grey.dark'
      }
    }
  }
});
var TextFieldInputComponent = styled.input.withConfig({
  displayName: "TextFieldInput__TextFieldInputComponent",
  componentId: "sc-1y2grzu-0"
})(["", " ", " ", " ", " ", ""], makeTextField, variants, makeTextFieldValidationStatus, function (_ref) {
  var theme = _ref.theme,
      componentSize = _ref.componentSize;
  return theme.textFieldInput.sizes[componentSize];
}, function (_ref2) {
  var variant = _ref2.variant,
      theme = _ref2.theme,
      validationStatus = _ref2.validationStatus;

  if (!validationStatus) {
    return;
  }

  var validationStatusColor = getValidationStatusColor(validationStatus, theme);
  return "\n    &:focus {\n      " + (variant === TextFieldVariants.LIST && "box-shadow: 0px 1px 1px -1px " + validationStatusColor + ";") + "\n    }\n  ";
});
var TextFieldInput = /*#__PURE__*/forwardRef(function (props, ref) {
  var id = props.id,
      icon = props.icon,
      size = props.size,
      validationStatus = props.validationStatus,
      onClear = props.onClear,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? TextFieldVariants.INPUT : _props$variant,
      inputProps = _objectWithoutPropertiesLoose(props, _excluded);

  var _useTextField = useTextField({
    id: id,
    validationStatus: validationStatus,
    icon: icon,
    size: size,
    onClear: onClear
  }),
      componentStatus = _useTextField.componentStatus,
      componentId = _useTextField.componentId,
      componentSize = _useTextField.componentSize,
      error = _useTextField.error,
      hasLeftIcon = _useTextField.hasLeftIcon,
      hasClearIcon = _useTextField.hasClearIcon;

  return /*#__PURE__*/React.createElement(TextField, {
    icon: icon,
    onClear: onClear,
    error: error
  }, /*#__PURE__*/React.createElement(TextFieldInputComponent, _extends({
    ref: ref,
    id: componentId,
    validationStatus: componentStatus,
    variant: variant,
    componentSize: componentSize,
    hasLeftIcon: hasLeftIcon,
    hasClearIcon: hasClearIcon
  }, inputProps)));
});
export default TextFieldInput;