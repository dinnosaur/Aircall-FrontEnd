import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["children", "selected", "defaultSelected", "onChange"];
import React, { useState, useCallback } from 'react';
import styled from 'styled-components';
import { useChildrenValidation } from '../../hooks/useChildrenValidation';
import { noop } from '../../utils/general';
import { invariant } from '../../utils/invariant';
import { Flex } from '../Flex';
import { AccordionItem } from './AccordionItem';
import { AccordionMainContext } from './context';
var AccordionWrapper = styled(Flex).attrs({
  flexDirection: 'column',
  flexShrink: 1,
  minHeight: 0,
  maxHeight: 'auto',
  height: 'max-content'
}).withConfig({
  displayName: "Accordion__AccordionWrapper",
  componentId: "sc-zh1rup-0"
})([""]);
export function Accordion(_ref) {
  var children = _ref.children,
      selected = _ref.selected,
      defaultSelected = _ref.defaultSelected,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      styleProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  var controlled = typeof selected !== 'undefined';
  var uncontrolled = typeof defaultSelected !== 'undefined';
  invariant(!(controlled && uncontrolled), "Accordion component can be either controlled or uncontrolled at a time: use either 'defaultSelected' or 'selected'.");

  var _useState = useState(defaultSelected),
      internalSelectedItemId = _useState[0],
      setInternalSelectedItemId = _useState[1];

  var handleItemClick = useCallback(function (clickedItem) {
    setInternalSelectedItemId(clickedItem);
    onChange == null ? void 0 : onChange(clickedItem);
  }, [setInternalSelectedItemId, onChange]);
  useChildrenValidation(children, 'AccordionItem', AccordionItem);
  return /*#__PURE__*/React.createElement(AccordionMainContext.Provider, {
    value: {
      selectedItemId: selected != null ? selected : internalSelectedItemId,
      onItemClick: handleItemClick
    }
  }, /*#__PURE__*/React.createElement(AccordionWrapper, styleProps, children));
}