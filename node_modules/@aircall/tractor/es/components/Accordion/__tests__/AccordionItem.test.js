import React from 'react';
import { render } from '@testing-library/react';
import { AccordionBody } from '../AccordionBody';
import { AccordionItem } from '../AccordionItem';
import { AccordionMainContext, AccordionSubContext } from '../context';
describe('components/Accordion/AccordionItem', function () {
  it('should provide the id to the children through context', function () {
    var _subContext, _subContext2;

    var subContext;

    function ContextConsumer() {
      return /*#__PURE__*/React.createElement(AccordionSubContext.Consumer, null, function (context) {
        subContext = context;
        return 'Test';
      });
    }

    var _render = render( /*#__PURE__*/React.createElement(AccordionMainContext.Provider, {
      value: {
        selectedItemId: 1
      }
    }, /*#__PURE__*/React.createElement(AccordionItem, {
      id: 1
    }, /*#__PURE__*/React.createElement(AccordionBody, null, /*#__PURE__*/React.createElement(ContextConsumer, null))))),
        rerender = _render.rerender;

    expect((_subContext = subContext) == null ? void 0 : _subContext.id).toEqual(1);
    rerender( /*#__PURE__*/React.createElement(AccordionMainContext.Provider, {
      value: {
        selectedItemId: 2
      }
    }, /*#__PURE__*/React.createElement(AccordionItem, {
      id: 2
    }, /*#__PURE__*/React.createElement(AccordionBody, null, /*#__PURE__*/React.createElement(ContextConsumer, null)))));
    expect((_subContext2 = subContext) == null ? void 0 : _subContext2.id).toEqual(2);
  });
  it('should not accept anything else than AccordionBody or AccordionHeader', function () {
    function DummyComponent() {
      return /*#__PURE__*/React.createElement("div", null);
    }

    DummyComponent.displayName = 'DummyComponent';
    expect(function () {
      return render( /*#__PURE__*/React.createElement(AccordionItem, {
        id: 1
      }, /*#__PURE__*/React.createElement(DummyComponent, null)));
    }).toThrowError('AccodionItem only allows AccordionHeader, AccordionBody as immediate children. Found invalid child DummyComponent.');
  });
});