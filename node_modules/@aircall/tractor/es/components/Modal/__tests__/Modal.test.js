import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import React from 'react';
import userEvent from '@testing-library/user-event';
import { Modal } from '..';
import { render, screen, waitFor } from '../../../tests/test-utils';
describe('Modal Component', function () {
  it('should render Modal with Header and Footer', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var onHideMock, closeBtn;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            onHideMock = jest.fn();
            render( /*#__PURE__*/React.createElement(Modal.Dialog, {
              show: true,
              onHide: onHideMock
            }, /*#__PURE__*/React.createElement(Modal.Header, null, "Header"), /*#__PURE__*/React.createElement(Modal.Body, null, "Body content"), /*#__PURE__*/React.createElement(Modal.Footer, null, /*#__PURE__*/React.createElement("button", {
              type: "button"
            }, "Cancel"))));
            closeBtn = screen.getByTestId('modal-close-icon');
            expect(screen.getByText('Header')).toBeInTheDocument();
            expect(screen.getByRole('button', {
              name: 'Cancel'
            })).toBeInTheDocument();
            expect(closeBtn).toBeInTheDocument(); // trigger click on closeBtn

            userEvent.click(closeBtn);
            expect(onHideMock).toHaveBeenCalled();

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('should rerender Modal', function () {
    var onHideMock = jest.fn();

    var _render = render( /*#__PURE__*/React.createElement(Modal.Dialog, {
      show: false,
      onHide: onHideMock
    }, /*#__PURE__*/React.createElement(Modal.Body, null, "body"))),
        rerender = _render.rerender;

    expect(screen.queryByText('body')).not.toBeInTheDocument();
    rerender( /*#__PURE__*/React.createElement(Modal.Dialog, {
      show: true,
      onHide: onHideMock
    }, /*#__PURE__*/React.createElement(Modal.Body, null, "body")));
    expect(screen.queryByText('body')).toBeInTheDocument();
  });
  it('should render Modal with close button in Header', function () {
    render( /*#__PURE__*/React.createElement(Modal.Dialog, {
      show: true,
      onHide: jest.fn()
    }, /*#__PURE__*/React.createElement(Modal.Header, null, "Header"), /*#__PURE__*/React.createElement(Modal.Body, null, "Body content")));
    expect(screen.queryByTestId('modal-header')).toContainElement(screen.queryByTestId('modal-close-icon'));
  });
  it('should render Modal without close button in Header', function () {
    render( /*#__PURE__*/React.createElement(Modal.Dialog, {
      show: true,
      onHide: jest.fn()
    }, /*#__PURE__*/React.createElement(Modal.Header, {
      closeButton: false
    }, "Header"), /*#__PURE__*/React.createElement(Modal.Body, null, "Body content")));
    expect(screen.queryByTestId('modal-close-icon')).not.toBeInTheDocument();
  });
  it('should render Modal with close button', function () {
    render( /*#__PURE__*/React.createElement(Modal.Dialog, {
      show: true,
      onHide: jest.fn()
    }, /*#__PURE__*/React.createElement(Modal.Close, null), /*#__PURE__*/React.createElement(Modal.Body, null, "Body content")));
    expect(screen.getByTestId('modal-close-icon')).toBeInTheDocument();
  });
  it('should render Modal without header', function () {
    render( /*#__PURE__*/React.createElement(Modal.Dialog, {
      show: true,
      onHide: jest.fn()
    }, /*#__PURE__*/React.createElement(Modal.Body, null, "Body content")));
    expect(screen.queryByTestId('modal-header')).not.toBeInTheDocument();
  });
  it('should render Modal without footer', function () {
    render( /*#__PURE__*/React.createElement(Modal.Dialog, {
      show: true,
      onHide: jest.fn()
    }, /*#__PURE__*/React.createElement(Modal.Header, null, "Header"), /*#__PURE__*/React.createElement(Modal.Body, null, "Body content")));
    expect(screen.queryByTestId('modal-footer')).not.toBeInTheDocument();
  });
  it('should use Title in Header', function () {
    render( /*#__PURE__*/React.createElement(Modal.Dialog, {
      show: true,
      onHide: jest.fn()
    }, /*#__PURE__*/React.createElement(Modal.Header, null, /*#__PURE__*/React.createElement(Modal.Title, null, "Modal Title"))));
    expect(screen.queryByTestId('modal-header')).toContainElement(screen.getByText('Modal Title'));
  });
  describe('Escape key', function () {
    it('should call the onHide prop when pushed', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var shouldShow, Component, _render2, rerender;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              shouldShow = true;

              Component = function Component() {
                return /*#__PURE__*/React.createElement(Modal.Dialog, {
                  show: shouldShow,
                  onHide: jest.fn(function () {
                    shouldShow = false;
                  })
                }, /*#__PURE__*/React.createElement(Modal.Body, null, "Body"));
              };

              _render2 = render( /*#__PURE__*/React.createElement(Component, null)), rerender = _render2.rerender;
              expect(screen.getByTestId('modal-container')).toBeInTheDocument();
              userEvent.type(document.body, '{esc}');
              rerender( /*#__PURE__*/React.createElement(Component, null));
              _context2.next = 8;
              return waitFor(function () {
                expect(screen.queryByTestId('modal-container')).not.toBeInTheDocument();
              });

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
    it('should not call the onHide prop if the modal is not visible', function () {
      var onHideMock = jest.fn();
      render( /*#__PURE__*/React.createElement(Modal.Dialog, {
        show: false,
        onHide: onHideMock
      }, /*#__PURE__*/React.createElement(Modal.Body, null, "Body")));
      userEvent.type(document.body, 'esc');
      expect(onHideMock).not.toHaveBeenCalled();
    });
  });
  describe('Backdrop', function () {
    it('should call the onHide prop when backdrop is clicked', function () {
      var onHideMock = jest.fn();
      render( /*#__PURE__*/React.createElement(Modal.Dialog, {
        show: true,
        onHide: onHideMock
      }, /*#__PURE__*/React.createElement(Modal.Header, null, /*#__PURE__*/React.createElement(Modal.Title, null, "Modal Title"))));
      userEvent.click(screen.getByTestId('modal-backdrop'));
      expect(onHideMock).toHaveBeenCalledTimes(1);
    });
    it('should not call the onHide prop when the backdrop is clicked but the rootClose prop is false', function () {
      var onHideMock = jest.fn();
      render( /*#__PURE__*/React.createElement(Modal.Dialog, {
        show: true,
        onHide: onHideMock,
        rootClose: false
      }, /*#__PURE__*/React.createElement(Modal.Header, null, /*#__PURE__*/React.createElement(Modal.Title, null, "Modal Title"))));
      userEvent.click(screen.getByTestId('modal-backdrop'));
      expect(onHideMock).not.toHaveBeenCalled();
    });
  });
  describe('Modal sizes', function () {
    it('should display an extra small modal', function () {
      render( /*#__PURE__*/React.createElement(Modal.Dialog, {
        show: true,
        onHide: function onHide() {
          return undefined;
        },
        size: "xSmall"
      }, /*#__PURE__*/React.createElement(Modal.Header, null, /*#__PURE__*/React.createElement(Modal.Title, null, "Modal Title"))));
      var dialogContent = screen.getByTestId('modal-dialog-content');
      expect(dialogContent).toHaveStyle({
        width: '100%'
      });
    });
    it('should display a small modal', function () {
      render( /*#__PURE__*/React.createElement(Modal.Dialog, {
        show: true,
        onHide: function onHide() {
          return undefined;
        },
        size: "small"
      }, /*#__PURE__*/React.createElement(Modal.Header, null, /*#__PURE__*/React.createElement(Modal.Title, null, "Modal Title"))));
      var dialogContent = screen.getByTestId('modal-dialog-content');
      expect(dialogContent).toHaveStyle({
        width: '100%'
      });
    });
    it('should display a regular modal', function () {
      render( /*#__PURE__*/React.createElement(Modal.Dialog, {
        show: true,
        onHide: function onHide() {
          return undefined;
        },
        size: "regular"
      }, /*#__PURE__*/React.createElement(Modal.Header, null, /*#__PURE__*/React.createElement(Modal.Title, null, "Modal Title"))));
      var dialogContent = screen.getByTestId('modal-dialog-content');
      expect(dialogContent).toHaveStyle({
        width: '100%'
      });
    });
    it('should display a large modal', function () {
      render( /*#__PURE__*/React.createElement(Modal.Dialog, {
        show: true,
        onHide: function onHide() {
          return undefined;
        },
        size: "large"
      }, /*#__PURE__*/React.createElement(Modal.Header, null, /*#__PURE__*/React.createElement(Modal.Title, null, "Modal Title"))));
      var dialogContent = screen.getByTestId('modal-dialog-content');
      expect(dialogContent).toHaveStyle({
        width: '100%'
      });
    });
  });
  it('should close modal on backdrop click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var shouldShow, Component, _render3, rerender;

    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            shouldShow = true;

            Component = function Component() {
              return /*#__PURE__*/React.createElement(Modal.Dialog, {
                show: shouldShow,
                onHide: jest.fn(function () {
                  shouldShow = false;
                })
              }, /*#__PURE__*/React.createElement(Modal.Body, null, "Body"));
            };

            _render3 = render( /*#__PURE__*/React.createElement(Component, null)), rerender = _render3.rerender;
            expect(screen.queryByTestId('modal-container')).toBeInTheDocument();
            userEvent.click(screen.getByTestId('modal-backdrop'));
            rerender( /*#__PURE__*/React.createElement(Component, null)); // wait for animation till modal close

            _context3.next = 8;
            return waitFor(function () {
              expect(screen.queryByTestId('modal-container')).not.toBeInTheDocument();
            });

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('should not close modal on backdrop click', function () {
    var shouldShow = true;

    var Component = function Component() {
      return /*#__PURE__*/React.createElement(Modal.Dialog, {
        show: shouldShow,
        rootClose: false,
        onHide: jest.fn(function () {
          shouldShow = false;
        })
      }, /*#__PURE__*/React.createElement(Modal.Body, null, "Body"));
    };

    var _render4 = render( /*#__PURE__*/React.createElement(Component, null)),
        rerender = _render4.rerender;

    expect(screen.getByTestId('modal-container')).toBeInTheDocument();
    userEvent.click(screen.getByTestId('modal-backdrop'));
    rerender( /*#__PURE__*/React.createElement(Component, null));
    expect(screen.getByTestId('modal-container')).toBeInTheDocument();
  });
});