import { ReactElement, ReactNode } from 'react';
import { UseTriggerOptions } from '../../hooks';
import { Anchors, BoundaryAlignmentProps, Positions } from '../BoundaryAlignment';
import { BoxProps } from '../Box';
import { ButtonProps } from '../Button';
export interface DropdownProps extends Pick<UseTriggerOptions, 'body' | 'portalContainer'> {
    /** The trigger of the dropdown */
    trigger: ReactElement;
    /** The position relative to the trigger */
    position?: Positions;
    /** The anchor based of the relative position */
    anchor?: Anchors;
    /** The dropdown content */
    children?: ReactNode;
    /** Toggle visibility in a controlled manner  */
    visible?: boolean;
    /** Handle visibility change in a controlled manner  */
    onVisibilityChange?: (isVisible: boolean) => void;
    /** Use if you would like to have the dropdown close on inside click  */
    closeOnInsideClick?: boolean;
    /** Add an options max-width to the dropdown container */
    maxWidth?: BoxProps['maxWidth'];
    /**
     * Set data-test for unit testing purposes
     */
    ['data-test']?: string;
    /**
     * Boundary element node on which the BoundaryAligment rely to know if the position needs to be flipped
     */
    boundaryElement?: BoundaryAlignmentProps['boundaryElement'];
}
export interface DropdownButtonProps extends Omit<ButtonProps, 'direction' | 'space' | 'children'> {
    /** Opened dropdown icon */
    iconOpen?: ReactElement;
    /** Closed dropdown icon */
    iconClose?: ReactElement;
    /** The button content */
    children?: ReactNode;
    /**
     * Set data-test for unit testing purposes
     */
    ['data-test']?: string;
}
