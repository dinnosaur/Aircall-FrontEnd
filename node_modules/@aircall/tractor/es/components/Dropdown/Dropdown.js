import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["trigger", "position", "anchor", "boundaryElement", "visible", "onVisibilityChange", "closeOnInsideClick", "children", "data-test", "body", "portalContainer", "maxWidth"];
import React from 'react';
import { useTrigger } from '../../hooks';
import { BoundaryAlignment } from '../BoundaryAlignment';
import { Anchor, Position } from '../BoundaryAlignment/constants';
import { MotionBox } from '../Box';
import { DropdownContext } from './context';
import { getOffset } from './utils';
export var Dropdown = function Dropdown(_ref) {
  var givenTrigger = _ref.trigger,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? Position.BOTTOM : _ref$position,
      _ref$anchor = _ref.anchor,
      anchor = _ref$anchor === void 0 ? Anchor.CENTER : _ref$anchor,
      boundaryElement = _ref.boundaryElement,
      visible = _ref.visible,
      onVisibilityChange = _ref.onVisibilityChange,
      _ref$closeOnInsideCli = _ref.closeOnInsideClick,
      closeOnInsideClick = _ref$closeOnInsideCli === void 0 ? true : _ref$closeOnInsideCli,
      children = _ref.children,
      _ref$dataTest = _ref['data-test'],
      testId = _ref$dataTest === void 0 ? 'dropdown' : _ref$dataTest,
      body = _ref.body,
      portalContainer = _ref.portalContainer,
      _ref$maxWidth = _ref.maxWidth,
      maxWidth = _ref$maxWidth === void 0 ? 344 : _ref$maxWidth,
      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  var _useTrigger = useTrigger(givenTrigger, {
    trigger: 'click',
    closeOnInsideClick: closeOnInsideClick,
    visible: visible,
    onVisibilityChange: onVisibilityChange,
    body: body,
    portalContainer: portalContainer
  }),
      trigger = _useTrigger[0],
      _useTrigger$ = _useTrigger[1],
      isVisible = _useTrigger$.isVisible,
      containerBoundingBox = _useTrigger$.containerBoundingBox,
      portal = _useTrigger$.portal;

  return /*#__PURE__*/React.createElement(DropdownContext.Provider, {
    value: {
      isVisible: isVisible
    }
  }, trigger, isVisible && portal( /*#__PURE__*/React.createElement(BoundaryAlignment, {
    containerBoundingBox: containerBoundingBox,
    boundaryElement: boundaryElement,
    position: position,
    anchor: anchor,
    offset: getOffset(position)
  }, /*#__PURE__*/React.createElement(MotionBox, _extends({
    initial: {
      opacity: 0
    },
    animate: {
      opacity: 1
    },
    exit: {
      opacity: 0
    },
    boxShadow: 5,
    borderRadius: 8,
    border: "1px solid",
    borderColor: "grey.light",
    backgroundColor: "base.white",
    py: 2,
    maxWidth: maxWidth,
    "data-test": testId
  }, otherProps), children))));
};