import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import React from 'react';
import userEvent from '@testing-library/user-event';
import { render, waitForElementToBeRemoved } from 'test-utils';
import { getBoundingBox } from '../../../tests/dom';
import * as domUtils from '../../../utils/dom';
import { Button } from '../../Button';
import { Dropdown } from '../Dropdown';
jest.mock('../../../utils/dom');
var overlayBox = getBoundingBox({
  width: 200,
  height: 100
});
/**
 * More of a placeholder for now, until more functionality is added
 */

describe('Dropdown', function () {
  describe('Trigger', function () {
    it('should render the given trigger', function () {
      var LABEL = 'menu';

      var _render = render( /*#__PURE__*/React.createElement(Dropdown, {
        trigger: /*#__PURE__*/React.createElement(Button, null, LABEL)
      })),
          getByText = _render.getByText;

      expect(getByText(LABEL)).toBeInTheDocument();
    });
  });
  describe('Children', function () {
    it('should not render dropdown content until triggered', function () {
      var TITLE = 'Hello';

      var _render2 = render( /*#__PURE__*/React.createElement(Dropdown, {
        trigger: /*#__PURE__*/React.createElement(Button, null, "show")
      }, /*#__PURE__*/React.createElement("h1", null, TITLE))),
          queryByText = _render2.queryByText;

      expect(queryByText(TITLE)).not.toBeInTheDocument();
    });
    it('should render dropdown content when triggered', function () {
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
      var TITLE = 'Hello';

      var _render3 = render( /*#__PURE__*/React.createElement(Dropdown, {
        trigger: /*#__PURE__*/React.createElement(Button, {
          "data-test": "trigger"
        }, "show")
      }, /*#__PURE__*/React.createElement("h1", null, TITLE))),
          queryByText = _render3.queryByText,
          getByTestId = _render3.getByTestId;

      userEvent.click(getByTestId('trigger'));
      expect(queryByText(TITLE)).toBeInTheDocument();
    });
    it('should render dropdown content when triggered', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var onClick, TITLE, _render4, getByTestId, findByTestId, queryByText, content;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
              onClick = jest.fn();
              TITLE = 'Click me!';
              _render4 = render( /*#__PURE__*/React.createElement(Dropdown, {
                trigger: /*#__PURE__*/React.createElement(Button, {
                  "data-test": "trigger"
                }, "show")
              }, /*#__PURE__*/React.createElement("h1", {
                "data-test": "content",
                onClick: onClick
              }, TITLE))), getByTestId = _render4.getByTestId, findByTestId = _render4.findByTestId, queryByText = _render4.queryByText;
              userEvent.click(getByTestId('trigger'));
              _context.next = 7;
              return findByTestId('content');

            case 7:
              content = _context.sent;
              userEvent.click(content);
              expect(onClick).toHaveBeenCalled();
              _context.next = 12;
              return waitForElementToBeRemoved(queryByText(TITLE));

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
  });
  describe('Controlled', function () {
    it('should be opened by default', function () {
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
      var TITLE = 'Hello';

      var _render5 = render( /*#__PURE__*/React.createElement(Dropdown, {
        visible: true,
        trigger: /*#__PURE__*/React.createElement(Button, {
          "data-test": "trigger"
        }, "show")
      }, /*#__PURE__*/React.createElement("h1", null, TITLE))),
          queryByText = _render5.queryByText;

      expect(queryByText(TITLE)).toBeInTheDocument();
    });
    it('should closed by default', function () {
      jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
      var TITLE = 'Hello';

      var _render6 = render( /*#__PURE__*/React.createElement(Dropdown, {
        visible: false,
        trigger: /*#__PURE__*/React.createElement(Button, {
          "data-test": "trigger"
        }, "show")
      }, /*#__PURE__*/React.createElement("h1", null, TITLE))),
          queryByText = _render6.queryByText;

      expect(queryByText(TITLE)).not.toBeInTheDocument();
    });
    it('should close the dropdown when clicking on the trigger', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var TITLE, _render7, queryByText, getByTestId;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
              TITLE = 'Hello';
              _render7 = render( /*#__PURE__*/React.createElement(Dropdown, {
                visible: true,
                trigger: /*#__PURE__*/React.createElement(Button, {
                  "data-test": "trigger"
                }, "show")
              }, /*#__PURE__*/React.createElement("h1", null, TITLE))), queryByText = _render7.queryByText, getByTestId = _render7.getByTestId;
              expect(queryByText(TITLE)).toBeInTheDocument();
              userEvent.click(getByTestId('trigger'));
              expect(queryByText(TITLE)).not.toBeInTheDocument();

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
    it('should close the dropdown when clicking outside', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      var TITLE, _render8, queryByText, getByTestId;

      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
              TITLE = 'Hello';
              _render8 = render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Dropdown, {
                visible: true,
                trigger: /*#__PURE__*/React.createElement(Button, {
                  "data-test": "trigger"
                }, "show")
              }, /*#__PURE__*/React.createElement("h1", null, TITLE)), /*#__PURE__*/React.createElement("div", {
                "data-test": "outside"
              }, "Outside"))), queryByText = _render8.queryByText, getByTestId = _render8.getByTestId;
              expect(queryByText(TITLE)).toBeInTheDocument();
              userEvent.click(getByTestId('outside'));
              _context3.next = 7;
              return waitForElementToBeRemoved(queryByText(TITLE));

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    it('should close if the prop changes for true to false', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
      var TITLE, _render9, queryByText, setProps;

      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
              TITLE = 'Hello';
              _render9 = render( /*#__PURE__*/React.createElement(Dropdown, {
                visible: true,
                trigger: /*#__PURE__*/React.createElement(Button, {
                  "data-test": "trigger"
                }, "show")
              }, /*#__PURE__*/React.createElement("h1", null, TITLE))), queryByText = _render9.queryByText, setProps = _render9.setProps;
              expect(queryByText(TITLE)).toBeInTheDocument();
              setProps({
                visible: false
              });
              expect(queryByText(TITLE)).not.toBeInTheDocument();

            case 6:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
    it('should open if the prop changes for false to true', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
      var TITLE, _render10, queryByText, setProps;

      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              jest.spyOn(domUtils, 'getBoundingClientRect').mockReturnValue(overlayBox);
              TITLE = 'Hello';
              _render10 = render( /*#__PURE__*/React.createElement(Dropdown, {
                visible: false,
                trigger: /*#__PURE__*/React.createElement(Button, {
                  "data-test": "trigger"
                }, "show")
              }, /*#__PURE__*/React.createElement("h1", null, TITLE))), queryByText = _render10.queryByText, setProps = _render10.setProps;
              expect(queryByText(TITLE)).not.toBeInTheDocument();
              setProps({
                visible: true
              });
              expect(queryByText(TITLE)).toBeInTheDocument();

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
  });
});