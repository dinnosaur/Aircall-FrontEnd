import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["iconOpen", "iconClose", "variant", "children", "data-test"];
import React, { useContext } from 'react';
import { Button, ButtonVariant } from '../Button';
import { ChevronDownOutlined, ChevronUpOutlined } from '../Icon';
import { DropdownContext } from './context';
export var DropdownButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$iconOpen = _ref.iconOpen,
      iconOpen = _ref$iconOpen === void 0 ? /*#__PURE__*/React.createElement(ChevronUpOutlined, null) : _ref$iconOpen,
      _ref$iconClose = _ref.iconClose,
      iconClose = _ref$iconClose === void 0 ? /*#__PURE__*/React.createElement(ChevronDownOutlined, null) : _ref$iconClose,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? ButtonVariant.DARK_GHOST : _ref$variant,
      children = _ref.children,
      _ref$dataTest = _ref['data-test'],
      testId = _ref$dataTest === void 0 ? 'dropdown-button' : _ref$dataTest,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  var _useContext = useContext(DropdownContext),
      isVisible = _useContext.isVisible;

  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    variant: variant,
    ref: ref,
    "data-test": testId
  }), children, isVisible ? iconOpen : iconClose);
});