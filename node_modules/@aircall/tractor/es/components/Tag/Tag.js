import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["children", "size", "mode", "variant", "maxWidth", "deletable", "onDelete", "onClick"];
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { color } from 'styled-system';
import { makeBackgroundVariant, makeTextColorVariant } from '../../utils/styles';
import { CloseOutlined, Icon } from '../Icon';
import { Spacer } from '../Spacer';
import { TagSize } from './Tag.decl';
import { makeTagShape, makeTagIconShape, shouldForwardProp } from './utils';
var TagIcon = styled(Icon).withConfig({
  displayName: "Tag__TagIcon",
  componentId: "sc-1wyvv20-0"
})(["", ""], makeTagIconShape);
var TagContainer = styled(Spacer).withConfig({
  shouldForwardProp: shouldForwardProp
}).withConfig({
  displayName: "Tag__TagContainer",
  componentId: "sc-1wyvv20-1"
})(["", " ", " ", " ", " ", " ", ""], makeTagShape, makeBackgroundVariant, makeTextColorVariant, function (_ref) {
  var tagSize = _ref.tagSize,
      theme = _ref.theme;
  return tagSize === TagSize.NORMAL ? theme.typography.variants.body : theme.typography.variants.caption;
}, function (_ref2) {
  var onClick = _ref2.onClick;
  return onClick && 'cursor: pointer;';
}, color);
var Tag = /*#__PURE__*/forwardRef(function (_ref3, ref) {
  var children = _ref3.children,
      _ref3$size = _ref3.size,
      size = _ref3$size === void 0 ? TagSize.NORMAL : _ref3$size,
      _ref3$mode = _ref3.mode,
      mode = _ref3$mode === void 0 ? 'light' : _ref3$mode,
      _ref3$variant = _ref3.variant,
      variant = _ref3$variant === void 0 ? 'primary' : _ref3$variant,
      _ref3$maxWidth = _ref3.maxWidth,
      maxWidth = _ref3$maxWidth === void 0 ? '260px' : _ref3$maxWidth,
      _ref3$deletable = _ref3.deletable,
      deletable = _ref3$deletable === void 0 ? false : _ref3$deletable,
      onDelete = _ref3.onDelete,
      onClick = _ref3.onClick,
      remainingStyleProps = _objectWithoutPropertiesLoose(_ref3, _excluded);

  var tagSpace = size === TagSize.NORMAL ? 's' : 'xxs';
  return /*#__PURE__*/React.createElement(TagContainer, _extends({
    ref: ref,
    variant: variant,
    mode: mode,
    tagSize: size,
    alignItems: "center",
    space: tagSpace,
    onClick: onClick
  }, remainingStyleProps), children, !!deletable && /*#__PURE__*/React.createElement(TagIcon, {
    component: CloseOutlined,
    "area-role": "button",
    tagSize: size,
    size: "16px",
    mode: mode,
    variant: variant,
    onClick: onDelete
  }));
});
export default Tag;