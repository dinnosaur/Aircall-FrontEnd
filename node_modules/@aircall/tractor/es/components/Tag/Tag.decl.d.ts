/// <reference types="react" />
import { ColorProps } from 'styled-system';
import { VariantType, ModeType } from '../../utils/styles';
import { IconProps } from '../Icon';
import { SpacerProps } from '../Spacer';
export interface TagProps extends ColorProps, SpacerProps {
    /**
     * You can choose all the variations defined on the "colors" theme key
     */
    variant?: VariantType;
    /**
     * Defines the mode of the tag.
     *
     * It supports light and dark modes.
     */
    mode?: ModeType;
    /**
     * Defines the size of the tag.
     *
     * It supports small and normal sizes.
     */
    size?: TagSizes;
    /**
     * Display ellipsis when text overflows a certain width.
     */
    maxWidth?: string;
    /**
     * Marks the tag as deletable and adds a "X" button next to it.
     */
    deletable?: boolean;
    /**
     * Event handler called when the tag is clicked.
     */
    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => void;
    /**
     * Event handler called when the "X" button is clicked.
     */
    onDelete?: (event: React.MouseEvent<HTMLSpanElement>) => void;
}
export interface TagContainerProps extends ColorProps {
    variant: VariantType;
    mode: ModeType;
    tagSize: TagSizes;
}
export interface TagIconProps extends Omit<TagContainerProps, 'size'>, IconProps {
    tagSize: TagSizes;
}
export declare enum TagSize {
    SMALL = "small",
    NORMAL = "normal"
}
export declare type TagSizes = 'small' | 'normal';
