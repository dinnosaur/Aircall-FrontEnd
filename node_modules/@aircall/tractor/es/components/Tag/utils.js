import _extends from "@babel/runtime/helpers/esm/extends";
import { css } from 'styled-components';
import { TagSize } from './Tag.decl';
export var makeTagShape = function makeTagShape(props) {
  var _variants;

  var theme = props.theme,
      tagSize = props.tagSize;
  var common = {
    padding: '0 8px',
    borderRadius: theme.radii[8]
  };
  var variants = (_variants = {}, _variants[TagSize.SMALL] = {
    height: 24
  }, _variants[TagSize.NORMAL] = {
    height: 32
  }, _variants);
  return _extends({}, common, variants[tagSize]);
};
export var makeTagIconShape = function makeTagIconShape(_ref) {
  var _sizeVariants;

  var mode = _ref.mode,
      tagSize = _ref.tagSize;
  var modeVariants = {
    light: {
      background: 'rgba(0, 0, 0, .1)'
    },
    dark: {
      background: 'rgba(255, 255, 255, .1)'
    }
  };
  var sizeVariants = (_sizeVariants = {}, _sizeVariants[TagSize.NORMAL] = {
    height: 24,
    width: 24,
    top: '-4px',
    left: '-4px'
  }, _sizeVariants[TagSize.SMALL] = {
    height: 16,
    width: 16,
    left: 0
  }, _sizeVariants);
  return css(["position:relative;display:block;cursor:pointer;&:hover:before{content:'';position:absolute;border-radius:50%;", " ", "}"], sizeVariants[tagSize], modeVariants[mode]);
};
export var fillTagDeleteButtonIcon = function fillTagDeleteButtonIcon(_ref2) {
  var theme = _ref2.theme,
      mode = _ref2.mode,
      variant = _ref2.variant;
  var colors = theme.colors;
  var variants = {
    light: {
      fill: colors[variant].darker
    },
    dark: {
      fill: colors[variant].lighter
    }
  };
  var fill = variants[mode].fill;
  return {
    fill: fill
  };
}; // Props that should not be forwarded to the HTML DOM elements

export var shouldForwardProp = function shouldForwardProp(prop) {
  return !['variant', 'mode', 'tagSize'].includes(prop);
};