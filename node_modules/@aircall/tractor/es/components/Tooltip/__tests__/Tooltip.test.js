import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import React from 'react';
import { render, fireEvent, waitFor } from 'test-utils';
import { Tooltip } from '..';
describe('Tooltip', function () {
  it('should render the tooltip title', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var _render, queryByTestId, getByTestId;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _render = render( /*#__PURE__*/React.createElement(Tooltip, {
              title: "title"
            }, /*#__PURE__*/React.createElement("span", {
              "data-test": "text"
            }, "Hello"))), queryByTestId = _render.queryByTestId, getByTestId = _render.getByTestId;
            expect(queryByTestId('tooltip-title')).not.toBeInTheDocument();
            fireEvent.mouseEnter(getByTestId('text'));
            _context.next = 5;
            return waitFor(function () {
              expect(getByTestId('tooltip-title')).toBeInTheDocument();
              expect(getByTestId('tooltip-title')).toHaveTextContent('title');
            });

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('should support content prop', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _render2, queryByTestId, getByTestId;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _render2 = render( /*#__PURE__*/React.createElement(Tooltip, {
              content: /*#__PURE__*/React.createElement("span", {
                "data-test": "custom-content"
              }, "Custom content")
            }, /*#__PURE__*/React.createElement("span", {
              "data-test": "text"
            }, "Hello"))), queryByTestId = _render2.queryByTestId, getByTestId = _render2.getByTestId;
            expect(queryByTestId('tooltip-title')).not.toBeInTheDocument();
            expect(queryByTestId('custom-content')).not.toBeInTheDocument();
            fireEvent.mouseEnter(getByTestId('text'));
            _context2.next = 6;
            return waitFor(function () {
              expect(getByTestId('custom-content')).toBeInTheDocument();
              expect(getByTestId('custom-content')).toHaveTextContent('Custom content');
              expect(queryByTestId('tooltip-title')).not.toBeInTheDocument();
            });

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('should and hide the tooltip content', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var title, _render3, queryByText, getByTestId;

    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            title = 'title';
            _render3 = render( /*#__PURE__*/React.createElement(Tooltip, {
              title: title
            }, /*#__PURE__*/React.createElement("span", {
              "data-test": "text"
            }, "Hello"))), queryByText = _render3.queryByText, getByTestId = _render3.getByTestId;
            expect(queryByText(title)).not.toBeInTheDocument();
            fireEvent.mouseEnter(getByTestId('text'));
            _context3.next = 6;
            return waitFor(function () {
              expect(queryByText(title)).toBeInTheDocument();
            });

          case 6:
            fireEvent.mouseLeave(getByTestId('text'));
            _context3.next = 9;
            return waitFor(function () {
              expect(queryByText(title)).not.toBeInTheDocument();
            });

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('The tooltip should not hide if the content is hovered', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var title, _render4, queryByText, getByTestId;

    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            title = 'title';
            _render4 = render( /*#__PURE__*/React.createElement(Tooltip, {
              title: title
            }, /*#__PURE__*/React.createElement("span", {
              "data-test": "text"
            }, "Hello"))), queryByText = _render4.queryByText, getByTestId = _render4.getByTestId;
            expect(queryByText(title)).not.toBeInTheDocument();
            fireEvent.mouseEnter(getByTestId('text'));
            _context4.next = 6;
            return waitFor(function () {
              expect(queryByText(title)).toBeInTheDocument();
            });

          case 6:
            fireEvent.mouseEnter(getByTestId('tooltip-content'));
            _context4.next = 9;
            return waitFor(function () {
              expect(queryByText(title)).toBeInTheDocument();
            });

          case 9:
            fireEvent.mouseLeave(getByTestId('tooltip-content'));
            _context4.next = 12;
            return waitFor(function () {
              expect(queryByText(title)).not.toBeInTheDocument();
            });

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
  it('should display the tooltip if the visible prop is provided', function () {
    var title = 'title';

    var _render5 = render( /*#__PURE__*/React.createElement(Tooltip, {
      title: title,
      visible: true
    }, /*#__PURE__*/React.createElement("span", {
      "data-test": "text"
    }, "Hello"))),
        queryByText = _render5.queryByText;

    expect(queryByText(title)).toBeInTheDocument();
  });
  it('should not close the tooltip if the visible prop is provided', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
    var title, _render6, queryByText, getByTestId, setProps;

    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            title = 'title';
            _render6 = render( /*#__PURE__*/React.createElement(Tooltip, {
              title: title,
              visible: true
            }, /*#__PURE__*/React.createElement("span", {
              "data-test": "text"
            }, "Hello"))), queryByText = _render6.queryByText, getByTestId = _render6.getByTestId, setProps = _render6.setProps;
            _context5.next = 4;
            return waitFor(function () {
              expect(queryByText(title)).toBeInTheDocument();
            });

          case 4:
            fireEvent.mouseEnter(getByTestId('tooltip-content'));
            _context5.next = 7;
            return waitFor(function () {
              expect(queryByText(title)).toBeInTheDocument();
            });

          case 7:
            setProps({
              visible: false
            });
            _context5.next = 10;
            return waitFor(function () {
              expect(queryByText(title)).not.toBeInTheDocument();
            });

          case 10:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  })));
});