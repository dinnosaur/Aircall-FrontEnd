import React, { ChangeEvent, ComponentType, HTMLProps, SVGProps } from 'react';
import { FlattenInterpolation, ThemeProps } from 'styled-components';
import { Theme } from '../../styles/theme';
import { FormItemStatuses } from '../Form';
import { IconButtonProps } from '../IconButton';
export interface TextFieldProps<T = HTMLInputElement> extends Omit<HTMLProps<T>, 'size' | 'as' | 'ref'> {
    /**
     * Input validation status.
     *
     * Possible values are `success` or `error`
     */
    validationStatus?: FormItemStatuses;
    /**
     * Would you like to show an icon on the left side?
     */
    icon?: ComponentType<SVGProps<SVGSVGElement>>;
    /**
     * Is the field disabled?
     */
    disabled?: boolean;
    /**
     * The... Well.. Value.
     */
    value?: string;
    /**
     * The default value.
     */
    defaultValue?: string;
    /**
     * Whatever happens when the value changes.
     */
    onChange?: (event: ChangeEvent<T>) => void;
    /**
     * Passing this callback will show a "clear input" button on the right.
     */
    onClear?: () => void;
}
export declare type TextFieldWrapperProps = Pick<TextFieldProps, 'onClear' | 'icon'> & {
    /**
     * Render text field child
     */
    children: React.ReactNode;
    /**
     * Style for clear button
     */
    clearIconStyle?: FlattenInterpolation<ThemeProps<Theme>>;
    /**
     * If text field has an error
     */
    error: boolean;
};
export declare type ClearButtonProps = IconButtonProps & Pick<TextFieldWrapperProps, 'clearIconStyle'>;
