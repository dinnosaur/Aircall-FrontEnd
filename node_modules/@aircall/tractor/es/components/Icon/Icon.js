import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["component", "size", "spin", "color"];
import React, { forwardRef } from 'react';
import styled, { keyframes, css } from 'styled-components';
import { size, color, space } from 'styled-system';
import { useIconContext } from './context';
import { shouldForwardProp } from './utils';
var rotate = keyframes(["from{transform:rotate(0deg);}to{transform:rotate(360deg);}"]);
var IconContainer = styled.div.withConfig({
  shouldForwardProp: shouldForwardProp
}).withConfig({
  displayName: "Icon__IconContainer",
  componentId: "sc-1nxqijo-0"
})(["line-height:0;cursor:", ";", ";> svg{", ";", ";animation:", ";}"], function (_ref) {
  var onClick = _ref.onClick;
  return onClick && 'pointer';
}, space, size, color, function (_ref2) {
  var spin = _ref2.spin;
  return spin && css(["", " 2s linear infinite"], rotate);
});
var Icon = /*#__PURE__*/forwardRef(function (_ref3, ref) {
  var Component = _ref3.component,
      _ref3$size = _ref3.size,
      size = _ref3$size === void 0 ? '24px' : _ref3$size,
      spin = _ref3.spin,
      color = _ref3.color,
      otherStyleProps = _objectWithoutPropertiesLoose(_ref3, _excluded);

  var iconContext = useIconContext();
  var IconComponent = null;

  if (typeof Component === 'string') {
    if (!iconContext) {
      // TODO: unify the error messages
      console.error('Cannot select the icon component without the icons given using the `<IconProvider>`.');
      return null;
    }

    var selectableIcons = iconContext.icons;
    var IconComp = selectableIcons == null ? void 0 : selectableIcons[Component];

    if (!IconComp) {
      // TODO: unify the error messages
      console.error("Cannot find the corresponding icon component: " + Component + ". Available icons are:", Object.keys(selectableIcons || {}));
      return null;
    }

    IconComponent = IconComp;
  } else {
    IconComponent = Component;
  }

  return /*#__PURE__*/React.createElement(IconContainer, _extends({
    ref: ref,
    size: size,
    spin: spin,
    color: color
  }, otherStyleProps), /*#__PURE__*/React.createElement(IconComponent, null));
});
export default Icon;