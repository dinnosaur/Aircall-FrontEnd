import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import React from 'react';
import userEvent from '@testing-library/user-event';
import { render, screen } from 'test-utils';
import { Select } from '..';
import { optionValue } from '../utils';
describe('Select', function () {
  var options = [{
    value: 'Week',
    label: 'Week'
  }, {
    value: 'Month',
    label: 'Month'
  }, {
    value: 'Day',
    label: 'Day'
  }, {
    value: 'Hour',
    label: 'Hour'
  }];
  describe('render', function () {
    it('render trigger and dropdown list', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var placeholder;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(Select, {
                size: "small",
                name: "time",
                options: options,
                placeholder: "Select time"
              }));
              placeholder = screen.getByText('Select time');
              expect(placeholder).toBeInTheDocument();
              userEvent.click(placeholder); // open the dropdown

              _context.t0 = expect;
              _context.next = 7;
              return screen.findByTestId('select-dropdown-container');

            case 7:
              _context.t1 = _context.sent;
              (0, _context.t0)(_context.t1).toBeInTheDocument();
              // select option
              userEvent.click(screen.getByText('Week')); // close the dropdown

              expect(screen.queryByTestId('select-dropdown-container')).not.toBeInTheDocument(); // render selected value in Trigger

              expect(screen.getByTestId('select-trigger-container')).toHaveTextContent('Week');

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    it('render grey trigger when disabled', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var triggerContainer;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(Select, {
                size: "small",
                name: "time",
                options: options,
                placeholder: "Select time",
                disabled: true
              }));
              triggerContainer = screen.getByTestId('select-trigger-container');
              expect(triggerContainer).toHaveStyle({
                'background-color': '#e8e8e6',
                'pointer-events': 'none'
              });

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
    it('keep dropdown open when clicking on option', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      var placeholder;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("button", null, "Close the dropdown"), /*#__PURE__*/React.createElement(Select, {
                name: "time",
                options: options,
                placeholder: "Select time",
                mode: "multiple"
              })));
              placeholder = screen.getByText('Select time');
              expect(placeholder).toBeInTheDocument();
              userEvent.click(placeholder); // open the dropdown

              _context3.t0 = expect;
              _context3.next = 7;
              return screen.findByTestId('select-dropdown-container');

            case 7:
              _context3.t1 = _context3.sent;
              (0, _context3.t0)(_context3.t1).toBeInTheDocument();
              // select option
              userEvent.click(screen.getByText('Week'));
              userEvent.click(screen.getByText('Month')); // keep the dropdown open

              expect(screen.getByTestId('select-dropdown-container')).toBeInTheDocument(); // render selected options in Trigger

              expect(screen.getByTestId('select-trigger-container')).toHaveTextContent('Week,Month');
              userEvent.click(screen.getByText('Close the dropdown'));
              expect(screen.queryByTestId('select-dropdown-container')).not.toBeInTheDocument();

            case 15:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    it('render items of fexible shape', function () {
      var users = [{
        id: 1,
        firstname: 'John',
        lastname: 'Doe'
      }, {
        id: 2,
        firstname: 'Jane',
        lastname: 'Doe'
      }];

      var getOptionLabel = function getOptionLabel(_ref4) {
        var firstname = _ref4.firstname,
            lastname = _ref4.lastname;
        return firstname + " " + lastname;
      };

      var getOptionValue = function getOptionValue(_ref5) {
        var id = _ref5.id;
        return "" + id;
      };

      render( /*#__PURE__*/React.createElement(Select, {
        "data-test": "user-select",
        name: "user",
        options: users,
        placeholder: "Select user",
        getOptionLabel: getOptionLabel,
        getOptionValue: getOptionValue,
        mode: "multiple"
      }));
      var select = screen.getByTestId('user-select');
      expect(select).toBeInTheDocument(); // open dropdown

      userEvent.click(select);
      var firstOption = screen.getAllByTestId('select-option-item')[0];
      expect(firstOption).toBeInTheDocument();
      expect(firstOption).toHaveAttribute('data-selected', 'false');
      userEvent.click(firstOption);
      expect(firstOption).toHaveAttribute('data-selected', 'true');
    });
  });
  describe('Controlled Select', function () {
    it('call onChange when selecting an option', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
      var mockOnChange, trigger;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              mockOnChange = jest.fn();
              render( /*#__PURE__*/React.createElement(Select, {
                size: "small",
                name: "time",
                options: options,
                placeholder: "Select time",
                onChange: mockOnChange,
                value: options[0]
              })); // render selected value in Trigger

              trigger = screen.getByTestId('select-trigger-container');
              expect(trigger).toHaveTextContent('Week');
              userEvent.click(trigger); // open the dropdown

              _context4.t0 = expect;
              _context4.next = 8;
              return screen.findByTestId('select-dropdown-container');

            case 8:
              _context4.t1 = _context4.sent;
              (0, _context4.t0)(_context4.t1).toBeInTheDocument();
              // select other option
              userEvent.click(screen.getByText('Day')); // close the dropdown

              expect(mockOnChange).toBeCalledWith(options[2]);

            case 12:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
    it('call onChange when selecting multiple option', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
      var mockOnChange, _render, rerender, trigger;

      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              mockOnChange = jest.fn();
              _render = render( /*#__PURE__*/React.createElement(Select, {
                size: "small",
                name: "time",
                options: options,
                placeholder: "Select time",
                onChange: mockOnChange,
                mode: "multiple",
                value: []
              })), rerender = _render.rerender; // render selected value in Trigger

              trigger = screen.getByTestId('select-trigger-container');
              userEvent.click(trigger); // open the dropdown

              _context5.t0 = expect;
              _context5.next = 7;
              return screen.findByTestId('select-dropdown-container');

            case 7:
              _context5.t1 = _context5.sent;
              (0, _context5.t0)(_context5.t1).toBeInTheDocument();
              // select  options
              userEvent.click(screen.getByText('Week'));
              expect(mockOnChange).toHaveBeenCalledWith([options[0]]);
              rerender( /*#__PURE__*/React.createElement(Select, {
                size: "small",
                name: "time",
                options: options,
                placeholder: "Select time",
                onChange: mockOnChange,
                mode: "multiple",
                value: options[0]
              }));
              userEvent.click(screen.getByText('Day'));
              expect(mockOnChange).toHaveBeenCalledWith([options[0], options[2]]);

            case 14:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
  });
  describe('Searchable Select', function () {
    it('trigger onSearch handler when typing in the select input', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
      var mockOnSearch, placeholder, searchInput;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              mockOnSearch = jest.fn();
              render( /*#__PURE__*/React.createElement(Select, {
                size: "small",
                name: "time",
                options: options,
                placeholder: "Select time",
                searchable: true,
                onSearch: mockOnSearch
              }));
              placeholder = screen.getByText('Select time');
              expect(placeholder).toBeInTheDocument();
              userEvent.click(placeholder); // open the dropdown

              _context6.t0 = expect;
              _context6.next = 8;
              return screen.findByTestId('select-dropdown-container');

            case 8:
              _context6.t1 = _context6.sent;
              (0, _context6.t0)(_context6.t1).toBeInTheDocument();
              searchInput = screen.getByTestId('select-search-input');
              expect(searchInput).toBeInTheDocument();
              userEvent.type(searchInput, 'query');
              expect(mockOnSearch).toBeCalledWith('query');

            case 14:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
  });
  describe('utils', function () {
    describe('optionValue', function () {
      var option = {
        value: 1,
        label: 'first'
      };
      it('should get value from option by default', function () {
        expect(optionValue(option)).toEqual(option.value);
      });
      it('should get value from getOptionValue if passed', function () {
        var getOptionValue = function getOptionValue(_ref9) {
          var label = _ref9.label,
              value = _ref9.value;
          return label + "_" + value;
        };

        expect(optionValue(option, getOptionValue)).toEqual('first_1');
      });
    });
  });
});