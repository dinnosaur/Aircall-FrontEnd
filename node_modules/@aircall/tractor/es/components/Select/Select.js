import React, { useEffect, useState, useCallback, useMemo } from 'react';
import { Box, MotionBox } from '..';
import { useTrigger } from '../../hooks';
import { useForm } from '../../hooks/useForm';
import { BoundaryAlignment } from '../BoundaryAlignment';
import { getOffset } from '../Dropdown/utils';
import { Typography } from '../Typography';
import { Loading } from './components/Loading';
import { SearchInput } from './components/SelectInput';
import { SelectMenu } from './components/SelectMenu';
import { DropdownContainer, TriggerContainer } from './components/styled';
import { ValueContainer } from './components/ValueContainer';
import { calculateDropdownMaxHeight } from './utils';
import { optionValue } from './utils';

function initSelectedValue(value, isMulti) {
  if (isMulti === void 0) {
    isMulti = false;
  }

  if (!value) return isMulti ? [] : null;

  if (isMulti) {
    var multiValues = Array.isArray(value) ? value : [value];
    return multiValues;
  }

  var singleValue = Array.isArray(value) ? value.length > 0 ? value[0] : null : value;
  return singleValue;
}

export var Select = function Select(_ref) {
  var options = _ref.options,
      placeholder = _ref.placeholder,
      getOptionLabel = _ref.getOptionLabel,
      getOptionValue = _ref.getOptionValue,
      size = _ref.size,
      value = _ref.value,
      onChange = _ref.onChange,
      onSearch = _ref.onSearch,
      mode = _ref.mode,
      _ref$components = _ref.components,
      components = _ref$components === void 0 ? {} : _ref$components,
      _ref$searchable = _ref.searchable,
      searchable = _ref$searchable === void 0 ? false : _ref$searchable,
      _ref$loading = _ref.loading,
      loading = _ref$loading === void 0 ? false : _ref$loading,
      _ref$noOptionsLabel = _ref.noOptionsLabel,
      noOptionsLabel = _ref$noOptionsLabel === void 0 ? 'No options' : _ref$noOptionsLabel,
      _ref$menuIsOpen = _ref.menuIsOpen,
      menuIsOpen = _ref$menuIsOpen === void 0 ? false : _ref$menuIsOpen,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? '100%' : _ref$width,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? 'bottom' : _ref$position,
      _ref$anchor = _ref.anchor,
      anchor = _ref$anchor === void 0 ? 'start' : _ref$anchor,
      _ref$boundaryElement = _ref.boundaryElement,
      boundaryElement = _ref$boundaryElement === void 0 ? window : _ref$boundaryElement,
      _ref$loadingText = _ref.loadingText,
      loadingText = _ref$loadingText === void 0 ? 'Loading results' : _ref$loadingText,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$dataTest = _ref['data-test'],
      dataTest = _ref$dataTest === void 0 ? 'select-trigger-container' : _ref$dataTest,
      validationStatus = _ref.validationStatus;
  var isMulti = mode === 'multiple';

  var _useState = useState(initSelectedValue(value, isMulti)),
      selectedValue = _useState[0],
      setSelectedValue = _useState[1];

  var _useState2 = useState(''),
      searchText = _useState2[0],
      setSearchText = _useState2[1];

  var _useState3 = useState(position),
      internalPosition = _useState3[0],
      setInternalPosition = _useState3[1];

  var _useForm = useForm({
    size: size,
    validationStatus: validationStatus
  }),
      componentSize = _useForm.componentSize,
      componentStatus = _useForm.componentStatus;

  useEffect(function () {
    setSelectedValue(initSelectedValue(value, isMulti));
  }, [value, isMulti]);
  var Trigger = components.Trigger,
      OptionComponent = components.Option;
  var triggerComponent = useMemo(function () {
    return Trigger ? /*#__PURE__*/React.createElement(Trigger, {
      value: selectedValue,
      disabled: disabled,
      "data-test": dataTest
    }) : /*#__PURE__*/React.createElement(TriggerContainer, {
      triggerSize: componentSize,
      validationStatus: componentStatus,
      "data-test": dataTest,
      width: width,
      disabled: disabled
    }, !selectedValue || Array.isArray(selectedValue) && selectedValue.length === 0 ? /*#__PURE__*/React.createElement(Typography, {
      color: "text.dark"
    }, placeholder) : /*#__PURE__*/React.createElement(ValueContainer, {
      value: selectedValue,
      getOptionLabel: getOptionLabel
    }));
  }, [Trigger, selectedValue, componentSize, componentStatus, width, placeholder, getOptionLabel, disabled, dataTest]);

  var _useTrigger = useTrigger(triggerComponent, {
    trigger: 'click',
    closeOnInsideClick: false,
    visible: menuIsOpen
  }),
      trigger = _useTrigger[0],
      _useTrigger$ = _useTrigger[1],
      isVisible = _useTrigger$.isVisible,
      containerBoundingBox = _useTrigger$.containerBoundingBox,
      portal = _useTrigger$.portal,
      close = _useTrigger$.close;

  var updateSelectedValue = useCallback(function (option) {
    !isMulti && close();
    var updatedValue;

    if (isMulti && Array.isArray(selectedValue)) {
      var foundIdx = selectedValue.findIndex(function (selectedOption) {
        return optionValue(selectedOption, getOptionValue) === optionValue(option, getOptionValue);
      });
      updatedValue = foundIdx > -1 ? [].concat(selectedValue.slice(0, foundIdx), selectedValue.slice(foundIdx + 1)) : [].concat(selectedValue, [option]);
    } else {
      updatedValue = option;
    } // as uncontrolled component, call setSeletedValue


    value === undefined && setSelectedValue(updatedValue);
    onChange && onChange(updatedValue);
  }, [close, getOptionValue, isMulti, onChange, selectedValue, value]);
  var offset = useMemo(function () {
    return getOffset(position);
  }, [position]);
  var maxHeight = useMemo(function () {
    return calculateDropdownMaxHeight({
      boundaryElement: boundaryElement,
      containerBoundingBox: containerBoundingBox,
      position: internalPosition,
      offset: offset
    });
  }, [boundaryElement, containerBoundingBox, internalPosition, offset]);
  var onSearchInputChange = useCallback(function (value) {
    setSearchText(value);
    onSearch == null ? void 0 : onSearch(value);
  }, [onSearch]);
  var handleComputePlacement = useCallback(function (placements) {
    setInternalPosition(placements.position);
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, trigger, isVisible && portal( /*#__PURE__*/React.createElement(BoundaryAlignment, {
    containerBoundingBox: containerBoundingBox,
    boundaryElement: boundaryElement,
    onComputePlacement: handleComputePlacement,
    position: position,
    offset: offset,
    anchor: anchor
  }, /*#__PURE__*/React.createElement(MotionBox, {
    initial: {
      opacity: 0
    },
    animate: {
      opacity: 1
    },
    exit: {
      opacity: 0
    }
  }, /*#__PURE__*/React.createElement(DropdownContainer, {
    width: containerBoundingBox.width,
    maxHeight: maxHeight,
    "data-test": "select-dropdown-container"
  }, /*#__PURE__*/React.createElement(Box, {
    py: "xs",
    overflow: "auto"
  }, loading ? /*#__PURE__*/React.createElement(Loading, {
    loadingText: loadingText,
    size: componentSize
  }) : options.length === 0 ? /*#__PURE__*/React.createElement(Typography, {
    pl: "s",
    variant: "body2",
    py: "xxs"
  }, noOptionsLabel) : /*#__PURE__*/React.createElement(SelectMenu, {
    options: options,
    size: componentSize,
    isMulti: isMulti,
    onSelect: updateSelectedValue,
    getOptionValue: getOptionValue,
    getOptionLabel: getOptionLabel,
    optionComponent: OptionComponent,
    selectedValue: selectedValue
  })), searchable && /*#__PURE__*/React.createElement(Box, {
    order: internalPosition === 'bottom' ? -1 : 1
  }, /*#__PURE__*/React.createElement(SearchInput, {
    dropdownPosition: internalPosition,
    onChange: onSearchInputChange,
    value: searchText,
    size: componentSize
  })))))));
};