import { ComponentType, ForwardRefExoticComponent, RefAttributes, ReactNode } from 'react';
import { WidthProps } from 'styled-system';
import { Anchors, FormItemStatuses } from '..';
import { ComponentSizes } from '../../declarations/common.decl';
export interface OptionTypeBase {
    [key: string]: any;
}
export declare type DefaultOptionType = {
    label: string;
    value: any;
};
export declare type OptionsType<OptionType extends OptionTypeBase> = ReadonlyArray<OptionType>;
export interface GroupType<OptionType extends OptionTypeBase> {
    options: OptionsType<OptionType>;
    label?: string;
}
export declare type GetOptionLabel<OptionType extends OptionTypeBase = any> = (option: OptionType) => string;
export declare type GetOptionValue<OptionType extends OptionTypeBase = any> = (option: OptionType) => string;
export declare type SingleValue<Option> = Option | null;
export declare type MultiValue<Option> = Option[];
export declare type OnChangeValue<Option, Mode extends string> = Mode extends 'multiple' ? MultiValue<Option> : SingleValue<Option>;
interface SelectComponentType<OptionType> {
    Trigger?: ForwardRefExoticComponent<{
        value?: OptionType[] | OptionType | null;
        disabled?: boolean;
    } & RefAttributes<HTMLDivElement>>;
    Option?: ComponentType<OptionType>;
}
export declare type SelectDropdownPositions = 'top' | 'bottom';
export declare type SelectMode = 'single' | 'multiple';
export declare type SelectOptions<OptionType> = Array<OptionType | GroupType<OptionType>>;
export interface SelectProps<OptionType = unknown, Mode extends SelectMode = 'single'> extends WidthProps {
    /**
     * The name of select field.
     */
    name: string;
    placeholder?: string;
    /**
     * Handle change events on the select.
     */
    onChange?: (value: OnChangeValue<OptionType, Mode>) => void;
    /**
     * Array of options that populate the select menu
     */
    options: SelectOptions<OptionType>;
    /**
     * The value of the select, could be an item or a list of items.
     */
    value?: OptionType[] | OptionType | null;
    /**
     * The size of the Text Field Input.
     *
     * Possible values: `small` | `regular` | `large`
     */
    size?: ComponentSizes;
    /**
     * A function that resolves option data to a string to be displayed as the label
     */
    getOptionLabel?: GetOptionLabel<OptionType>;
    /**
     * A function that resolves option data to a string as the value
     */
    getOptionValue?: GetOptionValue<OptionType>;
    components?: SelectComponentType<OptionType>;
    /**
     * If true, an input with search icon is displayed in the dropdown. `onSearch` will be called when typing in the input.
     */
    searchable?: boolean;
    /**
     * The function to trigger when typing in the search input.
     */
    onSearch?: (query: string) => void;
    /**
     * If `true`, a spinner is displayed in the dropdown menu.
     */
    loading?: boolean;
    /**
     * The text to display if `isLoading` is true.
     */
    loadingText?: string;
    /**
     * If is `multiple`, multiple options can be selected.
     */
    mode?: Mode;
    /**
     * The element to display if no option exists.
     */
    noOptionsLabel?: ReactNode;
    /**
     * If `true`, the dropdown menu is opened initially.
     */
    menuIsOpen?: boolean;
    /**
     * The position of the dropdown menu.
     * Possible values: `top` | `bottom`
     */
    position?: SelectDropdownPositions;
    /**
     * The alignment of the dropdown menu.
     */
    anchor?: Anchors;
    boundaryElement?: Window | HTMLElement;
    validationStatus?: FormItemStatuses;
    disabled?: boolean;
    'data-test'?: string;
}
export {};
