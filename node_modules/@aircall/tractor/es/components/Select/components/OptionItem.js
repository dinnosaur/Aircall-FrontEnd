import React, { useCallback } from 'react';
import styled from 'styled-components';
import { Box, TickOutlined, Flex, Typography, Checkbox } from '../..';
import { optionLabel } from '../utils';
var OptionItemContainer = styled(Flex).attrs(function () {
  return {
    px: 's'
  };
}).withConfig({
  displayName: "OptionItem__OptionItemContainer",
  componentId: "sc-1m1gupy-0"
})(["&:hover,&:focus{background-color:", ";}text-align:left;&:active{background-color:", ";}cursor:pointer;align-items:center;height:", ";"], function (_ref) {
  var theme = _ref.theme;
  return theme.colors.grey.lighter;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.colors.grey.light;
}, function (_ref3) {
  var theme = _ref3.theme,
      size = _ref3.size;
  return theme.select.optionSizes[size].height;
});
export var OptionItem = function OptionItem(_ref4) {
  var isMulti = _ref4.isMulti,
      option = _ref4.option,
      isSelected = _ref4.isSelected,
      onSelect = _ref4.onSelect,
      OptionComponent = _ref4.optionComponent,
      getOptionLabel = _ref4.getOptionLabel,
      size = _ref4.size;
  var displayLabel = optionLabel(option, getOptionLabel);
  var onItemClick = useCallback(function () {
    onSelect(option);
  }, [onSelect, option]);
  return /*#__PURE__*/React.createElement(OptionItemContainer, {
    onClick: onItemClick,
    size: size,
    "data-test": "select-option-item",
    "data-selected": isSelected
  }, isMulti && /*#__PURE__*/React.createElement(Checkbox, {
    checked: isSelected,
    mr: "xxs",
    readOnly: true
  }), OptionComponent && /*#__PURE__*/React.createElement(OptionComponent, option) || /*#__PURE__*/React.createElement(Typography, {
    ellipsis: true,
    variant: "body2"
  }, displayLabel), isSelected && !isMulti && /*#__PURE__*/React.createElement(Box, {
    ml: "auto",
    pl: "xxs"
  }, /*#__PURE__*/React.createElement(TickOutlined, {
    color: "primary.base"
  })));
};