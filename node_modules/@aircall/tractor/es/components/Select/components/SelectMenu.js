import React, { useCallback, useMemo } from 'react';
import { Typography, Divider } from '../..';
import { isGroupType, isItemSelected, optionValue } from '../utils';
import { OptionItem } from './OptionItem';
import { SelectGroupLabel } from './styled';
export var SelectMenu = function SelectMenu(_ref) {
  var options = _ref.options,
      size = _ref.size,
      selectedValue = _ref.selectedValue,
      getOptionValue = _ref.getOptionValue,
      getOptionLabel = _ref.getOptionLabel,
      isMulti = _ref.isMulti,
      onSelect = _ref.onSelect,
      OptionComponent = _ref.optionComponent;
  var renderOption = useCallback(function (item) {
    var isSelected = isItemSelected(item, selectedValue, getOptionValue);
    return /*#__PURE__*/React.createElement(OptionItem, {
      key: "option_item_" + optionValue(item, getOptionValue),
      size: size,
      isMulti: isMulti,
      option: item,
      isSelected: isSelected,
      onSelect: onSelect,
      optionComponent: OptionComponent,
      getOptionValue: getOptionValue,
      getOptionLabel: getOptionLabel
    });
  }, [OptionComponent, getOptionLabel, getOptionValue, isMulti, onSelect, selectedValue, size]);
  var menuElement = useMemo(function () {
    return /*#__PURE__*/React.createElement(React.Fragment, null, options.map(function (element, idx) {
      if (isGroupType(element)) {
        var groupLabel = element.label;
        var groupOptions = element.options;
        return /*#__PURE__*/React.createElement("div", {
          key: "group_" + idx + "_" + groupLabel
        }, groupLabel ? /*#__PURE__*/React.createElement(SelectGroupLabel, {
          size: size
        }, /*#__PURE__*/React.createElement(Typography, {
          variant: "overline2",
          color: "text.dark",
          px: "s"
        }, groupLabel)) : idx !== 0 && /*#__PURE__*/React.createElement(Divider, {
          orientation: "horizontal",
          size: "xSmall",
          color: "grey.base"
        }), groupOptions.map(function (item) {
          return renderOption(item);
        }));
      } else {
        return renderOption(element);
      }
    }));
  }, [options, renderOption, size]);
  return menuElement;
};