import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["children", "size", "variant", "count", "maxCount", "color"];
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { color, position } from 'styled-system';
import { Flex } from '../Flex';
import { Typography } from '../Typography';
import { CounterBadgeSize, CounterBadgeVariant } from './CounterBadge.decl';
import { makeBadgePosition, makeBadgeSize, makeBadgeVariant, TYPOGRAHY_VARIANTS, TYPOGRAHY_PADDINGS, shouldForwardProp } from './utils';
var BadgeIndicator = styled.div.withConfig({
  shouldForwardProp: shouldForwardProp
}).withConfig({
  displayName: "CounterBadge__BadgeIndicator",
  componentId: "sc-1xfirws-0"
})(["display:inline-flex;align-items:center;justify-content:center;overflow:hidden;", " ", " ", " ", "  ", ""], makeBadgePosition, makeBadgeVariant, makeBadgeSize, position, color);
export var CounterBadge = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? CounterBadgeSize.REGULAR : _ref$size,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? CounterBadgeVariant.DESTRUCTIVE : _ref$variant,
      count = _ref.count,
      _ref$maxCount = _ref.maxCount,
      maxCount = _ref$maxCount === void 0 ? 99 : _ref$maxCount,
      color = _ref.color,
      otherStyleProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  /**
   * Don't show the counter badge if the count is set to 0
   */
  if (count === 0) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children);
  }

  return /*#__PURE__*/React.createElement(Flex, {
    display: "inline-flex",
    position: "relative",
    ref: ref
  }, children, /*#__PURE__*/React.createElement(BadgeIndicator, _extends({
    size: size,
    variant: variant,
    hasChildren: !!children,
    color: color // This one has issues.

  }, otherStyleProps), /*#__PURE__*/React.createElement(Typography, {
    variant: TYPOGRAHY_VARIANTS[size],
    px: count >= 10 ? TYPOGRAHY_PADDINGS[size] : 0,
    userSelect: "none"
  }, count <= maxCount ? count : maxCount + "+")));
});