import React from 'react';
import { ButtonCustomComponent } from '.';
declare const _default: <T extends React.FunctionComponent<any> | React.ComponentClass<any, any> | React.ForwardRefExoticComponent<any> | undefined = undefined>(props: Pick<T extends ButtonCustomComponent ? React.ComponentProps<T> : React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, Exclude<keyof (T extends ButtonCustomComponent ? React.ComponentProps<T> : React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>), "ref">> & {
    size?: "small" | "large" | "regular" | "xSmall" | undefined;
    variant?: "black" | "white" | "primary" | "destructive" | "instructive" | "warning" | "ghost" | "darkGhost" | undefined;
    disabled?: boolean | undefined;
    mode?: "link" | "fill" | "outline" | undefined;
    direction?: "vertical" | "horizontal" | undefined;
    space?: 0 | 1 | 2 | 3 | 4 | 8 | "s" | 5 | 6 | 7 | 9 | "m" | "l" | "xxxs" | "xxs" | "xs" | "xl" | "xxl" | "xxxl" | undefined;
    block?: boolean | undefined;
    shadow?: boolean | undefined;
    onClick?: ((event: React.SyntheticEvent<Element, Event>) => void) | undefined;
    readOnly?: boolean | undefined;
    children?: React.ReactNode;
    component?: T | undefined;
} & React.RefAttributes<HTMLElement>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | null;
export default _default;
