import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["size", "variant", "mode", "direction", "space", "disabled", "readOnly", "block", "shadow", "onClick", "children", "onMouseUp", "component"];
import React, { useCallback } from 'react';
import styled from 'styled-components';
import { fromTheme } from '../../utils';
import { genericForwardRef } from '../../utils/genericForwardRef';
import { useFormContext } from '../Form/context';
import { Spacer, SpaceVariant } from '../Spacer';
import { ButtonVariant, ButtonMode, ButtonDirection, ButtonSize } from './Button.decl';
import { makeButtonVariant, makeButtonShadow, makeButtonTypography, makeButtonSize, shouldForwardProp } from './utils';
var ButtonContainer = styled(Spacer).withConfig({
  shouldForwardProp: shouldForwardProp
}).withConfig({
  displayName: "Button__ButtonContainer",
  componentId: "sc-18uw1de-0"
})(["position:relative;white-space:nowrap;text-align:center;background-image:none;border:1px solid transparent;touch-action:manipulation;font-family:", ";border-radius:", ";cursor:", ";user-select:none;transition:all 200ms ease-in-out;", " ", " ", " ", " &,:not([disabled]):active,:active:focus{outline:0;}"], fromTheme('typography.fontFamily'), fromTheme('radii.8'), function (_ref) {
  var readOnly = _ref.readOnly;
  return readOnly ? 'normal' : 'pointer';
}, makeButtonVariant, makeButtonShadow, makeButtonTypography, makeButtonSize);

function Button(_ref2, ref) {
  var size = _ref2.size,
      _ref2$variant = _ref2.variant,
      variant = _ref2$variant === void 0 ? ButtonVariant.PRIMARY : _ref2$variant,
      _ref2$mode = _ref2.mode,
      mode = _ref2$mode === void 0 ? ButtonMode.FILL : _ref2$mode,
      _ref2$direction = _ref2.direction,
      direction = _ref2$direction === void 0 ? ButtonDirection.HORIZONTAL : _ref2$direction,
      _ref2$space = _ref2.space,
      space = _ref2$space === void 0 ? SpaceVariant.XXS : _ref2$space,
      _ref2$disabled = _ref2.disabled,
      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
      _ref2$readOnly = _ref2.readOnly,
      readOnly = _ref2$readOnly === void 0 ? false : _ref2$readOnly,
      _ref2$block = _ref2.block,
      block = _ref2$block === void 0 ? false : _ref2$block,
      _ref2$shadow = _ref2.shadow,
      shadow = _ref2$shadow === void 0 ? false : _ref2$shadow,
      onClick = _ref2.onClick,
      children = _ref2.children,
      onMouseUp = _ref2.onMouseUp,
      component = _ref2.component,
      otherStyleProps = _objectWithoutPropertiesLoose(_ref2, _excluded);

  var formContext = useFormContext();
  var buttonSize = size || (formContext == null ? void 0 : formContext.size) || ButtonSize.REGULAR;
  var as = component != null ? component : 'button';
  /**
   * When the user clicks on the button and releases the mouse button
   * the button stays on the active state (on Chrome, and some other browsers)
   * which is not the expected behavior. In this case, when the mouse button is up
   * we need to make the button lose focus by calling currentTarget.blur()
   */

  var handleMouseUp = useCallback(function (event) {
    event.currentTarget.blur();
    onMouseUp == null ? void 0 : onMouseUp(event);
  }, [onMouseUp]);
  return /*#__PURE__*/React.createElement(ButtonContainer, _extends({
    type: as === 'button' ? 'button' : undefined,
    ref: ref,
    buttonSize: buttonSize,
    variant: variant,
    mode: mode,
    disabled: disabled,
    readOnly: readOnly,
    shadow: shadow,
    onClick: readOnly ? undefined : onClick,
    space: space,
    alignItems: "center",
    justifyContent: "center",
    direction: direction,
    fluid: block,
    onMouseUp: handleMouseUp,
    forwardedAs: as
  }, otherStyleProps), children);
}

export default genericForwardRef(Button);