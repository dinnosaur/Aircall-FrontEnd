import { ReactEventHandler, ReactNode } from 'react';
import { SpacerDirection, SpacerDirections, SpacerProps, SpaceVariants } from '../Spacer';
export declare type ButtonCustomComponent = React.ComponentType<any> | React.ForwardRefExoticComponent<any>;
export declare type ButtonProps<T extends ButtonCustomComponent | undefined = undefined> = Omit<T extends ButtonCustomComponent ? React.ComponentProps<T> : React.ComponentProps<'button'>, 'ref'> & {
    /**
     * Defines the size of the button.
     *
     * Possible values: `xSmall` | `small` | `regular` | `large`
     **/
    size?: ButtonSizes;
    /**
     * Defines the color or the variant of the button.
     *
     * Possible values: `primary` | `destructive` | `instructive` | `warning` | `ghost` | `darkGhost`
     */
    variant?: ButtonVariants;
    /**
     * Set disabled state of the button
     */
    disabled?: boolean;
    /**
     * Defines the mode of the button which changes how the background and the border and displayed.
     */
    mode?: ButtonModes;
    /**
     * Defines the content direction.
     *
     * Possible values: `vertical` | `horizontal`
     */
    direction?: ButtonDirections;
    /**
     * Defines the gap between the elements inside of the button.
     */
    space?: ButtonSpaces;
    /**
     * If true, the button will have the same width as its parent's
     */
    block?: boolean;
    /**
     * Whether or not to show a shadow
     */
    shadow?: boolean;
    /**
     * Set event handler for the "click" event
     */
    onClick?: ReactEventHandler;
    /**
     * Whether or not the button is on readOnly mode.
     */
    readOnly?: boolean;
    children?: ReactNode;
    /**
     * Allow to customize the component used to render the button.
     */
    component?: T;
};
export interface ButtonContainerProps extends SpacerProps {
    buttonSize: ButtonSizes;
    variant: ButtonVariants;
    mode: ButtonModes;
    disabled?: boolean;
    block?: boolean;
    shadow?: boolean;
    readOnly?: boolean;
    onClick?: ReactEventHandler;
}
export declare const ButtonSize: {
    readonly SMALL: "small";
    readonly REGULAR: "regular";
    readonly LARGE: "large";
    readonly X_SMALL: "xSmall";
};
export declare type ButtonSizes = typeof ButtonSize[keyof typeof ButtonSize];
export declare enum ButtonVariant {
    PRIMARY = "primary",
    DESTRUCTIVE = "destructive",
    INSTRUCTIVE = "instructive",
    WARNING = "warning",
    GHOST = "ghost",
    DARK_GHOST = "darkGhost",
    BLACK = "black",
    WHITE = "white"
}
export declare type ButtonVariants = 'primary' | 'destructive' | 'instructive' | 'warning' | 'ghost' | 'darkGhost' | 'black' | 'white';
export declare enum ButtonMode {
    FILL = "fill",
    OUTLINE = "outline",
    LINK = "link"
}
export declare type ButtonModes = 'fill' | 'outline' | 'link';
export declare type ButtonDirections = SpacerDirections;
export declare type ButtonSpaces = SpaceVariants;
export { SpacerDirection as ButtonDirection };
