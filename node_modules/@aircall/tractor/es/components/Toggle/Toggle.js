import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["checked", "defaultChecked", "disabled", "size", "onChange", "validationStatus", "name", "id"];
import React, { useCallback, useState, forwardRef } from 'react';
import styled from 'styled-components';
import { ComponentSize } from '../../declarations/common.decl';
import { FormItemStatus } from '../Form';
import { useFormContext, useFormItemContext } from '../Form/context';
import { makeToggleSize, makeToggleColor } from './utils';
var ToggleContainer = styled.label.withConfig({
  displayName: "Toggle__ToggleContainer",
  componentId: "sc-bbp8pj-0"
})(["position:relative;display:block;user-select:none;box-sizing:border-box;cursor:", ";border:1px solid transparent;", " ", " transition:background 300ms ease-in-out;input{display:none;}&::after{display:block;content:'';position:absolute;bottom:0;top:0;margin:auto;border-radius:50%;transition:left 230ms ease-in-out;}"], function (_ref) {
  var disabled = _ref.disabled;
  return disabled ? 'not-allowed' : 'pointer';
}, makeToggleSize, makeToggleColor);
export var Toggle = /*#__PURE__*/forwardRef(function (_ref2, ref) {
  var checked = _ref2.checked,
      _ref2$defaultChecked = _ref2.defaultChecked,
      defaultChecked = _ref2$defaultChecked === void 0 ? false : _ref2$defaultChecked,
      _ref2$disabled = _ref2.disabled,
      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
      size = _ref2.size,
      onChange = _ref2.onChange,
      validationStatus = _ref2.validationStatus,
      name = _ref2.name,
      id = _ref2.id,
      otherStyleProps = _objectWithoutPropertiesLoose(_ref2, _excluded);

  var formContext = useFormContext();
  var formItemContext = useFormItemContext();
  var inputSize = size || (formContext == null ? void 0 : formContext.size) || ComponentSize.REGULAR;
  var inputStatus = validationStatus || (formItemContext == null ? void 0 : formItemContext.validationStatus);
  var error = inputStatus === FormItemStatus.ERROR;

  var _useState = useState(defaultChecked),
      innerCheck = _useState[0],
      setInnerCheck = _useState[1];

  var handleOnChange = useCallback(function (event) {
    if (!disabled) {
      var _checked = event.target.checked;
      setInnerCheck(_checked);
      onChange == null ? void 0 : onChange(_checked, event);
    }
  }, [disabled, onChange]);
  var checkboxCheck = checked !== undefined ? checked : innerCheck;
  return /*#__PURE__*/React.createElement(ToggleContainer, _extends({
    checked: checkboxCheck,
    disabled: disabled,
    size: inputSize,
    error: error,
    htmlFor: id
  }, otherStyleProps), /*#__PURE__*/React.createElement("input", {
    ref: ref,
    "data-test": "toggle",
    type: "checkbox",
    checked: checkboxCheck,
    disabled: disabled,
    onChange: handleOnChange,
    name: name,
    id: id
  }));
});