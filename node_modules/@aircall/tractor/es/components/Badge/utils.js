var _ICON_SIZES;

import { BadgeSize } from './Badge.decl';
export var makeBadgeVariant = function makeBadgeVariant(_ref) {
  var variant = _ref.variant,
      theme = _ref.theme;
  var variants = {
    primary: {
      backgroundColor: theme.colors.primary.base,
      textColor: theme.colors.base.white
    },
    destructive: {
      backgroundColor: theme.colors.red.base,
      textColor: theme.colors.base.white
    },
    instructive: {
      backgroundColor: theme.colors.blue.base,
      textColor: theme.colors.base.white
    },
    warning: {
      backgroundColor: theme.colors.yellow.base,
      textColor: theme.colors.secondary.base
    },
    "default": {
      backgroundColor: theme.colors.grey.dark,
      textColor: theme.colors.base.white
    }
  };
  var _variants$variant = variants[variant],
      backgroundColor = _variants$variant.backgroundColor,
      textColor = _variants$variant.textColor;
  return {
    backgroundColor: backgroundColor,
    color: textColor,
    svg: {
      fill: textColor
    }
  };
};
export var makeBadgeSize = function makeBadgeSize(_ref2) {
  var size = _ref2.size,
      theme = _ref2.theme;
  return theme.badge.sizes[size];
};
export var ICON_SIZES = (_ICON_SIZES = {}, _ICON_SIZES[BadgeSize.X_SMALL] = '0', _ICON_SIZES[BadgeSize.SMALL] = '6px', _ICON_SIZES[BadgeSize.MEDIUM] = '8px', _ICON_SIZES[BadgeSize.LARGE] = '12px', _ICON_SIZES[BadgeSize.X_LARGE] = '14px', _ICON_SIZES);
export var makeBadgeIconSize = function makeBadgeIconSize(_ref3) {
  var size = _ref3.size;
  var iconSize = ICON_SIZES[size];
  return {
    svg: {
      width: iconSize,
      height: iconSize
    }
  };
};
export var makeBadgePosition = function makeBadgePosition(_ref4) {
  var size = _ref4.size,
      hasChildren = _ref4.hasChildren;

  if (!hasChildren) {
    return;
  }

  return {
    position: 'absolute',
    right: '-4px',
    top: '-4px'
  };
}; // Props that should not be forwarded to the HTML DOM elements

export var shouldForwardProp = function shouldForwardProp(prop, defaultValidationFn) {
  return !['color'].includes(prop) && defaultValidationFn(prop);
};