import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
var _excluded = ["children", "alignItems", "justifyContent", "flexWrap", "space", "wrapSpace", "direction", "reverse", "fluid", "width", "itemsSized"];
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { space } from 'styled-system';
import { mapValues } from '../../utils';
import { Box } from '../Box';
import { Flex } from '../Flex';
import { SpacerDirection } from './Spacer.decl';
import { getChildStyle, shouldForwardProp } from './utils';
var Container = styled(Flex).withConfig({
  shouldForwardProp: shouldForwardProp,
  displayName: "Spacer__Container",
  componentId: "sc-1d5auvu-0"
})(function (_ref) {
  var theme = _ref.theme,
      direction = _ref.direction,
      reverse = _ref.reverse,
      flexWrap = _ref.flexWrap,
      wrapSpace = _ref.wrapSpace;
  var flexDirection = direction === SpacerDirection.VERTICAL ? 'column' : 'row';
  var styleProps = {
    verticalAlign: 'top'
  };
  styleProps['flexDirection'] = reverse ? flexDirection + "-reverse" : flexDirection; // Remove the size added by the last row

  if (flexWrap && direction === SpacerDirection.HORIZONTAL) {
    /**
     * Support responsive wrapSpace value.
     * wrapSpace={{ xs: 's', lg: 'xs' }}
     */
    var result = space({
      mb: wrapSpace,
      theme: theme
    });
    styleProps = _extends({}, styleProps, mapValues(result, function (value) {
      if (typeof value === 'object') {
        var marginBottom = value.marginBottom;
        return {
          marginBottom: marginBottom * -1
        };
      }

      return value * -1;
    }));
  }

  return styleProps;
});
export var Spacer = /*#__PURE__*/forwardRef(function (_ref2, ref) {
  var children = _ref2.children,
      alignItems = _ref2.alignItems,
      justifyContent = _ref2.justifyContent,
      flexWrap = _ref2.flexWrap,
      _ref2$space = _ref2.space,
      space = _ref2$space === void 0 ? 'xxxs' : _ref2$space,
      _ref2$wrapSpace = _ref2.wrapSpace,
      wrapSpace = _ref2$wrapSpace === void 0 ? space : _ref2$wrapSpace,
      _ref2$direction = _ref2.direction,
      direction = _ref2$direction === void 0 ? 'horizontal' : _ref2$direction,
      _ref2$reverse = _ref2.reverse,
      reverse = _ref2$reverse === void 0 ? false : _ref2$reverse,
      fluid = _ref2.fluid,
      width = _ref2.width,
      _ref2$itemsSized = _ref2.itemsSized,
      itemsSized = _ref2$itemsSized === void 0 ? 'auto' : _ref2$itemsSized,
      otherStyleProps = _objectWithoutPropertiesLoose(_ref2, _excluded);

  var validChildren = React.Children.toArray(children).filter(Boolean);
  return /*#__PURE__*/React.createElement(Container, _extends({
    display: "inline-flex",
    ref: ref,
    direction: direction,
    alignItems: alignItems,
    justifyContent: justifyContent,
    flexWrap: flexWrap,
    width: width != null ? width : fluid ? '100%' : undefined,
    reverse: reverse,
    wrapSpace: wrapSpace
  }, otherStyleProps), validChildren.map(function (child, childIdx) {
    return /*#__PURE__*/React.createElement(Box, _extends({
      key: childIdx
    }, getChildStyle({
      space: space,
      wrapSpace: wrapSpace,
      direction: direction,
      reverse: reverse,
      flexWrap: flexWrap,
      childIdx: childIdx,
      childrenCount: validChildren.length,
      itemsSized: itemsSized
    })), child);
  }));
});
export default Spacer;