import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["size", "src", "icon", "disabled", "children", "mode", "variant", "onClick", "borderless", "color"];
import React, { useEffect, useState, forwardRef } from 'react';
import styled from 'styled-components';
import { color as colorFn } from 'styled-system';
import { makeBackgroundVariant, makeTextColorVariant } from '../../utils/styles';
import { Flex } from '../Flex';
import { AvatarSize } from './Avatar.decl';
import { makeAvatarSize, makeAvatarIconSize, makeAvatarColor, shouldForwardProp } from './utils';
var AvatarContainer = styled(Flex).withConfig({
  shouldForwardProp: shouldForwardProp
}).withConfig({
  displayName: "Avatar__AvatarContainer",
  componentId: "sc-15mkrx3-0"
})(["position:relative;align-items:center;justify-content:center;flex-shrink:0;user-select:none;font-family:", ";clip-path:url(#svgPath);", " ", " ", " ", " &::after{content:'';position:absolute;background:", ";clip-path:url(#svgPath);top:1px;left:1px;right:1px;bottom:1px;z-index:-1;", " ", "}", ""], function (_ref) {
  var theme = _ref.theme;
  return theme.typography.fontFamily;
}, makeAvatarSize, makeAvatarIconSize, makeAvatarColor, makeTextColorVariant, function (_ref2) {
  var theme = _ref2.theme;
  return theme.colors.base.white;
}, makeBackgroundVariant, colorFn, colorFn);
var AvatarImg = styled.img.withConfig({
  displayName: "Avatar__AvatarImg",
  componentId: "sc-15mkrx3-1"
})(["position:absolute;width:100%;height:100%;object-fit:cover;"]);
var Avatar = /*#__PURE__*/forwardRef(function (_ref3, ref) {
  var _ref3$size = _ref3.size,
      size = _ref3$size === void 0 ? AvatarSize.MEDIUM : _ref3$size,
      src = _ref3.src,
      icon = _ref3.icon,
      _ref3$disabled = _ref3.disabled,
      disabled = _ref3$disabled === void 0 ? false : _ref3$disabled,
      children = _ref3.children,
      _ref3$mode = _ref3.mode,
      mode = _ref3$mode === void 0 ? 'light' : _ref3$mode,
      variant = _ref3.variant,
      onClick = _ref3.onClick,
      _ref3$borderless = _ref3.borderless,
      borderless = _ref3$borderless === void 0 ? false : _ref3$borderless,
      color = _ref3.color,
      otherStyleProps = _objectWithoutPropertiesLoose(_ref3, _excluded);

  var _useState = useState(false),
      imgLoadError = _useState[0],
      setImgLoadError = _useState[1];

  var clickable = !!onClick;
  useEffect(function () {
    setImgLoadError(false);
  }, [src]);
  var isValidSrc = src && !imgLoadError;
  return /*#__PURE__*/React.createElement(AvatarContainer, _extends({
    ref: ref,
    "data-test": "avatar",
    avatarSize: size,
    disabled: disabled,
    mode: mode,
    variant: variant,
    color: color,
    hasImage: !!isValidSrc,
    clickable: clickable,
    borderless: borderless,
    onClick: onClick
  }, otherStyleProps), isValidSrc ? /*#__PURE__*/React.createElement(AvatarImg, {
    src: src,
    onError: function onError() {
      return setImgLoadError(true);
    },
    disabled: disabled
  }) : icon || children);
});
export default Avatar;