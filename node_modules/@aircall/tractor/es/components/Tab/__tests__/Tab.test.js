import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import React from 'react';
import { fireEvent, render, screen, waitFor } from '@testing-library/react';
import { Tab } from '..';
describe('Tab', function () {
  it('should switch from one tab to another and manage the active tab state outside Tab component', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var id, _render, rerender;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            id = 1;
            _render = render( /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Tab.Container, {
              activeTabId: id,
              onChange: function onChange(i) {
                return id = i;
              }
            }, /*#__PURE__*/React.createElement(Tab.Menu, null, /*#__PURE__*/React.createElement(Tab.MenuItem, {
              id: 1
            }, "Tab 1"), /*#__PURE__*/React.createElement(Tab.MenuItem, {
              id: 2
            }, "Tab 2")), /*#__PURE__*/React.createElement(Tab.Content, null, /*#__PURE__*/React.createElement(Tab.Item, {
              id: 1
            }, "Tab 1 content"), /*#__PURE__*/React.createElement(Tab.Item, {
              id: 2
            }, "Tab 2 content"))))), rerender = _render.rerender;
            expect(screen.getByText('Tab 1 content')).toBeInTheDocument();
            expect(screen.queryByText('Tab 2 content')).not.toBeInTheDocument(); // Click on a tab button

            fireEvent.click(screen.getByText('Tab 2')); // rerender the component

            rerender( /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Tab.Container, {
              activeTabId: id,
              onChange: function onChange(i) {
                return id = i;
              }
            }, /*#__PURE__*/React.createElement(Tab.Menu, null, /*#__PURE__*/React.createElement(Tab.MenuItem, {
              id: 1
            }, "Tab 1"), /*#__PURE__*/React.createElement(Tab.MenuItem, {
              id: 2
            }, "Tab 2")), /*#__PURE__*/React.createElement(Tab.Content, null, /*#__PURE__*/React.createElement(Tab.Item, {
              id: 1
            }, "Tab 1 content"), /*#__PURE__*/React.createElement(Tab.Item, {
              id: 2
            }, "Tab 2 content")))));
            _context.next = 8;
            return waitFor(function () {
              return expect(screen.queryByText('Tab 1 content')).not.toBeInTheDocument();
            });

          case 8:
            expect(screen.getByText('Tab 2 content')).toBeInTheDocument();

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('should switch from one tab to another and manage the active tab state inside Tab component', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            render( /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Tab.Container, {
              defaultActiveTabId: 1
            }, /*#__PURE__*/React.createElement(Tab.Menu, null, /*#__PURE__*/React.createElement(Tab.MenuItem, {
              id: 1
            }, "Tab 1"), /*#__PURE__*/React.createElement(Tab.MenuItem, {
              id: 2
            }, "Tab 2")), /*#__PURE__*/React.createElement(Tab.Content, null, /*#__PURE__*/React.createElement(Tab.Item, {
              id: 1
            }, "Tab 1 content"), /*#__PURE__*/React.createElement(Tab.Item, {
              id: 2
            }, "Tab 2 content")))));
            expect(screen.getByText('Tab 1 content')).toBeInTheDocument();
            expect(screen.queryByText('Tab 2 content')).not.toBeInTheDocument(); // Click on a tab button

            fireEvent.click(screen.getByText('Tab 2'));
            _context2.next = 6;
            return waitFor(function () {
              return expect(screen.queryByText('Tab 1 content')).not.toBeInTheDocument();
            });

          case 6:
            expect(screen.getByText('Tab 2 content')).toBeInTheDocument();

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('should be able to take a menu variant prop', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var id;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            id = 1;
            render( /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Tab.Container, {
              activeTabId: id,
              onChange: function onChange(i) {
                return id = i;
              }
            }, /*#__PURE__*/React.createElement(Tab.Menu, {
              variant: "evenly-sized"
            }, /*#__PURE__*/React.createElement(Tab.MenuItem, {
              id: 1
            }, "Tab 1"), /*#__PURE__*/React.createElement(Tab.MenuItem, {
              id: 2
            }, "Tab 2")), /*#__PURE__*/React.createElement(Tab.Content, null, /*#__PURE__*/React.createElement(Tab.Item, {
              id: 1
            }, "Tab 1 content"), /*#__PURE__*/React.createElement(Tab.Item, {
              id: 2
            }, "Tab 2 content")))));
            expect(screen.getByTestId('tab-menu')).toBeInTheDocument();

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('should be able to take a menu space prop', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var id;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            id = 1;
            render( /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Tab.Container, {
              activeTabId: id,
              onChange: function onChange(i) {
                return id = i;
              }
            }, /*#__PURE__*/React.createElement(Tab.Menu, {
              space: "m"
            }, /*#__PURE__*/React.createElement(Tab.MenuItem, {
              id: 1
            }, "Tab 1"), /*#__PURE__*/React.createElement(Tab.MenuItem, {
              id: 2
            }, "Tab 2")), /*#__PURE__*/React.createElement(Tab.Content, null, /*#__PURE__*/React.createElement(Tab.Item, {
              id: 1
            }, "Tab 1 content"), /*#__PURE__*/React.createElement(Tab.Item, {
              id: 2
            }, "Tab 2 content")))));
            expect(screen.getByTestId('tab-menu')).toBeInTheDocument();

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
  it('should be able to take a menu item activeTabColor prop', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
    var id;
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            id = 1;
            render( /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Tab.Container, {
              activeTabId: id,
              onChange: function onChange(i) {
                return id = i;
              }
            }, /*#__PURE__*/React.createElement(Tab.Menu, null, /*#__PURE__*/React.createElement(Tab.MenuItem, {
              activeTabColor: "green",
              id: 1
            }, "Tab 1"), /*#__PURE__*/React.createElement(Tab.MenuItem, {
              id: 2
            }, "Tab 2")), /*#__PURE__*/React.createElement(Tab.Content, null, /*#__PURE__*/React.createElement(Tab.Item, {
              id: 1
            }, "Tab 1 content"), /*#__PURE__*/React.createElement(Tab.Item, {
              id: 2
            }, "Tab 2 content")))));
            expect(screen.getByTestId('tab-menu')).toBeInTheDocument();

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  })));
});