import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["children", "activeTabColor", "id"];
import React, { forwardRef, memo, useContext, useCallback } from 'react';
import styled from 'styled-components';
import { system } from 'styled-system';
import { Flex } from '..';
import { TabContext } from './context';
var activeTabColor = system({
  activeTabColor: {
    property: 'color',
    scale: 'colors'
  }
});
var activeTabUnderlineColor = system({
  activeTabColor: {
    property: 'background',
    scale: 'colors'
  }
});
var TabMenuItemWrapper = styled(Flex).attrs({
  py: 's'
}).withConfig({
  displayName: "TabMenuItem__TabMenuItemWrapper",
  componentId: "sc-1428gl2-0"
})(["", " position:relative;flex-shrink:0;align-items:center;justify-content:center;cursor:pointer;", ";transition:font-weight 0.25s ease;&::after{content:'';position:absolute;right:0;bottom:0;left:0;height:4px;border-radius:", ";opacity:", ";transition:opacity 0.25s ease;", ";}"], activeTabColor, function (_ref) {
  var isActive = _ref.isActive,
      theme = _ref.theme;
  return isActive ? theme.typography.variants.body : theme.typography.variants.body2;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.radii[8] + " " + theme.radii[8] + " 0 0";
}, function (_ref3) {
  var isActive = _ref3.isActive;
  return isActive ? 1 : 0;
}, activeTabUnderlineColor);
export var TabMenuItem = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (_ref4, ref) {
  var children = _ref4.children,
      _ref4$activeTabColor = _ref4.activeTabColor,
      activeTabColor = _ref4$activeTabColor === void 0 ? 'text.base' : _ref4$activeTabColor,
      id = _ref4.id,
      styleProps = _objectWithoutPropertiesLoose(_ref4, _excluded);

  var _useContext = useContext(TabContext),
      activeTabId = _useContext.activeTabId,
      onTabClick = _useContext.onTabClick;

  var isActive = activeTabId === id;
  var handleClick = useCallback(function () {
    onTabClick(id);
  }, [onTabClick, id]);
  return /*#__PURE__*/React.createElement(TabMenuItemWrapper, _extends({
    ref: ref,
    isActive: isActive,
    onClick: handleClick,
    activeTabColor: isActive ? activeTabColor : undefined,
    "data-test": "tab-menu-item-" + id
  }, styleProps), children);
}));
TabMenuItem.displayName = 'Tab.MenuItem';