import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["defaultActiveTabId", "activeTabId", "onChange", "children"];
import React, { forwardRef, memo, useCallback, useState } from 'react';
import { invariant } from '../../utils/invariant';
import { Flex } from '../Flex';
import { TabContext } from './context';
export var TabContainer = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (_ref, ref) {
  var defaultActiveTabId = _ref.defaultActiveTabId,
      activeTabId = _ref.activeTabId,
      onChange = _ref.onChange,
      children = _ref.children,
      styleProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  var controlled = typeof activeTabId !== 'undefined';
  var uncontrolled = typeof defaultActiveTabId !== 'undefined';
  invariant(!(controlled && uncontrolled), "Tab component can be either controlled or uncontrolled at a time: use either 'defaultActiveTabId' or 'activeTabId'.");

  var _useState = useState(defaultActiveTabId),
      internalActiveTabId = _useState[0],
      setInternalActiveTabId = _useState[1];

  var handleTabClick = useCallback(function (clickedTab) {
    setInternalActiveTabId(clickedTab);
    onChange == null ? void 0 : onChange(clickedTab);
  }, [setInternalActiveTabId, onChange]);
  return /*#__PURE__*/React.createElement(TabContext.Provider, {
    value: {
      activeTabId: activeTabId != null ? activeTabId : internalActiveTabId,
      onTabClick: handleTabClick
    }
  }, /*#__PURE__*/React.createElement(Flex, _extends({
    ref: ref,
    height: "100%",
    alignItems: "stretch",
    flexDirection: "column",
    "data-test": "tab-container"
  }, styleProps), children));
}));
TabContainer.displayName = 'Tab.Container';