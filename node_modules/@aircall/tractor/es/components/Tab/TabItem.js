import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["id", "children"];
import React, { forwardRef, memo, useContext } from 'react';
import { AnimatePresence, motion } from 'framer-motion';
import styled from 'styled-components';
import { fromTheme } from '../../utils';
import { TabContext } from './context';
var TabItemWrapper = styled(motion.div).withConfig({
  displayName: "TabItem__TabItemWrapper",
  componentId: "sc-1av42ld-0"
})(["position:absolute;z-index:0;top:0;right:0;bottom:0;left:0;overflow:auto;padding:", "px;background:", ";"], fromTheme('space.l'), fromTheme('colors.grey.lighter'));
var animationVariants = {
  entry: {
    opacity: 1,
    transition: {
      duration: 0.25
    }
  },
  exit: {
    opacity: 0,
    transition: {
      duration: 0.25
    }
  }
};
export var TabItem = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (_ref, ref) {
  var id = _ref.id,
      children = _ref.children,
      styleProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  var _useContext = useContext(TabContext),
      activeTabId = _useContext.activeTabId;

  var isActive = activeTabId === id;
  return /*#__PURE__*/React.createElement(AnimatePresence, null, isActive && /*#__PURE__*/React.createElement(TabItemWrapper, _extends({
    ref: ref,
    variants: animationVariants,
    initial: "exit",
    animate: "entry",
    exit: "exit",
    "data-test": "tab-item-" + id
  }, styleProps), children));
}));
TabItem.displayName = 'Tab.Item';