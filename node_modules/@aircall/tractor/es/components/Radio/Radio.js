import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["disabled", "size", "children", "value", "validationStatus"];
import React, { useCallback, forwardRef } from 'react';
import styled from 'styled-components';
import { ComponentSize } from '../../declarations/common.decl';
import { fromTheme } from '../../utils';
import { Flex } from '../Flex';
import { FormItemStatus } from '../Form';
import { Typography } from '../Typography';
import { useRadioContext } from './context';
import { makeRadioSize, makeRadioColor, makeRadioIndicatorColor, makeRadioIndicatorSize, shouldForwardProp } from './utils';
var RadioContainer = styled.div.withConfig({
  shouldForwardProp: shouldForwardProp
}).withConfig({
  displayName: "Radio__RadioContainer",
  componentId: "sc-u2rb7a-0"
})(["position:relative;display:block;box-sizing:border-box;cursor:", ";border:1px solid ", ";", " ", " transition:background 300ms,width 300ms,height 300ms;outline:0;user-select:none;border-radius:50%;input{display:none;}"], function (_ref) {
  var disabled = _ref.disabled;
  return disabled ? 'not-allowed' : 'pointer';
}, fromTheme('colors.grey.base'), makeRadioSize, makeRadioColor);
var RadioIndicator = styled.div.withConfig({
  shouldForwardProp: shouldForwardProp
}).withConfig({
  displayName: "Radio__RadioIndicator",
  componentId: "sc-u2rb7a-1"
})(["display:block;content:'';position:absolute;bottom:0;top:0;margin:auto;border-radius:50%;transition:transform 150ms;", " ", " ", ""], makeRadioIndicatorColor, makeRadioIndicatorSize, function (_ref2) {
  var checked = _ref2.checked;
  return "transform: " + (checked ? 'scale(1)' : 'scale(0)') + ";";
});
export var Radio = /*#__PURE__*/forwardRef(function (_ref3, ref) {
  var _ref4, _ref5;

  var disabled = _ref3.disabled,
      size = _ref3.size,
      children = _ref3.children,
      value = _ref3.value,
      validationStatus = _ref3.validationStatus,
      otherStyleProps = _objectWithoutPropertiesLoose(_ref3, _excluded);

  var radioGroupProps = useRadioContext();
  var checkedValue = radioGroupProps.checkedValue;
  var checkboxCheck = checkedValue === value;
  var radioSize = (_ref4 = size != null ? size : radioGroupProps.size) != null ? _ref4 : ComponentSize.REGULAR;
  var radioDisabled = (_ref5 = disabled != null ? disabled : radioGroupProps.disabled) != null ? _ref5 : false;
  var inputStatus = validationStatus != null ? validationStatus : radioGroupProps.validationStatus;
  var error = inputStatus === FormItemStatus.ERROR;
  var handleOnChange = useCallback(function (event) {
    if (radioDisabled) {
      return;
    }

    radioGroupProps.onChange(value, event);
  }, [value, radioDisabled, radioGroupProps]);
  return /*#__PURE__*/React.createElement(Flex, {
    cursor: radioDisabled ? undefined : 'pointer',
    alignItems: "center",
    as: "label"
  }, /*#__PURE__*/React.createElement(RadioContainer, _extends({
    checked: checkboxCheck,
    disabled: radioDisabled,
    size: radioSize,
    error: error
  }, otherStyleProps), /*#__PURE__*/React.createElement("input", {
    ref: ref,
    "data-test": "radio",
    type: "radio",
    value: value,
    "aria-checked": checkboxCheck,
    checked: checkboxCheck,
    disabled: radioDisabled,
    onChange: handleOnChange
  }), /*#__PURE__*/React.createElement(RadioIndicator, {
    checked: checkboxCheck,
    disabled: radioDisabled,
    size: radioSize,
    error: error
  })), /*#__PURE__*/React.createElement(Typography, {
    ml: "xxs",
    variant: "body2",
    color: "text.base",
    userSelect: "none"
  }, children));
});