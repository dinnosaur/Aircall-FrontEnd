import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["children", "defaultValue", "value", "disabled", "validationStatus", "onChange", "size", "space"];
import React, { useCallback, useState, forwardRef } from 'react';
import { ComponentSize } from '../../declarations/common.decl';
import { useFormContext, useFormItemContext } from '../Form/context';
import { Spacer, SpaceVariant } from '../Spacer';
import { RadioContext } from './context';
export var RadioGroup = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      defaultValue = _ref.defaultValue,
      value = _ref.value,
      disabled = _ref.disabled,
      validationStatus = _ref.validationStatus,
      onChange = _ref.onChange,
      size = _ref.size,
      _ref$space = _ref.space,
      space = _ref$space === void 0 ? SpaceVariant.S : _ref$space,
      spacerProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  var formContext = useFormContext();
  var formItemContext = useFormItemContext();

  var _useState = useState(defaultValue),
      innerCheck = _useState[0],
      setInnerCheck = _useState[1];

  var radioSize = size || (formContext == null ? void 0 : formContext.size) || ComponentSize.REGULAR;
  var inputStatus = validationStatus || (formItemContext == null ? void 0 : formItemContext.validationStatus);
  /**
   * Use the "controlled" version over the "uncontrolled" if provided
   */

  var checkedValue = value !== undefined ? value : innerCheck;
  var handleOnChange = useCallback(function (value, event) {
    if (disabled) {
      return;
    }

    setInnerCheck(value);
    onChange == null ? void 0 : onChange(value, event);
  }, [disabled, onChange]);
  return /*#__PURE__*/React.createElement(RadioContext.Provider, {
    value: {
      checkedValue: checkedValue,
      onChange: handleOnChange,
      size: radioSize,
      disabled: disabled,
      validationStatus: inputStatus
    }
  }, /*#__PURE__*/React.createElement(Spacer, _extends({
    ref: ref,
    space: space
  }, spacerProps), children));
});