import _extends from "@babel/runtime/helpers/esm/extends";
import React, { forwardRef, useEffect, useState } from 'react';
import styled from 'styled-components';
import { color } from 'styled-system';
import { Grid } from '../Grid';
import { createVolumeAnalyserData, PollVolumeClass } from './utils';
var GaugeIndicator = styled.span.withConfig({
  displayName: "Gauge__GaugeIndicator",
  componentId: "sc-13cs6oa-0"
})(["", ";border-radius:8px;display:block;height:12px;transition:background-color 0.2s ease-in-out;"], color);
var Gauge = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var value = _ref.value,
      _ref$gauges = _ref.gauges,
      gauges = _ref$gauges === void 0 ? 8 : _ref$gauges;
  var gaugesArray = Array.from(Array(gauges).keys()); // Just make n f**n gauges.

  return /*#__PURE__*/React.createElement(Grid, {
    ref: ref,
    width: "100%",
    gridColumnGap: "12px",
    gridTemplateColumns: "repeat(8, 1fr)",
    "data-test": "input-gauge"
  }, gaugesArray.map(function (_, index) {
    return /*#__PURE__*/React.createElement(GaugeIndicator, {
      key: index,
      bg: index < value ? 'primary.base' : 'grey.base'
    });
  }));
}); // Just for the story itself, because we need the mediaDevices from the navigator.

export var GaugeForStory = function GaugeForStory() {
  var _useState = useState(),
      selectedDevice = _useState[0],
      setSelectedDevice = _useState[1];

  var _useState2 = useState(),
      mediaStream = _useState2[0],
      setMediaStream = _useState2[1];

  var _useState3 = useState(0),
      volumeLevel = _useState3[0],
      setVolumeLevel = _useState3[1];

  var level = Math.trunc(volumeLevel * 16);
  useEffect(function () {
    if (!selectedDevice) {
      navigator.mediaDevices.enumerateDevices().then(function (devices) {
        // Find the (first) default device.
        var defaultDevice = devices.find(function (device) {
          return device.deviceId === 'default' && device.kind === 'audioinput';
        }); // Find the real default device using the first one's groupId.

        var selectedDevice = devices.find(function (device) {
          return defaultDevice && device.deviceId !== 'default' && device.groupId === defaultDevice.groupId && device.kind === 'audioinput';
        });
        setSelectedDevice(selectedDevice);
      });
    }
  }, [setSelectedDevice, selectedDevice]);
  useEffect(function () {
    if (!!selectedDevice) {
      var mediaConstraints = {
        audio: {
          deviceId: selectedDevice.deviceId
        }
      };
      navigator.mediaDevices.getUserMedia(_extends({}, mediaConstraints)).then(setMediaStream);
    }

    return function () {
      setMediaStream(undefined);
      setVolumeLevel(0);
    };
  }, [selectedDevice]);
  useEffect(function () {
    if (!mediaStream) {
      return;
    }

    var pollVolume = new PollVolumeClass();

    var _createVolumeAnalyser = createVolumeAnalyserData(mediaStream),
        audioContext = _createVolumeAnalyser.audioContext,
        mediaStreamSource = _createVolumeAnalyser.mediaStreamSource,
        analyserNode = _createVolumeAnalyser.analyserNode,
        analyserDataBuffer = _createVolumeAnalyser.analyserDataBuffer;

    pollVolume.pollVolume(analyserNode, analyserDataBuffer, setVolumeLevel);
    return function () {
      pollVolume.isPolling = false;
      mediaStreamSource.disconnect();
      mediaStream.getTracks().forEach(function (track) {
        return track.stop();
      });
      audioContext.close();
    };
  }, [mediaStream]);
  return /*#__PURE__*/React.createElement(Gauge, {
    value: level
  });
};
export default Gauge;