[{"/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/index.js":"1","/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/App.js":"2","/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/reportWebVitals.js":"3","/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/API.js":"4","/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/Components/CallList.js":"5","/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/AppStyling.js":"6","/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/Components/CallInformation.js":"7"},{"size":587,"mtime":1642691241038,"results":"8","hashOfConfig":"9"},{"size":2043,"mtime":1643305950844,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1642005316735,"results":"11","hashOfConfig":"9"},{"size":1351,"mtime":1643309446049,"results":"12","hashOfConfig":"9"},{"size":2038,"mtime":1643384354569,"results":"13","hashOfConfig":"9"},{"size":1364,"mtime":1643387743263,"results":"14","hashOfConfig":"9"},{"size":3025,"mtime":1643380135495,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"abfns9",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/index.js",[],["35","36"],"/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/App.js",["37"],"import './App.css';\nimport API from './API';\nimport { useEffect, useState } from 'react';\n\nimport CallList from './Components/CallList';\nimport CallInformation from './Components/CallInformation';\nimport AppStyling from './AppStyling';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Pusher from 'pusher-js';\n\nlet useStyles = makeStyles(AppStyling);\n\nfunction App() {\n  const [authToken, setAuthToken] = useState(false);\n  const [refreshToken, setRefreshToken] = useState(false);\n  const [call, setCall] = useState(false);\n\n  const classes = useStyles();\n  useEffect(() => {\n    API.authenticate()\n      .then(resp => resp.json())\n      .then(data => {\n        setAuthToken(data.access_token);\n        setRefreshToken(data.refresh_token);\n      });\n  }, []);\n\n  useEffect(() => {\n    setInterval(() => {\n      API.refreshAuthentication(refreshToken)\n        .then(resp => resp.json())\n        .then(data => {\n          setAuthToken(data.access_token);\n          setRefreshToken(data.refresh_token);\n        });\n    }, 540000);\n\n    var pusher = new Pusher('d44e3d910d38a928e0be', {\n      cluster: 'eu',\n      authEndpoint: 'https://frontend-test-api.aircall.io/pusher/auth',\n      auth: {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          username: 'Dinno',\n          password: 'crebdrug'\n        })\n      }\n    });\n\n    var channel = pusher.subscribe('private-aircall');\n\n    channel.bind('update-call', data => {\n      console.log(data);\n    });\n  }, [authToken]);\n\n  useEffect(() => {\n    console.log(authToken, 'hello');\n  });\n\n  return authToken ? (\n    <div className={classes.app}>\n      <h1 className={classes.title}>Aircall Calls</h1>\n      {call ? (\n        <CallInformation\n          setCall={call => setCall(call)}\n          token={authToken}\n          call={call}\n        />\n      ) : (\n        <CallList setCall={call => setCall(call)} token={authToken} />\n      )}\n    </div>\n  ) : (\n    <>{console.log('hello')}</>\n  );\n}\n\nexport default App;\n","/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/reportWebVitals.js",[],"/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/API.js",["38"],"const BASE_URL = 'https://frontend-test-api.aircall.io/';\n\nconst authenticate = () => {\n  const configurationObject = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    },\n    body: JSON.stringify({\n      username: 'Dinno',\n      password: 'crebdrug'\n    })\n  };\n\n  return fetch(BASE_URL + 'auth/login', configurationObject);\n};\n\nconst refreshAuthentication = refreshToken => {\n  const configurationObject = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      Authorization: `Bearer ${refreshToken}`\n    }\n  };\n\n  return fetch(BASE_URL + 'auth/refresh-token-v2', configurationObject);\n};\n\nconst getCalls = (authToken, offset) => {\n  // if statement for when displaying certain number of paqes\n  return fetch(BASE_URL + `calls?offset=${offset}&limit=7`, {\n    headers: { Authorization: `Bearer ${authToken}` }\n  });\n};\n\nconst archiveCall = (authToken, id) => {\n  const configurationObject = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      Authorization: `Bearer ${authToken}`\n    }\n  };\n\n  return fetch(BASE_URL + `calls/${id}/archive`, configurationObject);\n};\n\nexport default {\n  authenticate,\n  refreshAuthentication,\n  getCalls,\n  archiveCall\n};\n","/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/Components/CallList.js",["39"],"import API from '../API';\nimport { useEffect, useState } from 'react';\nimport {\n  Button,\n  Spacer,\n  CallFilled,\n  Typography,\n  Divider\n} from '@aircall/tractor';\n\nimport AppStyling from '../AppStyling';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Pagination from '@mui/material/Pagination';\n\nconst useStyles = makeStyles(AppStyling);\n\nconst CallList = ({ token, setCall }) => {\n  const classes = useStyles();\n  const [calls, setCalls] = useState([]);\n  const [page, setPage] = useState(0);\n\n  useEffect(() => {\n    API.getCalls(token, page)\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(data);\n        setCalls(data);\n      });\n  }, [page]);\n\n  return (\n    <>\n      <div className={classes.callListContainer}>\n        <Spacer space=\"s\" width=\"100% !important\" direction=\"vertical\">\n          {displayCalls(sortbyDate(calls.nodes), classes, setCall)}\n        </Spacer>\n      </div>\n      <Pagination\n        className={classes.pagination}\n        count={calls.totalCount - 1}\n        page={page + 1}\n        onChange={(event, value) => handlePage(event, value, setPage)}\n      />\n    </>\n  );\n};\n\nconst handlePage = (event, value, setPage) => {\n  setPage(parseInt(value) - 1);\n};\n\nconst displayCalls = (calls, classes, setCall) => {\n  console.log(calls);\n  if (calls !== undefined && calls.length > 1) {\n    return calls.map(call => {\n      return (\n        <>\n          <div className={classes.call}>\n            <Button onClick={() => setCall(call)}>\n              <CallFilled />\n              {call.from}\n            </Button>\n            <Divider className=\"divider\" orientation=\"vertical\" size=\"4px\" />\n            <Typography className=\"callDate\">\n              {call.created_at.slice(0, 19).replace('T', ' ')}\n            </Typography>\n          </div>\n        </>\n      );\n    });\n  }\n};\n\nconst sortbyDate = calls => {\n  if (calls !== undefined) {\n    return calls.sort(\n      (a, b) => Date.parse(b.created_at) - Date.parse(a.created_at)\n    );\n  }\n};\n\nexport default CallList;\n","/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/AppStyling.js",[],"/Users/dinnosivagnanam/Development/Aircall-FrontEnd/src/Components/CallInformation.js",["40","41"],"import API from '../API';\nimport { Divider, Typography, Spacer, Button } from '@aircall/tractor';\n\nimport AppStyling from '../AppStyling';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(AppStyling);\n\nconst CallInformation = ({ call, token, setCall }) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <div className={classes.callInformation}>\n        <Button\n          variant=\"darkGhost\"\n          onClick={() => setCall(false)}\n          className={classes.backButton}\n        >\n          {'<---'}\n        </Button>\n        <Spacer\n          space=\"xs\"\n          width=\"100% !important\"\n          direction=\"vertical\"\n          justifyItems=\"center\"\n          width=\"30vw\"\n        >\n          <h2>Call details:</h2>\n          <Typography>From: {call.from}</Typography>\n          <Divider className=\"divider\" orientation=\"horizontal\" size=\"2px\" />\n          <Typography>\n            Time: {call.created_at.slice(0, 19).replace('T', ' ')}\n          </Typography>\n          <Divider className=\"divider\" orientation=\"horizontal\" size=\"2px\" />\n          <Typography>Call Type: {call.call_type}</Typography>\n          <Divider className=\"divider\" orientation=\"horizontal\" size=\"2px\" />\n          <Typography>To: {call.to}</Typography>\n          <Divider className=\"divider\" orientation=\"horizontal\" size=\"2px\" />\n          <Typography>Via: {call.via}</Typography>\n          <Divider className=\"divider\" orientation=\"horizontal\" size=\"2px\" />\n          <Typography>Duration: {call.duration} Seconds</Typography>\n          <Divider className=\"divider\" orientation=\"horizontal\" size=\"2px\" />\n          <div className={classes.archives}>\n            <Typography>Archived: {call.is_archived ? 'yes' : 'no'}</Typography>\n            <Button\n              onClick={() => handleArchiveButton(setCall, token, call)}\n              className={classes.archiveButton}\n              variant=\"darkGhost\"\n            >\n              {call.is_archived ? 'Unarchive' : 'Archive'}\n            </Button>\n          </div>\n          <Divider className=\"divider\" orientation=\"horizontal\" size=\"2px\" />\n        </Spacer>\n      </div>\n      <div className={classes.callInformation}>\n        <h2>Notes:</h2>\n        <Spacer\n          space=\"xs\"\n          width=\"100% !important\"\n          direction=\"vertical\"\n          justifyItems=\"center\"\n          width=\"30vw\"\n        >\n          {displayNotes(call.notes)}\n        </Spacer>\n      </div>\n    </>\n  );\n};\n\nconst displayNotes = notes => {\n  console.log(notes.length, notes.length !== 0);\n  if (notes.length !== 0) {\n    return notes.map((note, index) => {\n      return (\n        <Typography>\n          {index + 1}. {note.content}{' '}\n        </Typography>\n      );\n    });\n  } else {\n    return <Typography>No notes added.</Typography>;\n  }\n};\n\nconst handleArchiveButton = (setCall, token, call) => {\n  API.archiveCall(token, call.id)\n    .then(resp => resp.json())\n    .then(data => {\n      setCall(data);\n    });\n};\n\nexport default CallInformation;\n",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":59,"column":6,"nodeType":"48","endLine":59,"endColumn":17,"suggestions":"49"},{"ruleId":"50","severity":1,"message":"51","line":52,"column":1,"nodeType":"52","endLine":57,"endColumn":3},{"ruleId":"46","severity":1,"message":"53","line":30,"column":6,"nodeType":"48","endLine":30,"endColumn":12,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":28,"column":11,"nodeType":"57","messageId":"58","endLine":28,"endColumn":23},{"ruleId":"55","severity":1,"message":"56","line":65,"column":11,"nodeType":"57","messageId":"58","endLine":65,"endColumn":23},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshToken'. Either include it or remove the dependency array.","ArrayExpression",["61"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["62"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},"Update the dependencies array to be: [authToken, refreshToken]",{"range":"67","text":"68"},"Update the dependencies array to be: [page, token]",{"range":"69","text":"70"},[1537,1548],"[authToken, refreshToken]",[684,690],"[page, token]"]