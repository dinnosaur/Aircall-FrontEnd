{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport { Typography, Divider } from '../..';\nimport { isGroupType, isItemSelected, optionValue } from '../utils';\nimport { OptionItem } from './OptionItem';\nimport { SelectGroupLabel } from './styled';\nexport var SelectMenu = function SelectMenu(_ref) {\n  var options = _ref.options,\n      size = _ref.size,\n      selectedValue = _ref.selectedValue,\n      getOptionValue = _ref.getOptionValue,\n      getOptionLabel = _ref.getOptionLabel,\n      isMulti = _ref.isMulti,\n      onSelect = _ref.onSelect,\n      OptionComponent = _ref.optionComponent;\n  var renderOption = useCallback(function (item) {\n    var isSelected = isItemSelected(item, selectedValue, getOptionValue);\n    return /*#__PURE__*/React.createElement(OptionItem, {\n      key: \"option_item_\" + optionValue(item, getOptionValue),\n      size: size,\n      isMulti: isMulti,\n      option: item,\n      isSelected: isSelected,\n      onSelect: onSelect,\n      optionComponent: OptionComponent,\n      getOptionValue: getOptionValue,\n      getOptionLabel: getOptionLabel\n    });\n  }, [OptionComponent, getOptionLabel, getOptionValue, isMulti, onSelect, selectedValue, size]);\n  var menuElement = useMemo(function () {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, options.map(function (element, idx) {\n      if (isGroupType(element)) {\n        var groupLabel = element.label;\n        var groupOptions = element.options;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: \"group_\" + idx + \"_\" + groupLabel\n        }, groupLabel ? /*#__PURE__*/React.createElement(SelectGroupLabel, {\n          size: size\n        }, /*#__PURE__*/React.createElement(Typography, {\n          variant: \"overline2\",\n          color: \"text.dark\",\n          px: \"s\"\n        }, groupLabel)) : idx !== 0 && /*#__PURE__*/React.createElement(Divider, {\n          orientation: \"horizontal\",\n          size: \"xSmall\",\n          color: \"grey.base\"\n        }), groupOptions.map(function (item) {\n          return renderOption(item);\n        }));\n      } else {\n        return renderOption(element);\n      }\n    }));\n  }, [options, renderOption, size]);\n  return menuElement;\n};","map":{"version":3,"sources":["/Users/dinnosivagnanam/Development/Aircall-FrontEnd/node_modules/@aircall/tractor/es/components/Select/components/SelectMenu.js"],"names":["React","useCallback","useMemo","Typography","Divider","isGroupType","isItemSelected","optionValue","OptionItem","SelectGroupLabel","SelectMenu","_ref","options","size","selectedValue","getOptionValue","getOptionLabel","isMulti","onSelect","OptionComponent","optionComponent","renderOption","item","isSelected","createElement","key","option","menuElement","Fragment","map","element","idx","groupLabel","label","groupOptions","variant","color","px","orientation"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { Typography, Divider } from '../..';\nimport { isGroupType, isItemSelected, optionValue } from '../utils';\nimport { OptionItem } from './OptionItem';\nimport { SelectGroupLabel } from './styled';\nexport var SelectMenu = function SelectMenu(_ref) {\n  var options = _ref.options,\n      size = _ref.size,\n      selectedValue = _ref.selectedValue,\n      getOptionValue = _ref.getOptionValue,\n      getOptionLabel = _ref.getOptionLabel,\n      isMulti = _ref.isMulti,\n      onSelect = _ref.onSelect,\n      OptionComponent = _ref.optionComponent;\n  var renderOption = useCallback(function (item) {\n    var isSelected = isItemSelected(item, selectedValue, getOptionValue);\n    return /*#__PURE__*/React.createElement(OptionItem, {\n      key: \"option_item_\" + optionValue(item, getOptionValue),\n      size: size,\n      isMulti: isMulti,\n      option: item,\n      isSelected: isSelected,\n      onSelect: onSelect,\n      optionComponent: OptionComponent,\n      getOptionValue: getOptionValue,\n      getOptionLabel: getOptionLabel\n    });\n  }, [OptionComponent, getOptionLabel, getOptionValue, isMulti, onSelect, selectedValue, size]);\n  var menuElement = useMemo(function () {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, options.map(function (element, idx) {\n      if (isGroupType(element)) {\n        var groupLabel = element.label;\n        var groupOptions = element.options;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: \"group_\" + idx + \"_\" + groupLabel\n        }, groupLabel ? /*#__PURE__*/React.createElement(SelectGroupLabel, {\n          size: size\n        }, /*#__PURE__*/React.createElement(Typography, {\n          variant: \"overline2\",\n          color: \"text.dark\",\n          px: \"s\"\n        }, groupLabel)) : idx !== 0 && /*#__PURE__*/React.createElement(Divider, {\n          orientation: \"horizontal\",\n          size: \"xSmall\",\n          color: \"grey.base\"\n        }), groupOptions.map(function (item) {\n          return renderOption(item);\n        }));\n      } else {\n        return renderOption(element);\n      }\n    }));\n  }, [options, renderOption, size]);\n  return menuElement;\n};"]},"metadata":{},"sourceType":"module"}