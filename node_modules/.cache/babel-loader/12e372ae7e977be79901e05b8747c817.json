{"ast":null,"code":"var FFT_SIZE = 32;\nexport var createVolumeAnalyserData = function createVolumeAnalyserData(mediaStream) {\n  var audioContext = new AudioContext();\n  var mediaStreamSource = audioContext.createMediaStreamSource(mediaStream);\n  var analyserNode = audioContext.createAnalyser();\n  analyserNode.fftSize = FFT_SIZE;\n  analyserNode.smoothingTimeConstant = 0.3;\n  mediaStreamSource.connect(analyserNode);\n  var analyserDataBuffer = new Uint8Array(analyserNode.frequencyBinCount);\n  return {\n    audioContext: audioContext,\n    analyserNode: analyserNode,\n    analyserDataBuffer: analyserDataBuffer,\n    mediaStreamSource: mediaStreamSource\n  };\n};\nexport var PollVolumeClass = function PollVolumeClass() {\n  var _this = this;\n\n  this.isPolling = true;\n\n  this.pollVolume = function (analyserNode, analyserDataBuffer, setVolumeLevel) {\n    if (!_this.isPolling) {\n      return;\n    }\n\n    analyserNode.getByteFrequencyData(analyserDataBuffer);\n    var volume = analyserDataBuffer.reduce(function (a, b) {\n      return a + b;\n    }, 0) / analyserDataBuffer.length;\n    var volumeLvl = volume / 255;\n    setVolumeLevel(volumeLvl);\n    window.requestAnimationFrame(function () {\n      return _this.pollVolume(analyserNode, analyserDataBuffer, setVolumeLevel);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/dinnosivagnanam/Development/Aircall-FrontEnd/node_modules/@aircall/tractor/es/components/Gauge/utils.js"],"names":["FFT_SIZE","createVolumeAnalyserData","mediaStream","audioContext","AudioContext","mediaStreamSource","createMediaStreamSource","analyserNode","createAnalyser","fftSize","smoothingTimeConstant","connect","analyserDataBuffer","Uint8Array","frequencyBinCount","PollVolumeClass","_this","isPolling","pollVolume","setVolumeLevel","getByteFrequencyData","volume","reduce","a","b","length","volumeLvl","window","requestAnimationFrame"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,EAAf;AACA,OAAO,IAAIC,wBAAwB,GAAG,SAASA,wBAAT,CAAkCC,WAAlC,EAA+C;AACnF,MAAIC,YAAY,GAAG,IAAIC,YAAJ,EAAnB;AACA,MAAIC,iBAAiB,GAAGF,YAAY,CAACG,uBAAb,CAAqCJ,WAArC,CAAxB;AACA,MAAIK,YAAY,GAAGJ,YAAY,CAACK,cAAb,EAAnB;AACAD,EAAAA,YAAY,CAACE,OAAb,GAAuBT,QAAvB;AACAO,EAAAA,YAAY,CAACG,qBAAb,GAAqC,GAArC;AACAL,EAAAA,iBAAiB,CAACM,OAAlB,CAA0BJ,YAA1B;AACA,MAAIK,kBAAkB,GAAG,IAAIC,UAAJ,CAAeN,YAAY,CAACO,iBAA5B,CAAzB;AACA,SAAO;AACLX,IAAAA,YAAY,EAAEA,YADT;AAELI,IAAAA,YAAY,EAAEA,YAFT;AAGLK,IAAAA,kBAAkB,EAAEA,kBAHf;AAILP,IAAAA,iBAAiB,EAAEA;AAJd,GAAP;AAMD,CAdM;AAeP,OAAO,IAAIU,eAAe,GAAG,SAASA,eAAT,GAA2B;AACtD,MAAIC,KAAK,GAAG,IAAZ;;AAEA,OAAKC,SAAL,GAAiB,IAAjB;;AAEA,OAAKC,UAAL,GAAkB,UAAUX,YAAV,EAAwBK,kBAAxB,EAA4CO,cAA5C,EAA4D;AAC5E,QAAI,CAACH,KAAK,CAACC,SAAX,EAAsB;AACpB;AACD;;AAEDV,IAAAA,YAAY,CAACa,oBAAb,CAAkCR,kBAAlC;AACA,QAAIS,MAAM,GAAGT,kBAAkB,CAACU,MAAnB,CAA0B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACrD,aAAOD,CAAC,GAAGC,CAAX;AACD,KAFY,EAEV,CAFU,IAELZ,kBAAkB,CAACa,MAF3B;AAGA,QAAIC,SAAS,GAAGL,MAAM,GAAG,GAAzB;AACAF,IAAAA,cAAc,CAACO,SAAD,CAAd;AACAC,IAAAA,MAAM,CAACC,qBAAP,CAA6B,YAAY;AACvC,aAAOZ,KAAK,CAACE,UAAN,CAAiBX,YAAjB,EAA+BK,kBAA/B,EAAmDO,cAAnD,CAAP;AACD,KAFD;AAGD,GAdD;AAeD,CApBM","sourcesContent":["var FFT_SIZE = 32;\nexport var createVolumeAnalyserData = function createVolumeAnalyserData(mediaStream) {\n  var audioContext = new AudioContext();\n  var mediaStreamSource = audioContext.createMediaStreamSource(mediaStream);\n  var analyserNode = audioContext.createAnalyser();\n  analyserNode.fftSize = FFT_SIZE;\n  analyserNode.smoothingTimeConstant = 0.3;\n  mediaStreamSource.connect(analyserNode);\n  var analyserDataBuffer = new Uint8Array(analyserNode.frequencyBinCount);\n  return {\n    audioContext: audioContext,\n    analyserNode: analyserNode,\n    analyserDataBuffer: analyserDataBuffer,\n    mediaStreamSource: mediaStreamSource\n  };\n};\nexport var PollVolumeClass = function PollVolumeClass() {\n  var _this = this;\n\n  this.isPolling = true;\n\n  this.pollVolume = function (analyserNode, analyserDataBuffer, setVolumeLevel) {\n    if (!_this.isPolling) {\n      return;\n    }\n\n    analyserNode.getByteFrequencyData(analyserDataBuffer);\n    var volume = analyserDataBuffer.reduce(function (a, b) {\n      return a + b;\n    }, 0) / analyserDataBuffer.length;\n    var volumeLvl = volume / 255;\n    setVolumeLevel(volumeLvl);\n    window.requestAnimationFrame(function () {\n      return _this.pollVolume(analyserNode, analyserDataBuffer, setVolumeLevel);\n    });\n  };\n};"]},"metadata":{},"sourceType":"module"}