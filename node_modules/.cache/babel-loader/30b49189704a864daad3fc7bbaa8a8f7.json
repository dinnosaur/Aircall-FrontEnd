{"ast":null,"code":"import { useCallback, useEffect } from 'react';\n/**\n * Listen for clicks outside the overlay in order to close it\n */\n\nexport var useCloseOnClick = function useCloseOnClick(options) {\n  var container = options.container,\n      node = options.node,\n      triggerNode = options.triggerNode,\n      closeOnInsideClick = options.closeOnInsideClick,\n      onClose = options.onClose;\n  var handleClick = useCallback(function (event) {\n    var target = event.target;\n\n    if (closeOnInsideClick) {\n      /**\n       * we use setTimeout to make sure that onClose calls after children onclick handlers\n       * otherwise the onClick events would fire on detached children and fail\n       */\n      setTimeout(onClose, 0);\n      return;\n    }\n\n    var hasClickedOnTheTrigger = triggerNode.contains(target);\n    var hasClickedOnThePortal = node.contains(target);\n\n    if (!hasClickedOnTheTrigger && !hasClickedOnThePortal) {\n      onClose();\n    }\n  }, [triggerNode, node, closeOnInsideClick, onClose]);\n  useEffect(function () {\n    if (!node || !triggerNode) {\n      return;\n    }\n\n    container.addEventListener('click', handleClick, true);\n    return function () {\n      container.removeEventListener('click', handleClick, true);\n    };\n  }, [container, handleClick, node, triggerNode]);\n};","map":{"version":3,"sources":["/Users/dinnosivagnanam/Development/Aircall-FrontEnd/node_modules/@aircall/tractor/es/hooks/useCloseOnClick/useCloseOnClick.js"],"names":["useCallback","useEffect","useCloseOnClick","options","container","node","triggerNode","closeOnInsideClick","onClose","handleClick","event","target","setTimeout","hasClickedOnTheTrigger","contains","hasClickedOnThePortal","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AAEA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AAC7D,MAAIC,SAAS,GAAGD,OAAO,CAACC,SAAxB;AAAA,MACIC,IAAI,GAAGF,OAAO,CAACE,IADnB;AAAA,MAEIC,WAAW,GAAGH,OAAO,CAACG,WAF1B;AAAA,MAGIC,kBAAkB,GAAGJ,OAAO,CAACI,kBAHjC;AAAA,MAIIC,OAAO,GAAGL,OAAO,CAACK,OAJtB;AAKA,MAAIC,WAAW,GAAGT,WAAW,CAAC,UAAUU,KAAV,EAAiB;AAC7C,QAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;;AAEA,QAAIJ,kBAAJ,EAAwB;AACtB;AACN;AACA;AACA;AACMK,MAAAA,UAAU,CAACJ,OAAD,EAAU,CAAV,CAAV;AACA;AACD;;AAED,QAAIK,sBAAsB,GAAGP,WAAW,CAACQ,QAAZ,CAAqBH,MAArB,CAA7B;AACA,QAAII,qBAAqB,GAAGV,IAAI,CAACS,QAAL,CAAcH,MAAd,CAA5B;;AAEA,QAAI,CAACE,sBAAD,IAA2B,CAACE,qBAAhC,EAAuD;AACrDP,MAAAA,OAAO;AACR;AACF,GAlB4B,EAkB1B,CAACF,WAAD,EAAcD,IAAd,EAAoBE,kBAApB,EAAwCC,OAAxC,CAlB0B,CAA7B;AAmBAP,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAI,CAACI,IAAD,IAAS,CAACC,WAAd,EAA2B;AACzB;AACD;;AAEDF,IAAAA,SAAS,CAACY,gBAAV,CAA2B,OAA3B,EAAoCP,WAApC,EAAiD,IAAjD;AACA,WAAO,YAAY;AACjBL,MAAAA,SAAS,CAACa,mBAAV,CAA8B,OAA9B,EAAuCR,WAAvC,EAAoD,IAApD;AACD,KAFD;AAGD,GATQ,EASN,CAACL,SAAD,EAAYK,WAAZ,EAAyBJ,IAAzB,EAA+BC,WAA/B,CATM,CAAT;AAUD,CAnCM","sourcesContent":["import { useCallback, useEffect } from 'react';\n\n/**\n * Listen for clicks outside the overlay in order to close it\n */\nexport var useCloseOnClick = function useCloseOnClick(options) {\n  var container = options.container,\n      node = options.node,\n      triggerNode = options.triggerNode,\n      closeOnInsideClick = options.closeOnInsideClick,\n      onClose = options.onClose;\n  var handleClick = useCallback(function (event) {\n    var target = event.target;\n\n    if (closeOnInsideClick) {\n      /**\n       * we use setTimeout to make sure that onClose calls after children onclick handlers\n       * otherwise the onClick events would fire on detached children and fail\n       */\n      setTimeout(onClose, 0);\n      return;\n    }\n\n    var hasClickedOnTheTrigger = triggerNode.contains(target);\n    var hasClickedOnThePortal = node.contains(target);\n\n    if (!hasClickedOnTheTrigger && !hasClickedOnThePortal) {\n      onClose();\n    }\n  }, [triggerNode, node, closeOnInsideClick, onClose]);\n  useEffect(function () {\n    if (!node || !triggerNode) {\n      return;\n    }\n\n    container.addEventListener('click', handleClick, true);\n    return function () {\n      container.removeEventListener('click', handleClick, true);\n    };\n  }, [container, handleClick, node, triggerNode]);\n};"]},"metadata":{},"sourceType":"module"}