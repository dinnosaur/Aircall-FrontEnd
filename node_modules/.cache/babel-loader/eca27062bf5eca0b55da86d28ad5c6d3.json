{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { forwardRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { color } from 'styled-system';\nimport { Grid } from '../Grid';\nimport { createVolumeAnalyserData, PollVolumeClass } from './utils';\nvar GaugeIndicator = styled.span.withConfig({\n  displayName: \"Gauge__GaugeIndicator\",\n  componentId: \"sc-13cs6oa-0\"\n})([\"\", \";border-radius:8px;display:block;height:12px;transition:background-color 0.2s ease-in-out;\"], color);\nvar Gauge = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var value = _ref.value,\n      _ref$gauges = _ref.gauges,\n      gauges = _ref$gauges === void 0 ? 8 : _ref$gauges;\n  var gaugesArray = Array.from(Array(gauges).keys()); // Just make n f**n gauges.\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    ref: ref,\n    width: \"100%\",\n    gridColumnGap: \"12px\",\n    gridTemplateColumns: \"repeat(8, 1fr)\",\n    \"data-test\": \"input-gauge\"\n  }, gaugesArray.map(function (_, index) {\n    return /*#__PURE__*/React.createElement(GaugeIndicator, {\n      key: index,\n      bg: index < value ? 'primary.base' : 'grey.base'\n    });\n  }));\n}); // Just for the story itself, because we need the mediaDevices from the navigator.\n\nexport var GaugeForStory = function GaugeForStory() {\n  var _useState = useState(),\n      selectedDevice = _useState[0],\n      setSelectedDevice = _useState[1];\n\n  var _useState2 = useState(),\n      mediaStream = _useState2[0],\n      setMediaStream = _useState2[1];\n\n  var _useState3 = useState(0),\n      volumeLevel = _useState3[0],\n      setVolumeLevel = _useState3[1];\n\n  var level = Math.trunc(volumeLevel * 16);\n  useEffect(function () {\n    if (!selectedDevice) {\n      navigator.mediaDevices.enumerateDevices().then(function (devices) {\n        // Find the (first) default device.\n        var defaultDevice = devices.find(function (device) {\n          return device.deviceId === 'default' && device.kind === 'audioinput';\n        }); // Find the real default device using the first one's groupId.\n\n        var selectedDevice = devices.find(function (device) {\n          return defaultDevice && device.deviceId !== 'default' && device.groupId === defaultDevice.groupId && device.kind === 'audioinput';\n        });\n        setSelectedDevice(selectedDevice);\n      });\n    }\n  }, [setSelectedDevice, selectedDevice]);\n  useEffect(function () {\n    if (!!selectedDevice) {\n      var mediaConstraints = {\n        audio: {\n          deviceId: selectedDevice.deviceId\n        }\n      };\n      navigator.mediaDevices.getUserMedia(_extends({}, mediaConstraints)).then(setMediaStream);\n    }\n\n    return function () {\n      setMediaStream(undefined);\n      setVolumeLevel(0);\n    };\n  }, [selectedDevice]);\n  useEffect(function () {\n    if (!mediaStream) {\n      return;\n    }\n\n    var pollVolume = new PollVolumeClass();\n\n    var _createVolumeAnalyser = createVolumeAnalyserData(mediaStream),\n        audioContext = _createVolumeAnalyser.audioContext,\n        mediaStreamSource = _createVolumeAnalyser.mediaStreamSource,\n        analyserNode = _createVolumeAnalyser.analyserNode,\n        analyserDataBuffer = _createVolumeAnalyser.analyserDataBuffer;\n\n    pollVolume.pollVolume(analyserNode, analyserDataBuffer, setVolumeLevel);\n    return function () {\n      pollVolume.isPolling = false;\n      mediaStreamSource.disconnect();\n      mediaStream.getTracks().forEach(function (track) {\n        return track.stop();\n      });\n      audioContext.close();\n    };\n  }, [mediaStream]);\n  return /*#__PURE__*/React.createElement(Gauge, {\n    value: level\n  });\n};\nexport default Gauge;","map":{"version":3,"sources":["/Users/dinnosivagnanam/Development/Aircall-FrontEnd/node_modules/@aircall/tractor/es/components/Gauge/Gauge.js"],"names":["_extends","React","forwardRef","useEffect","useState","styled","color","Grid","createVolumeAnalyserData","PollVolumeClass","GaugeIndicator","span","withConfig","displayName","componentId","Gauge","_ref","ref","value","_ref$gauges","gauges","gaugesArray","Array","from","keys","createElement","width","gridColumnGap","gridTemplateColumns","map","_","index","key","bg","GaugeForStory","_useState","selectedDevice","setSelectedDevice","_useState2","mediaStream","setMediaStream","_useState3","volumeLevel","setVolumeLevel","level","Math","trunc","navigator","mediaDevices","enumerateDevices","then","devices","defaultDevice","find","device","deviceId","kind","groupId","mediaConstraints","audio","getUserMedia","undefined","pollVolume","_createVolumeAnalyser","audioContext","mediaStreamSource","analyserNode","analyserDataBuffer","isPolling","disconnect","getTracks","forEach","track","stop","close"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { forwardRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { color } from 'styled-system';\nimport { Grid } from '../Grid';\nimport { createVolumeAnalyserData, PollVolumeClass } from './utils';\nvar GaugeIndicator = styled.span.withConfig({\n  displayName: \"Gauge__GaugeIndicator\",\n  componentId: \"sc-13cs6oa-0\"\n})([\"\", \";border-radius:8px;display:block;height:12px;transition:background-color 0.2s ease-in-out;\"], color);\nvar Gauge = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var value = _ref.value,\n      _ref$gauges = _ref.gauges,\n      gauges = _ref$gauges === void 0 ? 8 : _ref$gauges;\n  var gaugesArray = Array.from(Array(gauges).keys()); // Just make n f**n gauges.\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    ref: ref,\n    width: \"100%\",\n    gridColumnGap: \"12px\",\n    gridTemplateColumns: \"repeat(8, 1fr)\",\n    \"data-test\": \"input-gauge\"\n  }, gaugesArray.map(function (_, index) {\n    return /*#__PURE__*/React.createElement(GaugeIndicator, {\n      key: index,\n      bg: index < value ? 'primary.base' : 'grey.base'\n    });\n  }));\n}); // Just for the story itself, because we need the mediaDevices from the navigator.\n\nexport var GaugeForStory = function GaugeForStory() {\n  var _useState = useState(),\n      selectedDevice = _useState[0],\n      setSelectedDevice = _useState[1];\n\n  var _useState2 = useState(),\n      mediaStream = _useState2[0],\n      setMediaStream = _useState2[1];\n\n  var _useState3 = useState(0),\n      volumeLevel = _useState3[0],\n      setVolumeLevel = _useState3[1];\n\n  var level = Math.trunc(volumeLevel * 16);\n  useEffect(function () {\n    if (!selectedDevice) {\n      navigator.mediaDevices.enumerateDevices().then(function (devices) {\n        // Find the (first) default device.\n        var defaultDevice = devices.find(function (device) {\n          return device.deviceId === 'default' && device.kind === 'audioinput';\n        }); // Find the real default device using the first one's groupId.\n\n        var selectedDevice = devices.find(function (device) {\n          return defaultDevice && device.deviceId !== 'default' && device.groupId === defaultDevice.groupId && device.kind === 'audioinput';\n        });\n        setSelectedDevice(selectedDevice);\n      });\n    }\n  }, [setSelectedDevice, selectedDevice]);\n  useEffect(function () {\n    if (!!selectedDevice) {\n      var mediaConstraints = {\n        audio: {\n          deviceId: selectedDevice.deviceId\n        }\n      };\n      navigator.mediaDevices.getUserMedia(_extends({}, mediaConstraints)).then(setMediaStream);\n    }\n\n    return function () {\n      setMediaStream(undefined);\n      setVolumeLevel(0);\n    };\n  }, [selectedDevice]);\n  useEffect(function () {\n    if (!mediaStream) {\n      return;\n    }\n\n    var pollVolume = new PollVolumeClass();\n\n    var _createVolumeAnalyser = createVolumeAnalyserData(mediaStream),\n        audioContext = _createVolumeAnalyser.audioContext,\n        mediaStreamSource = _createVolumeAnalyser.mediaStreamSource,\n        analyserNode = _createVolumeAnalyser.analyserNode,\n        analyserDataBuffer = _createVolumeAnalyser.analyserDataBuffer;\n\n    pollVolume.pollVolume(analyserNode, analyserDataBuffer, setVolumeLevel);\n    return function () {\n      pollVolume.isPolling = false;\n      mediaStreamSource.disconnect();\n      mediaStream.getTracks().forEach(function (track) {\n        return track.stop();\n      });\n      audioContext.close();\n    };\n  }, [mediaStream]);\n  return /*#__PURE__*/React.createElement(Gauge, {\n    value: level\n  });\n};\nexport default Gauge;"]},"metadata":{},"sourceType":"module"}